/*
 * This source file contains a Verilog description of an IP core
 * automatically generated by the SPIRAL HDL Generator.
 *
 * This product includes a hardware design developed by Carnegie Mellon University.
 *
 * Copyright (c) 2005-2011 by Peter A. Milder for the SPIRAL Project,
 * Carnegie Mellon University
 *
 * For more information, see the SPIRAL project website at:
 *   http://www.spiral.net
 *
 * This design is provided for internal, non-commercial research use only
 * and is not for redistribution, with or without modifications.
 * 
 * You may not use the name "Carnegie Mellon University" or derivations
 * thereof to endorse or promote products derived from this software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" WITHOUT ANY WARRANTY OF ANY KIND, EITHER
 * EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO ANY WARRANTY
 * THAT THE SOFTWARE WILL CONFORM TO SPECIFICATIONS OR BE ERROR-FREE AND ANY
 * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
 * TITLE, OR NON-INFRINGEMENT.  IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY
 * BE LIABLE FOR ANY DAMAGES, INCLUDING BUT NOT LIMITED TO DIRECT, INDIRECT,
 * SPECIAL OR CONSEQUENTIAL DAMAGES, ARISING OUT OF, RESULTING FROM, OR IN
 * ANY WAY CONNECTED WITH THIS SOFTWARE (WHETHER OR NOT BASED UPON WARRANTY,
 * CONTRACT, TORT OR OTHERWISE).
 *
 */

/* Portions of this design are protected by US Patent no. 8,321,823
 * (assignee: Carnegie Mellon University).
 */

//   Input/output stream: 16 complex words per cycle
//   Throughput: one transform every 661 cycles
//   Latency: 731 cycles

//   Resources required:
//     32 multipliers (10 x 10 bit)
//     56 adders (10 x 10 bit)
//     32 RAMs (128 words, 20 bits per word)
//     16 ROMs (1024 words, 10 bits per word)

// Generated on Wed Jan 29 05:15:14 EST 2014

// Latency: 731 clock cycles
// Throughput: 1 transform every 661 cycles


// We use an interleaved complex data format.  X0 represents the
// real portion of the first input, and X1 represents the imaginary
// portion.  The X variables are system inputs and the Y variables
// are system outputs.

// The design uses a system of flag signals to indicate the
// beginning of the input and output data streams.  The 'nexti'
// input (asserted high), is used to instruct the system that the
// input stream will begin on the following cycle.

// This system has a 'gap' of 661 cycles.  This means that
// 661 cycles must elapse between the beginning of the input
// vectors.

// The output signal 'next_out' (also asserted high) indicates
// that the output vector will begin streaming out of the system
 // on the following cycle.

// The system has a latency of 731 cycles.  This means that
// the 'next_out' will be asserted 731 cycles after the user
// asserts 'nexti'.

// The simple testbench below will demonstrate the timing for loading
// and unloading data vectors.
// The system reset signal is asserted high.

// Please note: when simulating floating point code, you must include
// Xilinx's DSP slice simulation module.


module dft_testbench();
   reg clk, reset, nexti;
   wire next_out;
   integer i, j, k, l, m;
   reg [15:0] counter;
   reg [9:0] in [31:0];
   wire [9:0] X0;
   wire [9:0] Y0;
   wire [9:0] X1;
   wire [9:0] Y1;
   wire [9:0] X2;
   wire [9:0] Y2;
   wire [9:0] X3;
   wire [9:0] Y3;
   wire [9:0] X4;
   wire [9:0] Y4;
   wire [9:0] X5;
   wire [9:0] Y5;
   wire [9:0] X6;
   wire [9:0] Y6;
   wire [9:0] X7;
   wire [9:0] Y7;
   wire [9:0] X8;
   wire [9:0] Y8;
   wire [9:0] X9;
   wire [9:0] Y9;
   wire [9:0] X10;
   wire [9:0] Y10;
   wire [9:0] X11;
   wire [9:0] Y11;
   wire [9:0] X12;
   wire [9:0] Y12;
   wire [9:0] X13;
   wire [9:0] Y13;
   wire [9:0] X14;
   wire [9:0] Y14;
   wire [9:0] X15;
   wire [9:0] Y15;
   wire [9:0] X16;
   wire [9:0] Y16;
   wire [9:0] X17;
   wire [9:0] Y17;
   wire [9:0] X18;
   wire [9:0] Y18;
   wire [9:0] X19;
   wire [9:0] Y19;
   wire [9:0] X20;
   wire [9:0] Y20;
   wire [9:0] X21;
   wire [9:0] Y21;
   wire [9:0] X22;
   wire [9:0] Y22;
   wire [9:0] X23;
   wire [9:0] Y23;
   wire [9:0] X24;
   wire [9:0] Y24;
   wire [9:0] X25;
   wire [9:0] Y25;
   wire [9:0] X26;
   wire [9:0] Y26;
   wire [9:0] X27;
   wire [9:0] Y27;
   wire [9:0] X28;
   wire [9:0] Y28;
   wire [9:0] X29;
   wire [9:0] Y29;
   wire [9:0] X30;
   wire [9:0] Y30;
   wire [9:0] X31;
   wire [9:0] Y31;
   reg clrCnt;
   assign X0 = in[0];
   assign X1 = in[1];
   assign X2 = in[2];
   assign X3 = in[3];
   assign X4 = in[4];
   assign X5 = in[5];
   assign X6 = in[6];
   assign X7 = in[7];
   assign X8 = in[8];
   assign X9 = in[9];
   assign X10 = in[10];
   assign X11 = in[11];
   assign X12 = in[12];
   assign X13 = in[13];
   assign X14 = in[14];
   assign X15 = in[15];
   assign X16 = in[16];
   assign X17 = in[17];
   assign X18 = in[18];
   assign X19 = in[19];
   assign X20 = in[20];
   assign X21 = in[21];
   assign X22 = in[22];
   assign X23 = in[23];
   assign X24 = in[24];
   assign X25 = in[25];
   assign X26 = in[26];
   assign X27 = in[27];
   assign X28 = in[28];
   assign X29 = in[29];
   assign X30 = in[30];
   assign X31 = in[31];

   initial clk = 0;

   always #10000 clk = ~clk;


   // Instantiate top-level module of core 'X' signals are system inputs
   // and 'Y' signals are system outputs
   dft_top dft_top_instance (.clk(clk), .reset(reset), .nexti(nexti), .next_out(next_out),
    .X0(X0), .Y0(Y0),
    .X1(X1), .Y1(Y1),
    .X2(X2), .Y2(Y2),
    .X3(X3), .Y3(Y3),
    .X4(X4), .Y4(Y4),
    .X5(X5), .Y5(Y5),
    .X6(X6), .Y6(Y6),
    .X7(X7), .Y7(Y7),
    .X8(X8), .Y8(Y8),
    .X9(X9), .Y9(Y9),
    .X10(X10), .Y10(Y10),
    .X11(X11), .Y11(Y11),
    .X12(X12), .Y12(Y12),
    .X13(X13), .Y13(Y13),
    .X14(X14), .Y14(Y14),
    .X15(X15), .Y15(Y15),
    .X16(X16), .Y16(Y16),
    .X17(X17), .Y17(Y17),
    .X18(X18), .Y18(Y18),
    .X19(X19), .Y19(Y19),
    .X20(X20), .Y20(Y20),
    .X21(X21), .Y21(Y21),
    .X22(X22), .Y22(Y22),
    .X23(X23), .Y23(Y23),
    .X24(X24), .Y24(Y24),
    .X25(X25), .Y25(Y25),
    .X26(X26), .Y26(Y26),
    .X27(X27), .Y27(Y27),
    .X28(X28), .Y28(Y28),
    .X29(X29), .Y29(Y29),
    .X30(X30), .Y30(Y30),
    .X31(X31), .Y31(Y31));

   // You can use this counter to verify that the gap and latency are as expected.
   always @(posedge clk) begin
      if (clrCnt) counter <= 0;
      else counter <= counter+1;
   end


   initial begin
      @(posedge clk);
      @(posedge clk);

      // On the nexti cycle, begin loading input vector.
      nexti <= 1;
      clrCnt <= 1;
      @(posedge clk);
      clrCnt <= 0;
      nexti <= 0;

      // The 1024 complex data points enter the system over 64 cycles
      for (j=0; j < 63; j = j+1) begin
          // Input: 16 complex words per cycle
         for (k=0; k < 32; k = k+1) begin
            in[k] <= j*32 + k;
         end
         @(posedge clk);
      end
      j = 63;
      for (k=0; k < 32; k = k+1) begin
         in[k] <= j*32 + k;
      end


      @(posedge clk);
      // Wait until the nexti data vector can be entered
      while (counter < 659)
        @(posedge clk);

      // On the nexti cycle, we will start the nexti data vector
      nexti <= 1;
      clrCnt <= 1;
      @(posedge clk);
      clrCnt <= 0;
      nexti <= 0;

      // Start entering nexti input vector
      for (j=0; j < 63; j = j+1) begin
         // Input 32 words per cycle
         for (k=0; k < 32; k = k+1) begin
            in[k] <= 2048 + j*32 + k;
          end
          @(posedge clk);
       end
       j = 63;
       for (k=0; k < 32; k = k+1) begin
          in[k] <= 2048 + j*32 + k;
       end
   end


   initial begin
      // set initial values
      in[0] <= 0;
      in[1] <= 0;
      in[2] <= 0;
      in[3] <= 0;
      in[4] <= 0;
      in[5] <= 0;
      in[6] <= 0;
      in[7] <= 0;
      in[8] <= 0;
      in[9] <= 0;
      in[10] <= 0;
      in[11] <= 0;
      in[12] <= 0;
      in[13] <= 0;
      in[14] <= 0;
      in[15] <= 0;
      in[16] <= 0;
      in[17] <= 0;
      in[18] <= 0;
      in[19] <= 0;
      in[20] <= 0;
      in[21] <= 0;
      in[22] <= 0;
      in[23] <= 0;
      in[24] <= 0;
      in[25] <= 0;
      in[26] <= 0;
      in[27] <= 0;
      in[28] <= 0;
      in[29] <= 0;
      in[30] <= 0;
      in[31] <= 0;
      nexti <= 0;
      reset <= 0;

      @(posedge clk);
      reset <= 1;
      @(posedge clk);
      reset <= 0;
      @(posedge clk);
      @(posedge clk);
      // Wait until next_out goes high, then wait one clock cycle and begin receiving data
      @(posedge next_out);
      @(posedge clk); #1;
      $display("--- begin output 1---");

      for (m=0; m < 63; m=m+1) begin
         $display("%x", Y0);
         $display("%x", Y1);
         $display("%x", Y2);
         $display("%x", Y3);
         $display("%x", Y4);
         $display("%x", Y5);
         $display("%x", Y6);
         $display("%x", Y7);
         $display("%x", Y8);
         $display("%x", Y9);
         $display("%x", Y10);
         $display("%x", Y11);
         $display("%x", Y12);
         $display("%x", Y13);
         $display("%x", Y14);
         $display("%x", Y15);
         $display("%x", Y16);
         $display("%x", Y17);
         $display("%x", Y18);
         $display("%x", Y19);
         $display("%x", Y20);
         $display("%x", Y21);
         $display("%x", Y22);
         $display("%x", Y23);
         $display("%x", Y24);
         $display("%x", Y25);
         $display("%x", Y26);
         $display("%x", Y27);
         $display("%x", Y28);
         $display("%x", Y29);
         $display("%x", Y30);
         $display("%x", Y31);
         @(posedge clk); #1;
      end
      $display("%x", Y0);
      $display("%x", Y1);
      $display("%x", Y2);
      $display("%x", Y3);
      $display("%x", Y4);
      $display("%x", Y5);
      $display("%x", Y6);
      $display("%x", Y7);
      $display("%x", Y8);
      $display("%x", Y9);
      $display("%x", Y10);
      $display("%x", Y11);
      $display("%x", Y12);
      $display("%x", Y13);
      $display("%x", Y14);
      $display("%x", Y15);
      $display("%x", Y16);
      $display("%x", Y17);
      $display("%x", Y18);
      $display("%x", Y19);
      $display("%x", Y20);
      $display("%x", Y21);
      $display("%x", Y22);
      $display("%x", Y23);
      $display("%x", Y24);
      $display("%x", Y25);
      $display("%x", Y26);
      $display("%x", Y27);
      $display("%x", Y28);
      $display("%x", Y29);
      $display("%x", Y30);
      $display("%x", Y31);
      // Wait until next_out goes high, then wait one clock cycle and begin receiving data
      @(posedge next_out);
      @(posedge clk); #1;
      $display("--- begin output 2---");

      for (m=0; m < 63; m=m+1) begin
         $display("%x", Y0);
         $display("%x", Y1);
         $display("%x", Y2);
         $display("%x", Y3);
         $display("%x", Y4);
         $display("%x", Y5);
         $display("%x", Y6);
         $display("%x", Y7);
         $display("%x", Y8);
         $display("%x", Y9);
         $display("%x", Y10);
         $display("%x", Y11);
         $display("%x", Y12);
         $display("%x", Y13);
         $display("%x", Y14);
         $display("%x", Y15);
         $display("%x", Y16);
         $display("%x", Y17);
         $display("%x", Y18);
         $display("%x", Y19);
         $display("%x", Y20);
         $display("%x", Y21);
         $display("%x", Y22);
         $display("%x", Y23);
         $display("%x", Y24);
         $display("%x", Y25);
         $display("%x", Y26);
         $display("%x", Y27);
         $display("%x", Y28);
         $display("%x", Y29);
         $display("%x", Y30);
         $display("%x", Y31);
         @(posedge clk); #1;
      end
      $display("%x", Y0);
      $display("%x", Y1);
      $display("%x", Y2);
      $display("%x", Y3);
      $display("%x", Y4);
      $display("%x", Y5);
      $display("%x", Y6);
      $display("%x", Y7);
      $display("%x", Y8);
      $display("%x", Y9);
      $display("%x", Y10);
      $display("%x", Y11);
      $display("%x", Y12);
      $display("%x", Y13);
      $display("%x", Y14);
      $display("%x", Y15);
      $display("%x", Y16);
      $display("%x", Y17);
      $display("%x", Y18);
      $display("%x", Y19);
      $display("%x", Y20);
      $display("%x", Y21);
      $display("%x", Y22);
      $display("%x", Y23);
      $display("%x", Y24);
      $display("%x", Y25);
      $display("%x", Y26);
      $display("%x", Y27);
      $display("%x", Y28);
      $display("%x", Y29);
      $display("%x", Y30);
      $display("%x", Y31);
      $finish;
   end
endmodule

// Latency: 731
// Gap: 661
module dft_top(clk, reset, nexti, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15,
   X16, Y16,
   X17, Y17,
   X18, Y18,
   X19, Y19,
   X20, Y20,
   X21, Y21,
   X22, Y22,
   X23, Y23,
   X24, Y24,
   X25, Y25,
   X26, Y26,
   X27, Y27,
   X28, Y28,
   X29, Y29,
   X30, Y30,
   X31, Y31);

   output next_out;
   input clk, reset, nexti;

   input [9:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15,
      X16,
      X17,
      X18,
      X19,
      X20,
      X21,
      X22,
      X23,
      X24,
      X25,
      X26,
      X27,
      X28,
      X29,
      X30,
      X31;

   output [9:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15,
      Y16,
      Y17,
      Y18,
      Y19,
      Y20,
      Y21,
      Y22,
      Y23,
      Y24,
      Y25,
      Y26,
      Y27,
      Y28,
      Y29,
      Y30,
      Y31;

   wire [9:0] t0_0;
   wire [9:0] t0_1;
   wire [9:0] t0_2;
   wire [9:0] t0_3;
   wire [9:0] t0_4;
   wire [9:0] t0_5;
   wire [9:0] t0_6;
   wire [9:0] t0_7;
   wire [9:0] t0_8;
   wire [9:0] t0_9;
   wire [9:0] t0_10;
   wire [9:0] t0_11;
   wire [9:0] t0_12;
   wire [9:0] t0_13;
   wire [9:0] t0_14;
   wire [9:0] t0_15;
   wire [9:0] t0_16;
   wire [9:0] t0_17;
   wire [9:0] t0_18;
   wire [9:0] t0_19;
   wire [9:0] t0_20;
   wire [9:0] t0_21;
   wire [9:0] t0_22;
   wire [9:0] t0_23;
   wire [9:0] t0_24;
   wire [9:0] t0_25;
   wire [9:0] t0_26;
   wire [9:0] t0_27;
   wire [9:0] t0_28;
   wire [9:0] t0_29;
   wire [9:0] t0_30;
   wire [9:0] t0_31;
   wire next_0;
   wire [9:0] t1_0;
   wire [9:0] t1_1;
   wire [9:0] t1_2;
   wire [9:0] t1_3;
   wire [9:0] t1_4;
   wire [9:0] t1_5;
   wire [9:0] t1_6;
   wire [9:0] t1_7;
   wire [9:0] t1_8;
   wire [9:0] t1_9;
   wire [9:0] t1_10;
   wire [9:0] t1_11;
   wire [9:0] t1_12;
   wire [9:0] t1_13;
   wire [9:0] t1_14;
   wire [9:0] t1_15;
   wire [9:0] t1_16;
   wire [9:0] t1_17;
   wire [9:0] t1_18;
   wire [9:0] t1_19;
   wire [9:0] t1_20;
   wire [9:0] t1_21;
   wire [9:0] t1_22;
   wire [9:0] t1_23;
   wire [9:0] t1_24;
   wire [9:0] t1_25;
   wire [9:0] t1_26;
   wire [9:0] t1_27;
   wire [9:0] t1_28;
   wire [9:0] t1_29;
   wire [9:0] t1_30;
   wire [9:0] t1_31;
   wire next_1;
   wire [9:0] t2_0;
   wire [9:0] t2_1;
   wire [9:0] t2_2;
   wire [9:0] t2_3;
   wire [9:0] t2_4;
   wire [9:0] t2_5;
   wire [9:0] t2_6;
   wire [9:0] t2_7;
   wire [9:0] t2_8;
   wire [9:0] t2_9;
   wire [9:0] t2_10;
   wire [9:0] t2_11;
   wire [9:0] t2_12;
   wire [9:0] t2_13;
   wire [9:0] t2_14;
   wire [9:0] t2_15;
   wire [9:0] t2_16;
   wire [9:0] t2_17;
   wire [9:0] t2_18;
   wire [9:0] t2_19;
   wire [9:0] t2_20;
   wire [9:0] t2_21;
   wire [9:0] t2_22;
   wire [9:0] t2_23;
   wire [9:0] t2_24;
   wire [9:0] t2_25;
   wire [9:0] t2_26;
   wire [9:0] t2_27;
   wire [9:0] t2_28;
   wire [9:0] t2_29;
   wire [9:0] t2_30;
   wire [9:0] t2_31;
   wire next_2;
   assign t0_0 = X0;
   assign Y0 = t2_0;
   assign t0_1 = X1;
   assign Y1 = t2_1;
   assign t0_2 = X2;
   assign Y2 = t2_2;
   assign t0_3 = X3;
   assign Y3 = t2_3;
   assign t0_4 = X4;
   assign Y4 = t2_4;
   assign t0_5 = X5;
   assign Y5 = t2_5;
   assign t0_6 = X6;
   assign Y6 = t2_6;
   assign t0_7 = X7;
   assign Y7 = t2_7;
   assign t0_8 = X8;
   assign Y8 = t2_8;
   assign t0_9 = X9;
   assign Y9 = t2_9;
   assign t0_10 = X10;
   assign Y10 = t2_10;
   assign t0_11 = X11;
   assign Y11 = t2_11;
   assign t0_12 = X12;
   assign Y12 = t2_12;
   assign t0_13 = X13;
   assign Y13 = t2_13;
   assign t0_14 = X14;
   assign Y14 = t2_14;
   assign t0_15 = X15;
   assign Y15 = t2_15;
   assign t0_16 = X16;
   assign Y16 = t2_16;
   assign t0_17 = X17;
   assign Y17 = t2_17;
   assign t0_18 = X18;
   assign Y18 = t2_18;
   assign t0_19 = X19;
   assign Y19 = t2_19;
   assign t0_20 = X20;
   assign Y20 = t2_20;
   assign t0_21 = X21;
   assign Y21 = t2_21;
   assign t0_22 = X22;
   assign Y22 = t2_22;
   assign t0_23 = X23;
   assign Y23 = t2_23;
   assign t0_24 = X24;
   assign Y24 = t2_24;
   assign t0_25 = X25;
   assign Y25 = t2_25;
   assign t0_26 = X26;
   assign Y26 = t2_26;
   assign t0_27 = X27;
   assign Y27 = t2_27;
   assign t0_28 = X28;
   assign Y28 = t2_28;
   assign t0_29 = X29;
   assign Y29 = t2_29;
   assign t0_30 = X30;
   assign Y30 = t2_30;
   assign t0_31 = X31;
   assign Y31 = t2_31;
   assign next_0 = nexti;
   assign next_out = next_2;

// latency=70, gap=64
   rc13331 stage0(.clk(clk), .reset(reset), .nexti(next_0), .next_out(next_1),
    .X0(t0_0), .Y0(t1_0),
    .X1(t0_1), .Y1(t1_1),
    .X2(t0_2), .Y2(t1_2),
    .X3(t0_3), .Y3(t1_3),
    .X4(t0_4), .Y4(t1_4),
    .X5(t0_5), .Y5(t1_5),
    .X6(t0_6), .Y6(t1_6),
    .X7(t0_7), .Y7(t1_7),
    .X8(t0_8), .Y8(t1_8),
    .X9(t0_9), .Y9(t1_9),
    .X10(t0_10), .Y10(t1_10),
    .X11(t0_11), .Y11(t1_11),
    .X12(t0_12), .Y12(t1_12),
    .X13(t0_13), .Y13(t1_13),
    .X14(t0_14), .Y14(t1_14),
    .X15(t0_15), .Y15(t1_15),
    .X16(t0_16), .Y16(t1_16),
    .X17(t0_17), .Y17(t1_17),
    .X18(t0_18), .Y18(t1_18),
    .X19(t0_19), .Y19(t1_19),
    .X20(t0_20), .Y20(t1_20),
    .X21(t0_21), .Y21(t1_21),
    .X22(t0_22), .Y22(t1_22),
    .X23(t0_23), .Y23(t1_23),
    .X24(t0_24), .Y24(t1_24),
    .X25(t0_25), .Y25(t1_25),
    .X26(t0_26), .Y26(t1_26),
    .X27(t0_27), .Y27(t1_27),
    .X28(t0_28), .Y28(t1_28),
    .X29(t0_29), .Y29(t1_29),
    .X30(t0_30), .Y30(t1_30),
    .X31(t0_31), .Y31(t1_31));


// latency=661, gap=661
   ICompose_16913 IComposeInst18708(.nexti(next_1), .clk(clk), .reset(reset), .next_out(next_2),
       .X0(t1_0), .Y0(t2_0),
       .X1(t1_1), .Y1(t2_1),
       .X2(t1_2), .Y2(t2_2),
       .X3(t1_3), .Y3(t2_3),
       .X4(t1_4), .Y4(t2_4),
       .X5(t1_5), .Y5(t2_5),
       .X6(t1_6), .Y6(t2_6),
       .X7(t1_7), .Y7(t2_7),
       .X8(t1_8), .Y8(t2_8),
       .X9(t1_9), .Y9(t2_9),
       .X10(t1_10), .Y10(t2_10),
       .X11(t1_11), .Y11(t2_11),
       .X12(t1_12), .Y12(t2_12),
       .X13(t1_13), .Y13(t2_13),
       .X14(t1_14), .Y14(t2_14),
       .X15(t1_15), .Y15(t2_15),
       .X16(t1_16), .Y16(t2_16),
       .X17(t1_17), .Y17(t2_17),
       .X18(t1_18), .Y18(t2_18),
       .X19(t1_19), .Y19(t2_19),
       .X20(t1_20), .Y20(t2_20),
       .X21(t1_21), .Y21(t2_21),
       .X22(t1_22), .Y22(t2_22),
       .X23(t1_23), .Y23(t2_23),
       .X24(t1_24), .Y24(t2_24),
       .X25(t1_25), .Y25(t2_25),
       .X26(t1_26), .Y26(t2_26),
       .X27(t1_27), .Y27(t2_27),
       .X28(t1_28), .Y28(t2_28),
       .X29(t1_29), .Y29(t2_29),
       .X30(t1_30), .Y30(t2_30),
       .X31(t1_31), .Y31(t2_31));


endmodule

// Latency: 70
// Gap: 64
module rc13331(clk, reset, nexti, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15,
   X16, Y16,
   X17, Y17,
   X18, Y18,
   X19, Y19,
   X20, Y20,
   X21, Y21,
   X22, Y22,
   X23, Y23,
   X24, Y24,
   X25, Y25,
   X26, Y26,
   X27, Y27,
   X28, Y28,
   X29, Y29,
   X30, Y30,
   X31, Y31);

   output next_out;
   input clk, reset, nexti;

   input [9:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15,
      X16,
      X17,
      X18,
      X19,
      X20,
      X21,
      X22,
      X23,
      X24,
      X25,
      X26,
      X27,
      X28,
      X29,
      X30,
      X31;

   output [9:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15,
      Y16,
      Y17,
      Y18,
      Y19,
      Y20,
      Y21,
      Y22,
      Y23,
      Y24,
      Y25,
      Y26,
      Y27,
      Y28,
      Y29,
      Y30,
      Y31;

   wire [19:0] t0;
   wire [19:0] s0;
   assign t0 = {X0, X1};
   wire [19:0] t1;
   wire [19:0] s1;
   assign t1 = {X2, X3};
   wire [19:0] t2;
   wire [19:0] s2;
   assign t2 = {X4, X5};
   wire [19:0] t3;
   wire [19:0] s3;
   assign t3 = {X6, X7};
   wire [19:0] t4;
   wire [19:0] s4;
   assign t4 = {X8, X9};
   wire [19:0] t5;
   wire [19:0] s5;
   assign t5 = {X10, X11};
   wire [19:0] t6;
   wire [19:0] s6;
   assign t6 = {X12, X13};
   wire [19:0] t7;
   wire [19:0] s7;
   assign t7 = {X14, X15};
   wire [19:0] t8;
   wire [19:0] s8;
   assign t8 = {X16, X17};
   wire [19:0] t9;
   wire [19:0] s9;
   assign t9 = {X18, X19};
   wire [19:0] t10;
   wire [19:0] s10;
   assign t10 = {X20, X21};
   wire [19:0] t11;
   wire [19:0] s11;
   assign t11 = {X22, X23};
   wire [19:0] t12;
   wire [19:0] s12;
   assign t12 = {X24, X25};
   wire [19:0] t13;
   wire [19:0] s13;
   assign t13 = {X26, X27};
   wire [19:0] t14;
   wire [19:0] s14;
   assign t14 = {X28, X29};
   wire [19:0] t15;
   wire [19:0] s15;
   assign t15 = {X30, X31};
   assign Y0 = s0[19:10];
   assign Y1 = s0[9:0];
   assign Y2 = s1[19:10];
   assign Y3 = s1[9:0];
   assign Y4 = s2[19:10];
   assign Y5 = s2[9:0];
   assign Y6 = s3[19:10];
   assign Y7 = s3[9:0];
   assign Y8 = s4[19:10];
   assign Y9 = s4[9:0];
   assign Y10 = s5[19:10];
   assign Y11 = s5[9:0];
   assign Y12 = s6[19:10];
   assign Y13 = s6[9:0];
   assign Y14 = s7[19:10];
   assign Y15 = s7[9:0];
   assign Y16 = s8[19:10];
   assign Y17 = s8[9:0];
   assign Y18 = s9[19:10];
   assign Y19 = s9[9:0];
   assign Y20 = s10[19:10];
   assign Y21 = s10[9:0];
   assign Y22 = s11[19:10];
   assign Y23 = s11[9:0];
   assign Y24 = s12[19:10];
   assign Y25 = s12[9:0];
   assign Y26 = s13[19:10];
   assign Y27 = s13[9:0];
   assign Y28 = s14[19:10];
   assign Y29 = s14[9:0];
   assign Y30 = s15[19:10];
   assign Y31 = s15[9:0];

   perm13329 instPerm18709(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
    .x8(t8), .y8(s8),
    .x9(t9), .y9(s9),
    .x10(t10), .y10(s10),
    .x11(t11), .y11(s11),
    .x12(t12), .y12(s12),
    .x13(t13), .y13(s13),
    .x14(t14), .y14(s14),
    .x15(t15), .y15(s15),
   .clk(clk), .nexti(nexti), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 70
// Gap: 64
module perm13329(clk, nexti, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7,
   x8, y8,
   x9, y9,
   x10, y10,
   x11, y11,
   x12, y12,
   x13, y13,
   x14, y14,
   x15, y15);
   parameter numBanks = 16;
   parameter logBanks = 4;
   parameter depth = 64;
   parameter logDepth = 6;
   parameter width = 20;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  ybuff2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  ybuff3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  ybuff4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  ybuff5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  ybuff6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  ybuff7;
   input [width-1:0]  x8;
   output [width-1:0]  y8;
   wire [width-1:0]  ybuff8;
   input [width-1:0]  x9;
   output [width-1:0]  y9;
   wire [width-1:0]  ybuff9;
   input [width-1:0]  x10;
   output [width-1:0]  y10;
   wire [width-1:0]  ybuff10;
   input [width-1:0]  x11;
   output [width-1:0]  y11;
   wire [width-1:0]  ybuff11;
   input [width-1:0]  x12;
   output [width-1:0]  y12;
   wire [width-1:0]  ybuff12;
   input [width-1:0]  x13;
   output [width-1:0]  y13;
   wire [width-1:0]  ybuff13;
   input [width-1:0]  x14;
   output [width-1:0]  y14;
   wire [width-1:0]  ybuff14;
   input [width-1:0]  x15;
   output [width-1:0]  y15;
   wire [width-1:0]  ybuff15;
   input 	      clk, nexti, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;
   wire [logBanks-1:0] inBank2, outBank2;
   wire [logDepth-1:0] inAddr2, outAddr2;
   wire [logBanks-1:0] outBank_a2;
   wire [logDepth-1:0] outAddr_a2;
   wire [logDepth+logBanks-1:0] addr2, addr2b, addr2c;
   wire [logBanks-1:0] inBank3, outBank3;
   wire [logDepth-1:0] inAddr3, outAddr3;
   wire [logBanks-1:0] outBank_a3;
   wire [logDepth-1:0] outAddr_a3;
   wire [logDepth+logBanks-1:0] addr3, addr3b, addr3c;
   wire [logBanks-1:0] inBank4, outBank4;
   wire [logDepth-1:0] inAddr4, outAddr4;
   wire [logBanks-1:0] outBank_a4;
   wire [logDepth-1:0] outAddr_a4;
   wire [logDepth+logBanks-1:0] addr4, addr4b, addr4c;
   wire [logBanks-1:0] inBank5, outBank5;
   wire [logDepth-1:0] inAddr5, outAddr5;
   wire [logBanks-1:0] outBank_a5;
   wire [logDepth-1:0] outAddr_a5;
   wire [logDepth+logBanks-1:0] addr5, addr5b, addr5c;
   wire [logBanks-1:0] inBank6, outBank6;
   wire [logDepth-1:0] inAddr6, outAddr6;
   wire [logBanks-1:0] outBank_a6;
   wire [logDepth-1:0] outAddr_a6;
   wire [logDepth+logBanks-1:0] addr6, addr6b, addr6c;
   wire [logBanks-1:0] inBank7, outBank7;
   wire [logDepth-1:0] inAddr7, outAddr7;
   wire [logBanks-1:0] outBank_a7;
   wire [logDepth-1:0] outAddr_a7;
   wire [logDepth+logBanks-1:0] addr7, addr7b, addr7c;
   wire [logBanks-1:0] inBank8, outBank8;
   wire [logDepth-1:0] inAddr8, outAddr8;
   wire [logBanks-1:0] outBank_a8;
   wire [logDepth-1:0] outAddr_a8;
   wire [logDepth+logBanks-1:0] addr8, addr8b, addr8c;
   wire [logBanks-1:0] inBank9, outBank9;
   wire [logDepth-1:0] inAddr9, outAddr9;
   wire [logBanks-1:0] outBank_a9;
   wire [logDepth-1:0] outAddr_a9;
   wire [logDepth+logBanks-1:0] addr9, addr9b, addr9c;
   wire [logBanks-1:0] inBank10, outBank10;
   wire [logDepth-1:0] inAddr10, outAddr10;
   wire [logBanks-1:0] outBank_a10;
   wire [logDepth-1:0] outAddr_a10;
   wire [logDepth+logBanks-1:0] addr10, addr10b, addr10c;
   wire [logBanks-1:0] inBank11, outBank11;
   wire [logDepth-1:0] inAddr11, outAddr11;
   wire [logBanks-1:0] outBank_a11;
   wire [logDepth-1:0] outAddr_a11;
   wire [logDepth+logBanks-1:0] addr11, addr11b, addr11c;
   wire [logBanks-1:0] inBank12, outBank12;
   wire [logDepth-1:0] inAddr12, outAddr12;
   wire [logBanks-1:0] outBank_a12;
   wire [logDepth-1:0] outAddr_a12;
   wire [logDepth+logBanks-1:0] addr12, addr12b, addr12c;
   wire [logBanks-1:0] inBank13, outBank13;
   wire [logDepth-1:0] inAddr13, outAddr13;
   wire [logBanks-1:0] outBank_a13;
   wire [logDepth-1:0] outAddr_a13;
   wire [logDepth+logBanks-1:0] addr13, addr13b, addr13c;
   wire [logBanks-1:0] inBank14, outBank14;
   wire [logDepth-1:0] inAddr14, outAddr14;
   wire [logBanks-1:0] outBank_a14;
   wire [logDepth-1:0] outAddr_a14;
   wire [logDepth+logBanks-1:0] addr14, addr14b, addr14c;
   wire [logBanks-1:0] inBank15, outBank15;
   wire [logDepth-1:0] inAddr15, outAddr15;
   wire [logBanks-1:0] outBank_a15;
   wire [logDepth-1:0] outAddr_a15;
   wire [logDepth+logBanks-1:0] addr15, addr15b, addr15c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 4'd0};
   assign    addr0b = {outCount, 4'd0};
   assign    addr0c = {outCount_for_rd_addr, 4'd0};
   assign    addr1 = {inCount, 4'd1};
   assign    addr1b = {outCount, 4'd1};
   assign    addr1c = {outCount_for_rd_addr, 4'd1};
   assign    addr2 = {inCount, 4'd2};
   assign    addr2b = {outCount, 4'd2};
   assign    addr2c = {outCount_for_rd_addr, 4'd2};
   assign    addr3 = {inCount, 4'd3};
   assign    addr3b = {outCount, 4'd3};
   assign    addr3c = {outCount_for_rd_addr, 4'd3};
   assign    addr4 = {inCount, 4'd4};
   assign    addr4b = {outCount, 4'd4};
   assign    addr4c = {outCount_for_rd_addr, 4'd4};
   assign    addr5 = {inCount, 4'd5};
   assign    addr5b = {outCount, 4'd5};
   assign    addr5c = {outCount_for_rd_addr, 4'd5};
   assign    addr6 = {inCount, 4'd6};
   assign    addr6b = {outCount, 4'd6};
   assign    addr6c = {outCount_for_rd_addr, 4'd6};
   assign    addr7 = {inCount, 4'd7};
   assign    addr7b = {outCount, 4'd7};
   assign    addr7c = {outCount_for_rd_addr, 4'd7};
   assign    addr8 = {inCount, 4'd8};
   assign    addr8b = {outCount, 4'd8};
   assign    addr8c = {outCount_for_rd_addr, 4'd8};
   assign    addr9 = {inCount, 4'd9};
   assign    addr9b = {outCount, 4'd9};
   assign    addr9c = {outCount_for_rd_addr, 4'd9};
   assign    addr10 = {inCount, 4'd10};
   assign    addr10b = {outCount, 4'd10};
   assign    addr10c = {outCount_for_rd_addr, 4'd10};
   assign    addr11 = {inCount, 4'd11};
   assign    addr11b = {outCount, 4'd11};
   assign    addr11c = {outCount_for_rd_addr, 4'd11};
   assign    addr12 = {inCount, 4'd12};
   assign    addr12b = {outCount, 4'd12};
   assign    addr12c = {outCount_for_rd_addr, 4'd12};
   assign    addr13 = {inCount, 4'd13};
   assign    addr13b = {outCount, 4'd13};
   assign    addr13c = {outCount_for_rd_addr, 4'd13};
   assign    addr14 = {inCount, 4'd14};
   assign    addr14b = {outCount, 4'd14};
   assign    addr14c = {outCount_for_rd_addr, 4'd14};
   assign    addr15 = {inCount, 4'd15};
   assign    addr15b = {outCount, 4'd15};
   assign    addr15c = {outCount_for_rd_addr, 4'd15};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_0_2, w_0_3, w_0_4, w_0_5, w_0_6, w_0_7, w_0_8, w_0_9, w_0_10, w_0_11, w_0_12, w_0_13, w_0_14, w_0_15, w_1_0, w_1_1, w_1_2, w_1_3, w_1_4, w_1_5, w_1_6, w_1_7, w_1_8, w_1_9, w_1_10, w_1_11, w_1_12, w_1_13, w_1_14, w_1_15, w_2_0, w_2_1, w_2_2, w_2_3, w_2_4, w_2_5, w_2_6, w_2_7, w_2_8, w_2_9, w_2_10, w_2_11, w_2_12, w_2_13, w_2_14, w_2_15, w_3_0, w_3_1, w_3_2, w_3_3, w_3_4, w_3_5, w_3_6, w_3_7, w_3_8, w_3_9, w_3_10, w_3_11, w_3_12, w_3_13, w_3_14, w_3_15, w_4_0, w_4_1, w_4_2, w_4_3, w_4_4, w_4_5, w_4_6, w_4_7, w_4_8, w_4_9, w_4_10, w_4_11, w_4_12, w_4_13, w_4_14, w_4_15;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    reg [width-1:0] z_0_2;
    reg [width-1:0] z_0_3;
    reg [width-1:0] z_0_4;
    reg [width-1:0] z_0_5;
    reg [width-1:0] z_0_6;
    reg [width-1:0] z_0_7;
    reg [width-1:0] z_0_8;
    reg [width-1:0] z_0_9;
    reg [width-1:0] z_0_10;
    reg [width-1:0] z_0_11;
    reg [width-1:0] z_0_12;
    reg [width-1:0] z_0_13;
    reg [width-1:0] z_0_14;
    reg [width-1:0] z_0_15;
    wire [width-1:0] z_1_0, z_1_1, z_1_2, z_1_3, z_1_4, z_1_5, z_1_6, z_1_7, z_1_8, z_1_9, z_1_10, z_1_11, z_1_12, z_1_13, z_1_14, z_1_15, z_2_0, z_2_1, z_2_2, z_2_3, z_2_4, z_2_5, z_2_6, z_2_7, z_2_8, z_2_9, z_2_10, z_2_11, z_2_12, z_2_13, z_2_14, z_2_15, z_3_0, z_3_1, z_3_2, z_3_3, z_3_4, z_3_5, z_3_6, z_3_7, z_3_8, z_3_9, z_3_10, z_3_11, z_3_12, z_3_13, z_3_14, z_3_15, z_4_0, z_4_1, z_4_2, z_4_3, z_4_4, z_4_5, z_4_6, z_4_7, z_4_8, z_4_9, z_4_10, z_4_11, z_4_12, z_4_13, z_4_14, z_4_15;

    wire [logDepth-1:0] u_0_0, u_0_1, u_0_2, u_0_3, u_0_4, u_0_5, u_0_6, u_0_7, u_0_8, u_0_9, u_0_10, u_0_11, u_0_12, u_0_13, u_0_14, u_0_15, u_1_0, u_1_1, u_1_2, u_1_3, u_1_4, u_1_5, u_1_6, u_1_7, u_1_8, u_1_9, u_1_10, u_1_11, u_1_12, u_1_13, u_1_14, u_1_15, u_2_0, u_2_1, u_2_2, u_2_3, u_2_4, u_2_5, u_2_6, u_2_7, u_2_8, u_2_9, u_2_10, u_2_11, u_2_12, u_2_13, u_2_14, u_2_15, u_3_0, u_3_1, u_3_2, u_3_3, u_3_4, u_3_5, u_3_6, u_3_7, u_3_8, u_3_9, u_3_10, u_3_11, u_3_12, u_3_13, u_3_14, u_3_15, u_4_0, u_4_1, u_4_2, u_4_3, u_4_4, u_4_5, u_4_6, u_4_7, u_4_8, u_4_9, u_4_10, u_4_11, u_4_12, u_4_13, u_4_14, u_4_15;

    reg inFlip1, outFlip1;
    reg inFlip2, outFlip2;
    reg inFlip3, outFlip3;
    always @(posedge clk) begin
        inFlip1 <= inFlip0;
        outFlip1 <= outFlip0;
        inFlip2 <= inFlip1;
        outFlip2 <= outFlip1;
        inFlip3 <= inFlip2;
        outFlip3 <= outFlip2;
    end

   assign inBank0[0] = addr0[9] ^ addr0[3];
   assign inBank0[1] = addr0[8] ^ addr0[2];
   assign inBank0[2] = addr0[7] ^ addr0[1];
   assign inBank0[3] = addr0[6] ^ addr0[0];
   assign inAddr0[0] = addr0[5];
   assign inAddr0[1] = addr0[4];
   assign inAddr0[2] = addr0[3];
   assign inAddr0[3] = addr0[2];
   assign inAddr0[4] = addr0[1];
   assign inAddr0[5] = addr0[0];
   assign outBank0[0] = addr0b[6] ^ addr0b[0];
   assign outBank0[1] = addr0b[7] ^ addr0b[1];
   assign outBank0[2] = addr0b[8] ^ addr0b[2];
   assign outBank0[3] = addr0b[9] ^ addr0b[3];
   assign outAddr0[0] = addr0b[4];
   assign outAddr0[1] = addr0b[5];
   assign outAddr0[2] = addr0b[6];
   assign outAddr0[3] = addr0b[7];
   assign outAddr0[4] = addr0b[8];
   assign outAddr0[5] = addr0b[9];
   assign outBank_a0[0] = addr0c[6] ^ addr0c[0];
   assign outBank_a0[1] = addr0c[7] ^ addr0c[1];
   assign outBank_a0[2] = addr0c[8] ^ addr0c[2];
   assign outBank_a0[3] = addr0c[9] ^ addr0c[3];
   assign outAddr_a0[0] = addr0c[4];
   assign outAddr_a0[1] = addr0c[5];
   assign outAddr_a0[2] = addr0c[6];
   assign outAddr_a0[3] = addr0c[7];
   assign outAddr_a0[4] = addr0c[8];
   assign outAddr_a0[5] = addr0c[9];

   assign inBank1[0] = addr1[9] ^ addr1[3];
   assign inBank1[1] = addr1[8] ^ addr1[2];
   assign inBank1[2] = addr1[7] ^ addr1[1];
   assign inBank1[3] = addr1[6] ^ addr1[0];
   assign inAddr1[0] = addr1[5];
   assign inAddr1[1] = addr1[4];
   assign inAddr1[2] = addr1[3];
   assign inAddr1[3] = addr1[2];
   assign inAddr1[4] = addr1[1];
   assign inAddr1[5] = addr1[0];
   assign outBank1[0] = addr1b[6] ^ addr1b[0];
   assign outBank1[1] = addr1b[7] ^ addr1b[1];
   assign outBank1[2] = addr1b[8] ^ addr1b[2];
   assign outBank1[3] = addr1b[9] ^ addr1b[3];
   assign outAddr1[0] = addr1b[4];
   assign outAddr1[1] = addr1b[5];
   assign outAddr1[2] = addr1b[6];
   assign outAddr1[3] = addr1b[7];
   assign outAddr1[4] = addr1b[8];
   assign outAddr1[5] = addr1b[9];
   assign outBank_a1[0] = addr1c[6] ^ addr1c[0];
   assign outBank_a1[1] = addr1c[7] ^ addr1c[1];
   assign outBank_a1[2] = addr1c[8] ^ addr1c[2];
   assign outBank_a1[3] = addr1c[9] ^ addr1c[3];
   assign outAddr_a1[0] = addr1c[4];
   assign outAddr_a1[1] = addr1c[5];
   assign outAddr_a1[2] = addr1c[6];
   assign outAddr_a1[3] = addr1c[7];
   assign outAddr_a1[4] = addr1c[8];
   assign outAddr_a1[5] = addr1c[9];

   assign inBank2[0] = addr2[9] ^ addr2[3];
   assign inBank2[1] = addr2[8] ^ addr2[2];
   assign inBank2[2] = addr2[7] ^ addr2[1];
   assign inBank2[3] = addr2[6] ^ addr2[0];
   assign inAddr2[0] = addr2[5];
   assign inAddr2[1] = addr2[4];
   assign inAddr2[2] = addr2[3];
   assign inAddr2[3] = addr2[2];
   assign inAddr2[4] = addr2[1];
   assign inAddr2[5] = addr2[0];
   assign outBank2[0] = addr2b[6] ^ addr2b[0];
   assign outBank2[1] = addr2b[7] ^ addr2b[1];
   assign outBank2[2] = addr2b[8] ^ addr2b[2];
   assign outBank2[3] = addr2b[9] ^ addr2b[3];
   assign outAddr2[0] = addr2b[4];
   assign outAddr2[1] = addr2b[5];
   assign outAddr2[2] = addr2b[6];
   assign outAddr2[3] = addr2b[7];
   assign outAddr2[4] = addr2b[8];
   assign outAddr2[5] = addr2b[9];
   assign outBank_a2[0] = addr2c[6] ^ addr2c[0];
   assign outBank_a2[1] = addr2c[7] ^ addr2c[1];
   assign outBank_a2[2] = addr2c[8] ^ addr2c[2];
   assign outBank_a2[3] = addr2c[9] ^ addr2c[3];
   assign outAddr_a2[0] = addr2c[4];
   assign outAddr_a2[1] = addr2c[5];
   assign outAddr_a2[2] = addr2c[6];
   assign outAddr_a2[3] = addr2c[7];
   assign outAddr_a2[4] = addr2c[8];
   assign outAddr_a2[5] = addr2c[9];

   assign inBank3[0] = addr3[9] ^ addr3[3];
   assign inBank3[1] = addr3[8] ^ addr3[2];
   assign inBank3[2] = addr3[7] ^ addr3[1];
   assign inBank3[3] = addr3[6] ^ addr3[0];
   assign inAddr3[0] = addr3[5];
   assign inAddr3[1] = addr3[4];
   assign inAddr3[2] = addr3[3];
   assign inAddr3[3] = addr3[2];
   assign inAddr3[4] = addr3[1];
   assign inAddr3[5] = addr3[0];
   assign outBank3[0] = addr3b[6] ^ addr3b[0];
   assign outBank3[1] = addr3b[7] ^ addr3b[1];
   assign outBank3[2] = addr3b[8] ^ addr3b[2];
   assign outBank3[3] = addr3b[9] ^ addr3b[3];
   assign outAddr3[0] = addr3b[4];
   assign outAddr3[1] = addr3b[5];
   assign outAddr3[2] = addr3b[6];
   assign outAddr3[3] = addr3b[7];
   assign outAddr3[4] = addr3b[8];
   assign outAddr3[5] = addr3b[9];
   assign outBank_a3[0] = addr3c[6] ^ addr3c[0];
   assign outBank_a3[1] = addr3c[7] ^ addr3c[1];
   assign outBank_a3[2] = addr3c[8] ^ addr3c[2];
   assign outBank_a3[3] = addr3c[9] ^ addr3c[3];
   assign outAddr_a3[0] = addr3c[4];
   assign outAddr_a3[1] = addr3c[5];
   assign outAddr_a3[2] = addr3c[6];
   assign outAddr_a3[3] = addr3c[7];
   assign outAddr_a3[4] = addr3c[8];
   assign outAddr_a3[5] = addr3c[9];

   assign inBank4[0] = addr4[9] ^ addr4[3];
   assign inBank4[1] = addr4[8] ^ addr4[2];
   assign inBank4[2] = addr4[7] ^ addr4[1];
   assign inBank4[3] = addr4[6] ^ addr4[0];
   assign inAddr4[0] = addr4[5];
   assign inAddr4[1] = addr4[4];
   assign inAddr4[2] = addr4[3];
   assign inAddr4[3] = addr4[2];
   assign inAddr4[4] = addr4[1];
   assign inAddr4[5] = addr4[0];
   assign outBank4[0] = addr4b[6] ^ addr4b[0];
   assign outBank4[1] = addr4b[7] ^ addr4b[1];
   assign outBank4[2] = addr4b[8] ^ addr4b[2];
   assign outBank4[3] = addr4b[9] ^ addr4b[3];
   assign outAddr4[0] = addr4b[4];
   assign outAddr4[1] = addr4b[5];
   assign outAddr4[2] = addr4b[6];
   assign outAddr4[3] = addr4b[7];
   assign outAddr4[4] = addr4b[8];
   assign outAddr4[5] = addr4b[9];
   assign outBank_a4[0] = addr4c[6] ^ addr4c[0];
   assign outBank_a4[1] = addr4c[7] ^ addr4c[1];
   assign outBank_a4[2] = addr4c[8] ^ addr4c[2];
   assign outBank_a4[3] = addr4c[9] ^ addr4c[3];
   assign outAddr_a4[0] = addr4c[4];
   assign outAddr_a4[1] = addr4c[5];
   assign outAddr_a4[2] = addr4c[6];
   assign outAddr_a4[3] = addr4c[7];
   assign outAddr_a4[4] = addr4c[8];
   assign outAddr_a4[5] = addr4c[9];

   assign inBank5[0] = addr5[9] ^ addr5[3];
   assign inBank5[1] = addr5[8] ^ addr5[2];
   assign inBank5[2] = addr5[7] ^ addr5[1];
   assign inBank5[3] = addr5[6] ^ addr5[0];
   assign inAddr5[0] = addr5[5];
   assign inAddr5[1] = addr5[4];
   assign inAddr5[2] = addr5[3];
   assign inAddr5[3] = addr5[2];
   assign inAddr5[4] = addr5[1];
   assign inAddr5[5] = addr5[0];
   assign outBank5[0] = addr5b[6] ^ addr5b[0];
   assign outBank5[1] = addr5b[7] ^ addr5b[1];
   assign outBank5[2] = addr5b[8] ^ addr5b[2];
   assign outBank5[3] = addr5b[9] ^ addr5b[3];
   assign outAddr5[0] = addr5b[4];
   assign outAddr5[1] = addr5b[5];
   assign outAddr5[2] = addr5b[6];
   assign outAddr5[3] = addr5b[7];
   assign outAddr5[4] = addr5b[8];
   assign outAddr5[5] = addr5b[9];
   assign outBank_a5[0] = addr5c[6] ^ addr5c[0];
   assign outBank_a5[1] = addr5c[7] ^ addr5c[1];
   assign outBank_a5[2] = addr5c[8] ^ addr5c[2];
   assign outBank_a5[3] = addr5c[9] ^ addr5c[3];
   assign outAddr_a5[0] = addr5c[4];
   assign outAddr_a5[1] = addr5c[5];
   assign outAddr_a5[2] = addr5c[6];
   assign outAddr_a5[3] = addr5c[7];
   assign outAddr_a5[4] = addr5c[8];
   assign outAddr_a5[5] = addr5c[9];

   assign inBank6[0] = addr6[9] ^ addr6[3];
   assign inBank6[1] = addr6[8] ^ addr6[2];
   assign inBank6[2] = addr6[7] ^ addr6[1];
   assign inBank6[3] = addr6[6] ^ addr6[0];
   assign inAddr6[0] = addr6[5];
   assign inAddr6[1] = addr6[4];
   assign inAddr6[2] = addr6[3];
   assign inAddr6[3] = addr6[2];
   assign inAddr6[4] = addr6[1];
   assign inAddr6[5] = addr6[0];
   assign outBank6[0] = addr6b[6] ^ addr6b[0];
   assign outBank6[1] = addr6b[7] ^ addr6b[1];
   assign outBank6[2] = addr6b[8] ^ addr6b[2];
   assign outBank6[3] = addr6b[9] ^ addr6b[3];
   assign outAddr6[0] = addr6b[4];
   assign outAddr6[1] = addr6b[5];
   assign outAddr6[2] = addr6b[6];
   assign outAddr6[3] = addr6b[7];
   assign outAddr6[4] = addr6b[8];
   assign outAddr6[5] = addr6b[9];
   assign outBank_a6[0] = addr6c[6] ^ addr6c[0];
   assign outBank_a6[1] = addr6c[7] ^ addr6c[1];
   assign outBank_a6[2] = addr6c[8] ^ addr6c[2];
   assign outBank_a6[3] = addr6c[9] ^ addr6c[3];
   assign outAddr_a6[0] = addr6c[4];
   assign outAddr_a6[1] = addr6c[5];
   assign outAddr_a6[2] = addr6c[6];
   assign outAddr_a6[3] = addr6c[7];
   assign outAddr_a6[4] = addr6c[8];
   assign outAddr_a6[5] = addr6c[9];

   assign inBank7[0] = addr7[9] ^ addr7[3];
   assign inBank7[1] = addr7[8] ^ addr7[2];
   assign inBank7[2] = addr7[7] ^ addr7[1];
   assign inBank7[3] = addr7[6] ^ addr7[0];
   assign inAddr7[0] = addr7[5];
   assign inAddr7[1] = addr7[4];
   assign inAddr7[2] = addr7[3];
   assign inAddr7[3] = addr7[2];
   assign inAddr7[4] = addr7[1];
   assign inAddr7[5] = addr7[0];
   assign outBank7[0] = addr7b[6] ^ addr7b[0];
   assign outBank7[1] = addr7b[7] ^ addr7b[1];
   assign outBank7[2] = addr7b[8] ^ addr7b[2];
   assign outBank7[3] = addr7b[9] ^ addr7b[3];
   assign outAddr7[0] = addr7b[4];
   assign outAddr7[1] = addr7b[5];
   assign outAddr7[2] = addr7b[6];
   assign outAddr7[3] = addr7b[7];
   assign outAddr7[4] = addr7b[8];
   assign outAddr7[5] = addr7b[9];
   assign outBank_a7[0] = addr7c[6] ^ addr7c[0];
   assign outBank_a7[1] = addr7c[7] ^ addr7c[1];
   assign outBank_a7[2] = addr7c[8] ^ addr7c[2];
   assign outBank_a7[3] = addr7c[9] ^ addr7c[3];
   assign outAddr_a7[0] = addr7c[4];
   assign outAddr_a7[1] = addr7c[5];
   assign outAddr_a7[2] = addr7c[6];
   assign outAddr_a7[3] = addr7c[7];
   assign outAddr_a7[4] = addr7c[8];
   assign outAddr_a7[5] = addr7c[9];

   assign inBank8[0] = addr8[9] ^ addr8[3];
   assign inBank8[1] = addr8[8] ^ addr8[2];
   assign inBank8[2] = addr8[7] ^ addr8[1];
   assign inBank8[3] = addr8[6] ^ addr8[0];
   assign inAddr8[0] = addr8[5];
   assign inAddr8[1] = addr8[4];
   assign inAddr8[2] = addr8[3];
   assign inAddr8[3] = addr8[2];
   assign inAddr8[4] = addr8[1];
   assign inAddr8[5] = addr8[0];
   assign outBank8[0] = addr8b[6] ^ addr8b[0];
   assign outBank8[1] = addr8b[7] ^ addr8b[1];
   assign outBank8[2] = addr8b[8] ^ addr8b[2];
   assign outBank8[3] = addr8b[9] ^ addr8b[3];
   assign outAddr8[0] = addr8b[4];
   assign outAddr8[1] = addr8b[5];
   assign outAddr8[2] = addr8b[6];
   assign outAddr8[3] = addr8b[7];
   assign outAddr8[4] = addr8b[8];
   assign outAddr8[5] = addr8b[9];
   assign outBank_a8[0] = addr8c[6] ^ addr8c[0];
   assign outBank_a8[1] = addr8c[7] ^ addr8c[1];
   assign outBank_a8[2] = addr8c[8] ^ addr8c[2];
   assign outBank_a8[3] = addr8c[9] ^ addr8c[3];
   assign outAddr_a8[0] = addr8c[4];
   assign outAddr_a8[1] = addr8c[5];
   assign outAddr_a8[2] = addr8c[6];
   assign outAddr_a8[3] = addr8c[7];
   assign outAddr_a8[4] = addr8c[8];
   assign outAddr_a8[5] = addr8c[9];

   assign inBank9[0] = addr9[9] ^ addr9[3];
   assign inBank9[1] = addr9[8] ^ addr9[2];
   assign inBank9[2] = addr9[7] ^ addr9[1];
   assign inBank9[3] = addr9[6] ^ addr9[0];
   assign inAddr9[0] = addr9[5];
   assign inAddr9[1] = addr9[4];
   assign inAddr9[2] = addr9[3];
   assign inAddr9[3] = addr9[2];
   assign inAddr9[4] = addr9[1];
   assign inAddr9[5] = addr9[0];
   assign outBank9[0] = addr9b[6] ^ addr9b[0];
   assign outBank9[1] = addr9b[7] ^ addr9b[1];
   assign outBank9[2] = addr9b[8] ^ addr9b[2];
   assign outBank9[3] = addr9b[9] ^ addr9b[3];
   assign outAddr9[0] = addr9b[4];
   assign outAddr9[1] = addr9b[5];
   assign outAddr9[2] = addr9b[6];
   assign outAddr9[3] = addr9b[7];
   assign outAddr9[4] = addr9b[8];
   assign outAddr9[5] = addr9b[9];
   assign outBank_a9[0] = addr9c[6] ^ addr9c[0];
   assign outBank_a9[1] = addr9c[7] ^ addr9c[1];
   assign outBank_a9[2] = addr9c[8] ^ addr9c[2];
   assign outBank_a9[3] = addr9c[9] ^ addr9c[3];
   assign outAddr_a9[0] = addr9c[4];
   assign outAddr_a9[1] = addr9c[5];
   assign outAddr_a9[2] = addr9c[6];
   assign outAddr_a9[3] = addr9c[7];
   assign outAddr_a9[4] = addr9c[8];
   assign outAddr_a9[5] = addr9c[9];

   assign inBank10[0] = addr10[9] ^ addr10[3];
   assign inBank10[1] = addr10[8] ^ addr10[2];
   assign inBank10[2] = addr10[7] ^ addr10[1];
   assign inBank10[3] = addr10[6] ^ addr10[0];
   assign inAddr10[0] = addr10[5];
   assign inAddr10[1] = addr10[4];
   assign inAddr10[2] = addr10[3];
   assign inAddr10[3] = addr10[2];
   assign inAddr10[4] = addr10[1];
   assign inAddr10[5] = addr10[0];
   assign outBank10[0] = addr10b[6] ^ addr10b[0];
   assign outBank10[1] = addr10b[7] ^ addr10b[1];
   assign outBank10[2] = addr10b[8] ^ addr10b[2];
   assign outBank10[3] = addr10b[9] ^ addr10b[3];
   assign outAddr10[0] = addr10b[4];
   assign outAddr10[1] = addr10b[5];
   assign outAddr10[2] = addr10b[6];
   assign outAddr10[3] = addr10b[7];
   assign outAddr10[4] = addr10b[8];
   assign outAddr10[5] = addr10b[9];
   assign outBank_a10[0] = addr10c[6] ^ addr10c[0];
   assign outBank_a10[1] = addr10c[7] ^ addr10c[1];
   assign outBank_a10[2] = addr10c[8] ^ addr10c[2];
   assign outBank_a10[3] = addr10c[9] ^ addr10c[3];
   assign outAddr_a10[0] = addr10c[4];
   assign outAddr_a10[1] = addr10c[5];
   assign outAddr_a10[2] = addr10c[6];
   assign outAddr_a10[3] = addr10c[7];
   assign outAddr_a10[4] = addr10c[8];
   assign outAddr_a10[5] = addr10c[9];

   assign inBank11[0] = addr11[9] ^ addr11[3];
   assign inBank11[1] = addr11[8] ^ addr11[2];
   assign inBank11[2] = addr11[7] ^ addr11[1];
   assign inBank11[3] = addr11[6] ^ addr11[0];
   assign inAddr11[0] = addr11[5];
   assign inAddr11[1] = addr11[4];
   assign inAddr11[2] = addr11[3];
   assign inAddr11[3] = addr11[2];
   assign inAddr11[4] = addr11[1];
   assign inAddr11[5] = addr11[0];
   assign outBank11[0] = addr11b[6] ^ addr11b[0];
   assign outBank11[1] = addr11b[7] ^ addr11b[1];
   assign outBank11[2] = addr11b[8] ^ addr11b[2];
   assign outBank11[3] = addr11b[9] ^ addr11b[3];
   assign outAddr11[0] = addr11b[4];
   assign outAddr11[1] = addr11b[5];
   assign outAddr11[2] = addr11b[6];
   assign outAddr11[3] = addr11b[7];
   assign outAddr11[4] = addr11b[8];
   assign outAddr11[5] = addr11b[9];
   assign outBank_a11[0] = addr11c[6] ^ addr11c[0];
   assign outBank_a11[1] = addr11c[7] ^ addr11c[1];
   assign outBank_a11[2] = addr11c[8] ^ addr11c[2];
   assign outBank_a11[3] = addr11c[9] ^ addr11c[3];
   assign outAddr_a11[0] = addr11c[4];
   assign outAddr_a11[1] = addr11c[5];
   assign outAddr_a11[2] = addr11c[6];
   assign outAddr_a11[3] = addr11c[7];
   assign outAddr_a11[4] = addr11c[8];
   assign outAddr_a11[5] = addr11c[9];

   assign inBank12[0] = addr12[9] ^ addr12[3];
   assign inBank12[1] = addr12[8] ^ addr12[2];
   assign inBank12[2] = addr12[7] ^ addr12[1];
   assign inBank12[3] = addr12[6] ^ addr12[0];
   assign inAddr12[0] = addr12[5];
   assign inAddr12[1] = addr12[4];
   assign inAddr12[2] = addr12[3];
   assign inAddr12[3] = addr12[2];
   assign inAddr12[4] = addr12[1];
   assign inAddr12[5] = addr12[0];
   assign outBank12[0] = addr12b[6] ^ addr12b[0];
   assign outBank12[1] = addr12b[7] ^ addr12b[1];
   assign outBank12[2] = addr12b[8] ^ addr12b[2];
   assign outBank12[3] = addr12b[9] ^ addr12b[3];
   assign outAddr12[0] = addr12b[4];
   assign outAddr12[1] = addr12b[5];
   assign outAddr12[2] = addr12b[6];
   assign outAddr12[3] = addr12b[7];
   assign outAddr12[4] = addr12b[8];
   assign outAddr12[5] = addr12b[9];
   assign outBank_a12[0] = addr12c[6] ^ addr12c[0];
   assign outBank_a12[1] = addr12c[7] ^ addr12c[1];
   assign outBank_a12[2] = addr12c[8] ^ addr12c[2];
   assign outBank_a12[3] = addr12c[9] ^ addr12c[3];
   assign outAddr_a12[0] = addr12c[4];
   assign outAddr_a12[1] = addr12c[5];
   assign outAddr_a12[2] = addr12c[6];
   assign outAddr_a12[3] = addr12c[7];
   assign outAddr_a12[4] = addr12c[8];
   assign outAddr_a12[5] = addr12c[9];

   assign inBank13[0] = addr13[9] ^ addr13[3];
   assign inBank13[1] = addr13[8] ^ addr13[2];
   assign inBank13[2] = addr13[7] ^ addr13[1];
   assign inBank13[3] = addr13[6] ^ addr13[0];
   assign inAddr13[0] = addr13[5];
   assign inAddr13[1] = addr13[4];
   assign inAddr13[2] = addr13[3];
   assign inAddr13[3] = addr13[2];
   assign inAddr13[4] = addr13[1];
   assign inAddr13[5] = addr13[0];
   assign outBank13[0] = addr13b[6] ^ addr13b[0];
   assign outBank13[1] = addr13b[7] ^ addr13b[1];
   assign outBank13[2] = addr13b[8] ^ addr13b[2];
   assign outBank13[3] = addr13b[9] ^ addr13b[3];
   assign outAddr13[0] = addr13b[4];
   assign outAddr13[1] = addr13b[5];
   assign outAddr13[2] = addr13b[6];
   assign outAddr13[3] = addr13b[7];
   assign outAddr13[4] = addr13b[8];
   assign outAddr13[5] = addr13b[9];
   assign outBank_a13[0] = addr13c[6] ^ addr13c[0];
   assign outBank_a13[1] = addr13c[7] ^ addr13c[1];
   assign outBank_a13[2] = addr13c[8] ^ addr13c[2];
   assign outBank_a13[3] = addr13c[9] ^ addr13c[3];
   assign outAddr_a13[0] = addr13c[4];
   assign outAddr_a13[1] = addr13c[5];
   assign outAddr_a13[2] = addr13c[6];
   assign outAddr_a13[3] = addr13c[7];
   assign outAddr_a13[4] = addr13c[8];
   assign outAddr_a13[5] = addr13c[9];

   assign inBank14[0] = addr14[9] ^ addr14[3];
   assign inBank14[1] = addr14[8] ^ addr14[2];
   assign inBank14[2] = addr14[7] ^ addr14[1];
   assign inBank14[3] = addr14[6] ^ addr14[0];
   assign inAddr14[0] = addr14[5];
   assign inAddr14[1] = addr14[4];
   assign inAddr14[2] = addr14[3];
   assign inAddr14[3] = addr14[2];
   assign inAddr14[4] = addr14[1];
   assign inAddr14[5] = addr14[0];
   assign outBank14[0] = addr14b[6] ^ addr14b[0];
   assign outBank14[1] = addr14b[7] ^ addr14b[1];
   assign outBank14[2] = addr14b[8] ^ addr14b[2];
   assign outBank14[3] = addr14b[9] ^ addr14b[3];
   assign outAddr14[0] = addr14b[4];
   assign outAddr14[1] = addr14b[5];
   assign outAddr14[2] = addr14b[6];
   assign outAddr14[3] = addr14b[7];
   assign outAddr14[4] = addr14b[8];
   assign outAddr14[5] = addr14b[9];
   assign outBank_a14[0] = addr14c[6] ^ addr14c[0];
   assign outBank_a14[1] = addr14c[7] ^ addr14c[1];
   assign outBank_a14[2] = addr14c[8] ^ addr14c[2];
   assign outBank_a14[3] = addr14c[9] ^ addr14c[3];
   assign outAddr_a14[0] = addr14c[4];
   assign outAddr_a14[1] = addr14c[5];
   assign outAddr_a14[2] = addr14c[6];
   assign outAddr_a14[3] = addr14c[7];
   assign outAddr_a14[4] = addr14c[8];
   assign outAddr_a14[5] = addr14c[9];

   assign inBank15[0] = addr15[9] ^ addr15[3];
   assign inBank15[1] = addr15[8] ^ addr15[2];
   assign inBank15[2] = addr15[7] ^ addr15[1];
   assign inBank15[3] = addr15[6] ^ addr15[0];
   assign inAddr15[0] = addr15[5];
   assign inAddr15[1] = addr15[4];
   assign inAddr15[2] = addr15[3];
   assign inAddr15[3] = addr15[2];
   assign inAddr15[4] = addr15[1];
   assign inAddr15[5] = addr15[0];
   assign outBank15[0] = addr15b[6] ^ addr15b[0];
   assign outBank15[1] = addr15b[7] ^ addr15b[1];
   assign outBank15[2] = addr15b[8] ^ addr15b[2];
   assign outBank15[3] = addr15b[9] ^ addr15b[3];
   assign outAddr15[0] = addr15b[4];
   assign outAddr15[1] = addr15b[5];
   assign outAddr15[2] = addr15b[6];
   assign outAddr15[3] = addr15b[7];
   assign outAddr15[4] = addr15b[8];
   assign outAddr15[5] = addr15b[9];
   assign outBank_a15[0] = addr15c[6] ^ addr15c[0];
   assign outBank_a15[1] = addr15c[7] ^ addr15c[1];
   assign outBank_a15[2] = addr15c[8] ^ addr15c[2];
   assign outBank_a15[3] = addr15c[9] ^ addr15c[3];
   assign outAddr_a15[0] = addr15c[4];
   assign outAddr_a15[1] = addr15c[5];
   assign outAddr_a15[2] = addr15c[6];
   assign outAddr_a15[3] = addr15c[7];
   assign outAddr_a15[4] = addr15c[8];
   assign outAddr_a15[5] = addr15c[9];

   nextReg #(62, 6) nextReg_18714(.X(nexti), .Y(next0), .reset(reset), .clk(clk));


   shiftRegFIFO #(8, 1) shiftFIFO_18717(.X(next0), .Y(next_out), .clk(clk));


   memArray1024_13329 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip3), .outFlip(outFlip3), .nexti(nexti), .reset(reset),
        .x0(w_4_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_4_0[logDepth-1:0]),
        .outAddr0(u_4_0), 
        .x1(w_4_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_4_1[logDepth-1:0]),
        .outAddr1(u_4_1), 
        .x2(w_4_2[width+logDepth-1:logDepth]), .y2(ybuff2),
        .inAddr2(w_4_2[logDepth-1:0]),
        .outAddr2(u_4_2), 
        .x3(w_4_3[width+logDepth-1:logDepth]), .y3(ybuff3),
        .inAddr3(w_4_3[logDepth-1:0]),
        .outAddr3(u_4_3), 
        .x4(w_4_4[width+logDepth-1:logDepth]), .y4(ybuff4),
        .inAddr4(w_4_4[logDepth-1:0]),
        .outAddr4(u_4_4), 
        .x5(w_4_5[width+logDepth-1:logDepth]), .y5(ybuff5),
        .inAddr5(w_4_5[logDepth-1:0]),
        .outAddr5(u_4_5), 
        .x6(w_4_6[width+logDepth-1:logDepth]), .y6(ybuff6),
        .inAddr6(w_4_6[logDepth-1:0]),
        .outAddr6(u_4_6), 
        .x7(w_4_7[width+logDepth-1:logDepth]), .y7(ybuff7),
        .inAddr7(w_4_7[logDepth-1:0]),
        .outAddr7(u_4_7), 
        .x8(w_4_8[width+logDepth-1:logDepth]), .y8(ybuff8),
        .inAddr8(w_4_8[logDepth-1:0]),
        .outAddr8(u_4_8), 
        .x9(w_4_9[width+logDepth-1:logDepth]), .y9(ybuff9),
        .inAddr9(w_4_9[logDepth-1:0]),
        .outAddr9(u_4_9), 
        .x10(w_4_10[width+logDepth-1:logDepth]), .y10(ybuff10),
        .inAddr10(w_4_10[logDepth-1:0]),
        .outAddr10(u_4_10), 
        .x11(w_4_11[width+logDepth-1:logDepth]), .y11(ybuff11),
        .inAddr11(w_4_11[logDepth-1:0]),
        .outAddr11(u_4_11), 
        .x12(w_4_12[width+logDepth-1:logDepth]), .y12(ybuff12),
        .inAddr12(w_4_12[logDepth-1:0]),
        .outAddr12(u_4_12), 
        .x13(w_4_13[width+logDepth-1:logDepth]), .y13(ybuff13),
        .inAddr13(w_4_13[logDepth-1:0]),
        .outAddr13(u_4_13), 
        .x14(w_4_14[width+logDepth-1:logDepth]), .y14(ybuff14),
        .inAddr14(w_4_14[logDepth-1:0]),
        .outAddr14(u_4_14), 
        .x15(w_4_15[width+logDepth-1:logDepth]), .y15(ybuff15),
        .inAddr15(w_4_15[logDepth-1:0]),
        .outAddr15(u_4_15), 
        .clk(clk));

    reg resetOutCountRd2_64;
    reg resetOutCountRd2_65;
    reg resetOutCountRd2_66;

    always @(posedge clk) begin
        if (reset == 1) begin
            resetOutCountRd2_64 <= 0;
            resetOutCountRd2_65 <= 0;
            resetOutCountRd2_66 <= 0;
        end
        else begin
            resetOutCountRd2_64 <= (inCount == 63) ? 1'b1 : 1'b0;
            resetOutCountRd2_65 <= resetOutCountRd2_64;
            resetOutCountRd2_66 <= resetOutCountRd2_65;
            if (resetOutCountRd2_66 == 1'b1)
                outCount_for_rd_data <= 0;
            else
                outCount_for_rd_data <= outCount_for_rd_data+1;
        end
    end
   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
      z_0_2 <= 0;
      z_0_3 <= 0;
      z_0_4 <= 0;
      z_0_5 <= 0;
      z_0_6 <= 0;
      z_0_7 <= 0;
      z_0_8 <= 0;
      z_0_9 <= 0;
      z_0_10 <= 0;
      z_0_11 <= 0;
      z_0_12 <= 0;
      z_0_13 <= 0;
      z_0_14 <= 0;
      z_0_15 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 61)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
      z_0_2 <= ybuff2;
      z_0_3 <= ybuff3;
      z_0_4 <= ybuff4;
      z_0_5 <= ybuff5;
      z_0_6 <= ybuff6;
      z_0_7 <= ybuff7;
      z_0_8 <= ybuff8;
      z_0_9 <= ybuff9;
      z_0_10 <= ybuff10;
      z_0_11 <= ybuff11;
      z_0_12 <= ybuff12;
      z_0_13 <= ybuff13;
      z_0_14 <= ybuff14;
      z_0_15 <= ybuff15;
         if (inCount == 61) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 63) begin
            inFlip0 <= ~inFlip0;
         end
         if (nexti == 1) begin
            if (inCount >= 61)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_8 = {x1, inAddr1};
    assign w_0_4 = {x2, inAddr2};
    assign w_0_12 = {x3, inAddr3};
    assign w_0_2 = {x4, inAddr4};
    assign w_0_10 = {x5, inAddr5};
    assign w_0_6 = {x6, inAddr6};
    assign w_0_14 = {x7, inAddr7};
    assign w_0_1 = {x8, inAddr8};
    assign w_0_9 = {x9, inAddr9};
    assign w_0_5 = {x10, inAddr10};
    assign w_0_13 = {x11, inAddr11};
    assign w_0_3 = {x12, inAddr12};
    assign w_0_11 = {x13, inAddr13};
    assign w_0_7 = {x14, inAddr14};
    assign w_0_15 = {x15, inAddr15};
    assign y0 = z_4_0;
    assign y1 = z_4_1;
    assign y2 = z_4_2;
    assign y3 = z_4_3;
    assign y4 = z_4_4;
    assign y5 = z_4_5;
    assign y6 = z_4_6;
    assign y7 = z_4_7;
    assign y8 = z_4_8;
    assign y9 = z_4_9;
    assign y10 = z_4_10;
    assign y11 = z_4_11;
    assign y12 = z_4_12;
    assign y13 = z_4_13;
    assign y14 = z_4_14;
    assign y15 = z_4_15;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    assign u_0_2 = outAddr_a2;
    assign u_0_3 = outAddr_a3;
    assign u_0_4 = outAddr_a4;
    assign u_0_5 = outAddr_a5;
    assign u_0_6 = outAddr_a6;
    assign u_0_7 = outAddr_a7;
    assign u_0_8 = outAddr_a8;
    assign u_0_9 = outAddr_a9;
    assign u_0_10 = outAddr_a10;
    assign u_0_11 = outAddr_a11;
    assign u_0_12 = outAddr_a12;
    assign u_0_13 = outAddr_a13;
    assign u_0_14 = outAddr_a14;
    assign u_0_15 = outAddr_a15;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[5];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_1), .y0(w_1_0), .y1(w_1_1), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_1(.x0(w_0_2), .x1(w_0_3), .y0(w_1_2), .y1(w_1_3), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_2(.x0(w_0_4), .x1(w_0_5), .y0(w_1_4), .y1(w_1_5), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_3(.x0(w_0_6), .x1(w_0_7), .y0(w_1_6), .y1(w_1_7), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_4(.x0(w_0_8), .x1(w_0_9), .y0(w_1_8), .y1(w_1_9), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_5(.x0(w_0_10), .x1(w_0_11), .y0(w_1_10), .y1(w_1_11), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_6(.x0(w_0_12), .x1(w_0_13), .y0(w_1_12), .y1(w_1_13), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_7(.x0(w_0_14), .x1(w_0_15), .y0(w_1_14), .y1(w_1_15), .ctrl(wr_ctrl_st_0));
    reg [width+logDepth-1:0] w_1_0_pipe;
    reg [width+logDepth-1:0] w_1_1_pipe;
    reg [width+logDepth-1:0] w_1_2_pipe;
    reg [width+logDepth-1:0] w_1_3_pipe;
    reg [width+logDepth-1:0] w_1_4_pipe;
    reg [width+logDepth-1:0] w_1_5_pipe;
    reg [width+logDepth-1:0] w_1_6_pipe;
    reg [width+logDepth-1:0] w_1_7_pipe;
    reg [width+logDepth-1:0] w_1_8_pipe;
    reg [width+logDepth-1:0] w_1_9_pipe;
    reg [width+logDepth-1:0] w_1_10_pipe;
    reg [width+logDepth-1:0] w_1_11_pipe;
    reg [width+logDepth-1:0] w_1_12_pipe;
    reg [width+logDepth-1:0] w_1_13_pipe;
    reg [width+logDepth-1:0] w_1_14_pipe;
    reg [width+logDepth-1:0] w_1_15_pipe;

    always @(posedge clk) begin
        w_1_0_pipe <= w_1_0;
        w_1_1_pipe <= w_1_1;
        w_1_2_pipe <= w_1_2;
        w_1_3_pipe <= w_1_3;
        w_1_4_pipe <= w_1_4;
        w_1_5_pipe <= w_1_5;
        w_1_6_pipe <= w_1_6;
        w_1_7_pipe <= w_1_7;
        w_1_8_pipe <= w_1_8;
        w_1_9_pipe <= w_1_9;
        w_1_10_pipe <= w_1_10;
        w_1_11_pipe <= w_1_11;
        w_1_12_pipe <= w_1_12;
        w_1_13_pipe <= w_1_13;
        w_1_14_pipe <= w_1_14;
        w_1_15_pipe <= w_1_15;
    end

    wire wr_ctrl_st_1;
    reg wr_ctrl_st_1_1;
    always @(posedge clk) begin
        wr_ctrl_st_1_1 <= inCount[4];
    end
    assign wr_ctrl_st_1 = wr_ctrl_st_1_1;

    switch #(logDepth+width) in_sw_1_0(.x0(w_1_0_pipe), .x1(w_1_2_pipe), .y0(w_2_0), .y1(w_2_2), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_1(.x0(w_1_1_pipe), .x1(w_1_3_pipe), .y0(w_2_1), .y1(w_2_3), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_2(.x0(w_1_4_pipe), .x1(w_1_6_pipe), .y0(w_2_4), .y1(w_2_6), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_3(.x0(w_1_5_pipe), .x1(w_1_7_pipe), .y0(w_2_5), .y1(w_2_7), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_4(.x0(w_1_8_pipe), .x1(w_1_10_pipe), .y0(w_2_8), .y1(w_2_10), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_5(.x0(w_1_9_pipe), .x1(w_1_11_pipe), .y0(w_2_9), .y1(w_2_11), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_6(.x0(w_1_12_pipe), .x1(w_1_14_pipe), .y0(w_2_12), .y1(w_2_14), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_7(.x0(w_1_13_pipe), .x1(w_1_15_pipe), .y0(w_2_13), .y1(w_2_15), .ctrl(wr_ctrl_st_1));
    reg [width+logDepth-1:0] w_2_0_pipe;
    reg [width+logDepth-1:0] w_2_1_pipe;
    reg [width+logDepth-1:0] w_2_2_pipe;
    reg [width+logDepth-1:0] w_2_3_pipe;
    reg [width+logDepth-1:0] w_2_4_pipe;
    reg [width+logDepth-1:0] w_2_5_pipe;
    reg [width+logDepth-1:0] w_2_6_pipe;
    reg [width+logDepth-1:0] w_2_7_pipe;
    reg [width+logDepth-1:0] w_2_8_pipe;
    reg [width+logDepth-1:0] w_2_9_pipe;
    reg [width+logDepth-1:0] w_2_10_pipe;
    reg [width+logDepth-1:0] w_2_11_pipe;
    reg [width+logDepth-1:0] w_2_12_pipe;
    reg [width+logDepth-1:0] w_2_13_pipe;
    reg [width+logDepth-1:0] w_2_14_pipe;
    reg [width+logDepth-1:0] w_2_15_pipe;

    always @(posedge clk) begin
        w_2_0_pipe <= w_2_0;
        w_2_1_pipe <= w_2_1;
        w_2_2_pipe <= w_2_2;
        w_2_3_pipe <= w_2_3;
        w_2_4_pipe <= w_2_4;
        w_2_5_pipe <= w_2_5;
        w_2_6_pipe <= w_2_6;
        w_2_7_pipe <= w_2_7;
        w_2_8_pipe <= w_2_8;
        w_2_9_pipe <= w_2_9;
        w_2_10_pipe <= w_2_10;
        w_2_11_pipe <= w_2_11;
        w_2_12_pipe <= w_2_12;
        w_2_13_pipe <= w_2_13;
        w_2_14_pipe <= w_2_14;
        w_2_15_pipe <= w_2_15;
    end

    wire wr_ctrl_st_2;
    reg wr_ctrl_st_2_1;
    reg wr_ctrl_st_2_2;
    always @(posedge clk) begin
        wr_ctrl_st_2_1 <= inCount[3];
        wr_ctrl_st_2_2 <= wr_ctrl_st_2_1;
    end
    assign wr_ctrl_st_2 = wr_ctrl_st_2_2;

    switch #(logDepth+width) in_sw_2_0(.x0(w_2_0_pipe), .x1(w_2_4_pipe), .y0(w_3_0), .y1(w_3_4), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_1(.x0(w_2_1_pipe), .x1(w_2_5_pipe), .y0(w_3_1), .y1(w_3_5), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_2(.x0(w_2_2_pipe), .x1(w_2_6_pipe), .y0(w_3_2), .y1(w_3_6), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_3(.x0(w_2_3_pipe), .x1(w_2_7_pipe), .y0(w_3_3), .y1(w_3_7), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_4(.x0(w_2_8_pipe), .x1(w_2_12_pipe), .y0(w_3_8), .y1(w_3_12), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_5(.x0(w_2_9_pipe), .x1(w_2_13_pipe), .y0(w_3_9), .y1(w_3_13), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_6(.x0(w_2_10_pipe), .x1(w_2_14_pipe), .y0(w_3_10), .y1(w_3_14), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_7(.x0(w_2_11_pipe), .x1(w_2_15_pipe), .y0(w_3_11), .y1(w_3_15), .ctrl(wr_ctrl_st_2));
    reg [width+logDepth-1:0] w_3_0_pipe;
    reg [width+logDepth-1:0] w_3_1_pipe;
    reg [width+logDepth-1:0] w_3_2_pipe;
    reg [width+logDepth-1:0] w_3_3_pipe;
    reg [width+logDepth-1:0] w_3_4_pipe;
    reg [width+logDepth-1:0] w_3_5_pipe;
    reg [width+logDepth-1:0] w_3_6_pipe;
    reg [width+logDepth-1:0] w_3_7_pipe;
    reg [width+logDepth-1:0] w_3_8_pipe;
    reg [width+logDepth-1:0] w_3_9_pipe;
    reg [width+logDepth-1:0] w_3_10_pipe;
    reg [width+logDepth-1:0] w_3_11_pipe;
    reg [width+logDepth-1:0] w_3_12_pipe;
    reg [width+logDepth-1:0] w_3_13_pipe;
    reg [width+logDepth-1:0] w_3_14_pipe;
    reg [width+logDepth-1:0] w_3_15_pipe;

    always @(posedge clk) begin
        w_3_0_pipe <= w_3_0;
        w_3_1_pipe <= w_3_1;
        w_3_2_pipe <= w_3_2;
        w_3_3_pipe <= w_3_3;
        w_3_4_pipe <= w_3_4;
        w_3_5_pipe <= w_3_5;
        w_3_6_pipe <= w_3_6;
        w_3_7_pipe <= w_3_7;
        w_3_8_pipe <= w_3_8;
        w_3_9_pipe <= w_3_9;
        w_3_10_pipe <= w_3_10;
        w_3_11_pipe <= w_3_11;
        w_3_12_pipe <= w_3_12;
        w_3_13_pipe <= w_3_13;
        w_3_14_pipe <= w_3_14;
        w_3_15_pipe <= w_3_15;
    end

    wire wr_ctrl_st_3;
    reg wr_ctrl_st_3_1;
    reg wr_ctrl_st_3_2;
    reg wr_ctrl_st_3_3;
    always @(posedge clk) begin
        wr_ctrl_st_3_1 <= inCount[2];
        wr_ctrl_st_3_2 <= wr_ctrl_st_3_1;
        wr_ctrl_st_3_3 <= wr_ctrl_st_3_2;
    end
    assign wr_ctrl_st_3 = wr_ctrl_st_3_3;

    switch #(logDepth+width) in_sw_3_0(.x0(w_3_0_pipe), .x1(w_3_8_pipe), .y0(w_4_0), .y1(w_4_8), .ctrl(wr_ctrl_st_3));
    switch #(logDepth+width) in_sw_3_1(.x0(w_3_1_pipe), .x1(w_3_9_pipe), .y0(w_4_1), .y1(w_4_9), .ctrl(wr_ctrl_st_3));
    switch #(logDepth+width) in_sw_3_2(.x0(w_3_2_pipe), .x1(w_3_10_pipe), .y0(w_4_2), .y1(w_4_10), .ctrl(wr_ctrl_st_3));
    switch #(logDepth+width) in_sw_3_3(.x0(w_3_3_pipe), .x1(w_3_11_pipe), .y0(w_4_3), .y1(w_4_11), .ctrl(wr_ctrl_st_3));
    switch #(logDepth+width) in_sw_3_4(.x0(w_3_4_pipe), .x1(w_3_12_pipe), .y0(w_4_4), .y1(w_4_12), .ctrl(wr_ctrl_st_3));
    switch #(logDepth+width) in_sw_3_5(.x0(w_3_5_pipe), .x1(w_3_13_pipe), .y0(w_4_5), .y1(w_4_13), .ctrl(wr_ctrl_st_3));
    switch #(logDepth+width) in_sw_3_6(.x0(w_3_6_pipe), .x1(w_3_14_pipe), .y0(w_4_6), .y1(w_4_14), .ctrl(wr_ctrl_st_3));
    switch #(logDepth+width) in_sw_3_7(.x0(w_3_7_pipe), .x1(w_3_15_pipe), .y0(w_4_7), .y1(w_4_15), .ctrl(wr_ctrl_st_3));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[5];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_8), .y0(z_1_0), .y1(z_1_8), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_1(.x0(z_0_1), .x1(z_0_9), .y0(z_1_1), .y1(z_1_9), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_2(.x0(z_0_2), .x1(z_0_10), .y0(z_1_2), .y1(z_1_10), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_3(.x0(z_0_3), .x1(z_0_11), .y0(z_1_3), .y1(z_1_11), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_4(.x0(z_0_4), .x1(z_0_12), .y0(z_1_4), .y1(z_1_12), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_5(.x0(z_0_5), .x1(z_0_13), .y0(z_1_5), .y1(z_1_13), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_6(.x0(z_0_6), .x1(z_0_14), .y0(z_1_6), .y1(z_1_14), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_7(.x0(z_0_7), .x1(z_0_15), .y0(z_1_7), .y1(z_1_15), .ctrl(rdd_ctrl_st_0));
    reg [width-1:0] z_1_0_pipe;
    reg [width-1:0] z_1_1_pipe;
    reg [width-1:0] z_1_2_pipe;
    reg [width-1:0] z_1_3_pipe;
    reg [width-1:0] z_1_4_pipe;
    reg [width-1:0] z_1_5_pipe;
    reg [width-1:0] z_1_6_pipe;
    reg [width-1:0] z_1_7_pipe;
    reg [width-1:0] z_1_8_pipe;
    reg [width-1:0] z_1_9_pipe;
    reg [width-1:0] z_1_10_pipe;
    reg [width-1:0] z_1_11_pipe;
    reg [width-1:0] z_1_12_pipe;
    reg [width-1:0] z_1_13_pipe;
    reg [width-1:0] z_1_14_pipe;
    reg [width-1:0] z_1_15_pipe;

    always @(posedge clk) begin
        z_1_0_pipe <= z_1_0;
        z_1_1_pipe <= z_1_1;
        z_1_2_pipe <= z_1_2;
        z_1_3_pipe <= z_1_3;
        z_1_4_pipe <= z_1_4;
        z_1_5_pipe <= z_1_5;
        z_1_6_pipe <= z_1_6;
        z_1_7_pipe <= z_1_7;
        z_1_8_pipe <= z_1_8;
        z_1_9_pipe <= z_1_9;
        z_1_10_pipe <= z_1_10;
        z_1_11_pipe <= z_1_11;
        z_1_12_pipe <= z_1_12;
        z_1_13_pipe <= z_1_13;
        z_1_14_pipe <= z_1_14;
        z_1_15_pipe <= z_1_15;
    end

    wire rdd_ctrl_st_1;
    reg rdd_ctrl_st_1_1;
    always @(posedge clk) begin
        rdd_ctrl_st_1_1 <= outCount_for_rd_data[4];

    end
    assign rdd_ctrl_st_1 = rdd_ctrl_st_1_1;

    switch #(width) out_sw_1_0(.x0(z_1_0_pipe), .x1(z_1_4_pipe), .y0(z_2_0), .y1(z_2_4), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_1(.x0(z_1_1_pipe), .x1(z_1_5_pipe), .y0(z_2_1), .y1(z_2_5), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_2(.x0(z_1_2_pipe), .x1(z_1_6_pipe), .y0(z_2_2), .y1(z_2_6), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_3(.x0(z_1_3_pipe), .x1(z_1_7_pipe), .y0(z_2_3), .y1(z_2_7), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_4(.x0(z_1_8_pipe), .x1(z_1_12_pipe), .y0(z_2_8), .y1(z_2_12), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_5(.x0(z_1_9_pipe), .x1(z_1_13_pipe), .y0(z_2_9), .y1(z_2_13), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_6(.x0(z_1_10_pipe), .x1(z_1_14_pipe), .y0(z_2_10), .y1(z_2_14), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_7(.x0(z_1_11_pipe), .x1(z_1_15_pipe), .y0(z_2_11), .y1(z_2_15), .ctrl(rdd_ctrl_st_1));
    reg [width-1:0] z_2_0_pipe;
    reg [width-1:0] z_2_1_pipe;
    reg [width-1:0] z_2_2_pipe;
    reg [width-1:0] z_2_3_pipe;
    reg [width-1:0] z_2_4_pipe;
    reg [width-1:0] z_2_5_pipe;
    reg [width-1:0] z_2_6_pipe;
    reg [width-1:0] z_2_7_pipe;
    reg [width-1:0] z_2_8_pipe;
    reg [width-1:0] z_2_9_pipe;
    reg [width-1:0] z_2_10_pipe;
    reg [width-1:0] z_2_11_pipe;
    reg [width-1:0] z_2_12_pipe;
    reg [width-1:0] z_2_13_pipe;
    reg [width-1:0] z_2_14_pipe;
    reg [width-1:0] z_2_15_pipe;

    always @(posedge clk) begin
        z_2_0_pipe <= z_2_0;
        z_2_1_pipe <= z_2_1;
        z_2_2_pipe <= z_2_2;
        z_2_3_pipe <= z_2_3;
        z_2_4_pipe <= z_2_4;
        z_2_5_pipe <= z_2_5;
        z_2_6_pipe <= z_2_6;
        z_2_7_pipe <= z_2_7;
        z_2_8_pipe <= z_2_8;
        z_2_9_pipe <= z_2_9;
        z_2_10_pipe <= z_2_10;
        z_2_11_pipe <= z_2_11;
        z_2_12_pipe <= z_2_12;
        z_2_13_pipe <= z_2_13;
        z_2_14_pipe <= z_2_14;
        z_2_15_pipe <= z_2_15;
    end

    wire rdd_ctrl_st_2;
    reg rdd_ctrl_st_2_1;
    reg rdd_ctrl_st_2_2;
    always @(posedge clk) begin
        rdd_ctrl_st_2_1 <= outCount_for_rd_data[3];

        rdd_ctrl_st_2_2 <= rdd_ctrl_st_2_1;
    end
    assign rdd_ctrl_st_2 = rdd_ctrl_st_2_2;

    switch #(width) out_sw_2_0(.x0(z_2_0_pipe), .x1(z_2_2_pipe), .y0(z_3_0), .y1(z_3_2), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_1(.x0(z_2_1_pipe), .x1(z_2_3_pipe), .y0(z_3_1), .y1(z_3_3), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_2(.x0(z_2_4_pipe), .x1(z_2_6_pipe), .y0(z_3_4), .y1(z_3_6), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_3(.x0(z_2_5_pipe), .x1(z_2_7_pipe), .y0(z_3_5), .y1(z_3_7), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_4(.x0(z_2_8_pipe), .x1(z_2_10_pipe), .y0(z_3_8), .y1(z_3_10), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_5(.x0(z_2_9_pipe), .x1(z_2_11_pipe), .y0(z_3_9), .y1(z_3_11), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_6(.x0(z_2_12_pipe), .x1(z_2_14_pipe), .y0(z_3_12), .y1(z_3_14), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_7(.x0(z_2_13_pipe), .x1(z_2_15_pipe), .y0(z_3_13), .y1(z_3_15), .ctrl(rdd_ctrl_st_2));
    reg [width-1:0] z_3_0_pipe;
    reg [width-1:0] z_3_1_pipe;
    reg [width-1:0] z_3_2_pipe;
    reg [width-1:0] z_3_3_pipe;
    reg [width-1:0] z_3_4_pipe;
    reg [width-1:0] z_3_5_pipe;
    reg [width-1:0] z_3_6_pipe;
    reg [width-1:0] z_3_7_pipe;
    reg [width-1:0] z_3_8_pipe;
    reg [width-1:0] z_3_9_pipe;
    reg [width-1:0] z_3_10_pipe;
    reg [width-1:0] z_3_11_pipe;
    reg [width-1:0] z_3_12_pipe;
    reg [width-1:0] z_3_13_pipe;
    reg [width-1:0] z_3_14_pipe;
    reg [width-1:0] z_3_15_pipe;

    always @(posedge clk) begin
        z_3_0_pipe <= z_3_0;
        z_3_1_pipe <= z_3_1;
        z_3_2_pipe <= z_3_2;
        z_3_3_pipe <= z_3_3;
        z_3_4_pipe <= z_3_4;
        z_3_5_pipe <= z_3_5;
        z_3_6_pipe <= z_3_6;
        z_3_7_pipe <= z_3_7;
        z_3_8_pipe <= z_3_8;
        z_3_9_pipe <= z_3_9;
        z_3_10_pipe <= z_3_10;
        z_3_11_pipe <= z_3_11;
        z_3_12_pipe <= z_3_12;
        z_3_13_pipe <= z_3_13;
        z_3_14_pipe <= z_3_14;
        z_3_15_pipe <= z_3_15;
    end

    wire rdd_ctrl_st_3;
    reg rdd_ctrl_st_3_1;
    reg rdd_ctrl_st_3_2;
    reg rdd_ctrl_st_3_3;
    always @(posedge clk) begin
        rdd_ctrl_st_3_1 <= outCount_for_rd_data[2];

        rdd_ctrl_st_3_2 <= rdd_ctrl_st_3_1;
        rdd_ctrl_st_3_3 <= rdd_ctrl_st_3_2;
    end
    assign rdd_ctrl_st_3 = rdd_ctrl_st_3_3;

    switch #(width) out_sw_3_0(.x0(z_3_0_pipe), .x1(z_3_1_pipe), .y0(z_4_0), .y1(z_4_1), .ctrl(rdd_ctrl_st_3));
    switch #(width) out_sw_3_1(.x0(z_3_2_pipe), .x1(z_3_3_pipe), .y0(z_4_2), .y1(z_4_3), .ctrl(rdd_ctrl_st_3));
    switch #(width) out_sw_3_2(.x0(z_3_4_pipe), .x1(z_3_5_pipe), .y0(z_4_4), .y1(z_4_5), .ctrl(rdd_ctrl_st_3));
    switch #(width) out_sw_3_3(.x0(z_3_6_pipe), .x1(z_3_7_pipe), .y0(z_4_6), .y1(z_4_7), .ctrl(rdd_ctrl_st_3));
    switch #(width) out_sw_3_4(.x0(z_3_8_pipe), .x1(z_3_9_pipe), .y0(z_4_8), .y1(z_4_9), .ctrl(rdd_ctrl_st_3));
    switch #(width) out_sw_3_5(.x0(z_3_10_pipe), .x1(z_3_11_pipe), .y0(z_4_10), .y1(z_4_11), .ctrl(rdd_ctrl_st_3));
    switch #(width) out_sw_3_6(.x0(z_3_12_pipe), .x1(z_3_13_pipe), .y0(z_4_12), .y1(z_4_13), .ctrl(rdd_ctrl_st_3));
    switch #(width) out_sw_3_7(.x0(z_3_14_pipe), .x1(z_3_15_pipe), .y0(z_4_14), .y1(z_4_15), .ctrl(rdd_ctrl_st_3));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[5];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_8), .y0(u_1_0), .y1(u_1_8), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_1(.x0(u_0_1), .x1(u_0_9), .y0(u_1_1), .y1(u_1_9), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_2(.x0(u_0_2), .x1(u_0_10), .y0(u_1_2), .y1(u_1_10), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_3(.x0(u_0_3), .x1(u_0_11), .y0(u_1_3), .y1(u_1_11), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_4(.x0(u_0_4), .x1(u_0_12), .y0(u_1_4), .y1(u_1_12), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_5(.x0(u_0_5), .x1(u_0_13), .y0(u_1_5), .y1(u_1_13), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_6(.x0(u_0_6), .x1(u_0_14), .y0(u_1_6), .y1(u_1_14), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_7(.x0(u_0_7), .x1(u_0_15), .y0(u_1_7), .y1(u_1_15), .ctrl(rda_ctrl_st_0));
    reg [logDepth-1:0] u_1_0_pipe;
    reg [logDepth-1:0] u_1_1_pipe;
    reg [logDepth-1:0] u_1_2_pipe;
    reg [logDepth-1:0] u_1_3_pipe;
    reg [logDepth-1:0] u_1_4_pipe;
    reg [logDepth-1:0] u_1_5_pipe;
    reg [logDepth-1:0] u_1_6_pipe;
    reg [logDepth-1:0] u_1_7_pipe;
    reg [logDepth-1:0] u_1_8_pipe;
    reg [logDepth-1:0] u_1_9_pipe;
    reg [logDepth-1:0] u_1_10_pipe;
    reg [logDepth-1:0] u_1_11_pipe;
    reg [logDepth-1:0] u_1_12_pipe;
    reg [logDepth-1:0] u_1_13_pipe;
    reg [logDepth-1:0] u_1_14_pipe;
    reg [logDepth-1:0] u_1_15_pipe;

    always @(posedge clk) begin
        u_1_0_pipe <= u_1_0;
        u_1_1_pipe <= u_1_1;
        u_1_2_pipe <= u_1_2;
        u_1_3_pipe <= u_1_3;
        u_1_4_pipe <= u_1_4;
        u_1_5_pipe <= u_1_5;
        u_1_6_pipe <= u_1_6;
        u_1_7_pipe <= u_1_7;
        u_1_8_pipe <= u_1_8;
        u_1_9_pipe <= u_1_9;
        u_1_10_pipe <= u_1_10;
        u_1_11_pipe <= u_1_11;
        u_1_12_pipe <= u_1_12;
        u_1_13_pipe <= u_1_13;
        u_1_14_pipe <= u_1_14;
        u_1_15_pipe <= u_1_15;
    end

    wire rda_ctrl_st_1;
    reg rda_ctrl_st_1_1;
    always @(posedge clk) begin
        rda_ctrl_st_1_1 <= outCount_for_rd_addr[4];

    end
    assign rda_ctrl_st_1 = rda_ctrl_st_1_1;

    switch #(logDepth) rdaddr_sw_1_0(.x0(u_1_0_pipe), .x1(u_1_4_pipe), .y0(u_2_0), .y1(u_2_4), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_1(.x0(u_1_1_pipe), .x1(u_1_5_pipe), .y0(u_2_1), .y1(u_2_5), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_2(.x0(u_1_2_pipe), .x1(u_1_6_pipe), .y0(u_2_2), .y1(u_2_6), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_3(.x0(u_1_3_pipe), .x1(u_1_7_pipe), .y0(u_2_3), .y1(u_2_7), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_4(.x0(u_1_8_pipe), .x1(u_1_12_pipe), .y0(u_2_8), .y1(u_2_12), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_5(.x0(u_1_9_pipe), .x1(u_1_13_pipe), .y0(u_2_9), .y1(u_2_13), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_6(.x0(u_1_10_pipe), .x1(u_1_14_pipe), .y0(u_2_10), .y1(u_2_14), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_7(.x0(u_1_11_pipe), .x1(u_1_15_pipe), .y0(u_2_11), .y1(u_2_15), .ctrl(rda_ctrl_st_1));
    reg [logDepth-1:0] u_2_0_pipe;
    reg [logDepth-1:0] u_2_1_pipe;
    reg [logDepth-1:0] u_2_2_pipe;
    reg [logDepth-1:0] u_2_3_pipe;
    reg [logDepth-1:0] u_2_4_pipe;
    reg [logDepth-1:0] u_2_5_pipe;
    reg [logDepth-1:0] u_2_6_pipe;
    reg [logDepth-1:0] u_2_7_pipe;
    reg [logDepth-1:0] u_2_8_pipe;
    reg [logDepth-1:0] u_2_9_pipe;
    reg [logDepth-1:0] u_2_10_pipe;
    reg [logDepth-1:0] u_2_11_pipe;
    reg [logDepth-1:0] u_2_12_pipe;
    reg [logDepth-1:0] u_2_13_pipe;
    reg [logDepth-1:0] u_2_14_pipe;
    reg [logDepth-1:0] u_2_15_pipe;

    always @(posedge clk) begin
        u_2_0_pipe <= u_2_0;
        u_2_1_pipe <= u_2_1;
        u_2_2_pipe <= u_2_2;
        u_2_3_pipe <= u_2_3;
        u_2_4_pipe <= u_2_4;
        u_2_5_pipe <= u_2_5;
        u_2_6_pipe <= u_2_6;
        u_2_7_pipe <= u_2_7;
        u_2_8_pipe <= u_2_8;
        u_2_9_pipe <= u_2_9;
        u_2_10_pipe <= u_2_10;
        u_2_11_pipe <= u_2_11;
        u_2_12_pipe <= u_2_12;
        u_2_13_pipe <= u_2_13;
        u_2_14_pipe <= u_2_14;
        u_2_15_pipe <= u_2_15;
    end

    wire rda_ctrl_st_2;
    reg rda_ctrl_st_2_1;
    reg rda_ctrl_st_2_2;
    always @(posedge clk) begin
        rda_ctrl_st_2_1 <= outCount_for_rd_addr[3];

        rda_ctrl_st_2_2 <= rda_ctrl_st_2_1;
    end
    assign rda_ctrl_st_2 = rda_ctrl_st_2_2;

    switch #(logDepth) rdaddr_sw_2_0(.x0(u_2_0_pipe), .x1(u_2_2_pipe), .y0(u_3_0), .y1(u_3_2), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_1(.x0(u_2_1_pipe), .x1(u_2_3_pipe), .y0(u_3_1), .y1(u_3_3), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_2(.x0(u_2_4_pipe), .x1(u_2_6_pipe), .y0(u_3_4), .y1(u_3_6), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_3(.x0(u_2_5_pipe), .x1(u_2_7_pipe), .y0(u_3_5), .y1(u_3_7), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_4(.x0(u_2_8_pipe), .x1(u_2_10_pipe), .y0(u_3_8), .y1(u_3_10), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_5(.x0(u_2_9_pipe), .x1(u_2_11_pipe), .y0(u_3_9), .y1(u_3_11), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_6(.x0(u_2_12_pipe), .x1(u_2_14_pipe), .y0(u_3_12), .y1(u_3_14), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_7(.x0(u_2_13_pipe), .x1(u_2_15_pipe), .y0(u_3_13), .y1(u_3_15), .ctrl(rda_ctrl_st_2));
    reg [logDepth-1:0] u_3_0_pipe;
    reg [logDepth-1:0] u_3_1_pipe;
    reg [logDepth-1:0] u_3_2_pipe;
    reg [logDepth-1:0] u_3_3_pipe;
    reg [logDepth-1:0] u_3_4_pipe;
    reg [logDepth-1:0] u_3_5_pipe;
    reg [logDepth-1:0] u_3_6_pipe;
    reg [logDepth-1:0] u_3_7_pipe;
    reg [logDepth-1:0] u_3_8_pipe;
    reg [logDepth-1:0] u_3_9_pipe;
    reg [logDepth-1:0] u_3_10_pipe;
    reg [logDepth-1:0] u_3_11_pipe;
    reg [logDepth-1:0] u_3_12_pipe;
    reg [logDepth-1:0] u_3_13_pipe;
    reg [logDepth-1:0] u_3_14_pipe;
    reg [logDepth-1:0] u_3_15_pipe;

    always @(posedge clk) begin
        u_3_0_pipe <= u_3_0;
        u_3_1_pipe <= u_3_1;
        u_3_2_pipe <= u_3_2;
        u_3_3_pipe <= u_3_3;
        u_3_4_pipe <= u_3_4;
        u_3_5_pipe <= u_3_5;
        u_3_6_pipe <= u_3_6;
        u_3_7_pipe <= u_3_7;
        u_3_8_pipe <= u_3_8;
        u_3_9_pipe <= u_3_9;
        u_3_10_pipe <= u_3_10;
        u_3_11_pipe <= u_3_11;
        u_3_12_pipe <= u_3_12;
        u_3_13_pipe <= u_3_13;
        u_3_14_pipe <= u_3_14;
        u_3_15_pipe <= u_3_15;
    end

    wire rda_ctrl_st_3;
    reg rda_ctrl_st_3_1;
    reg rda_ctrl_st_3_2;
    reg rda_ctrl_st_3_3;
    always @(posedge clk) begin
        rda_ctrl_st_3_1 <= outCount_for_rd_addr[2];

        rda_ctrl_st_3_2 <= rda_ctrl_st_3_1;
        rda_ctrl_st_3_3 <= rda_ctrl_st_3_2;
    end
    assign rda_ctrl_st_3 = rda_ctrl_st_3_3;

    switch #(logDepth) rdaddr_sw_3_0(.x0(u_3_0_pipe), .x1(u_3_1_pipe), .y0(u_4_0), .y1(u_4_1), .ctrl(rda_ctrl_st_3));
    switch #(logDepth) rdaddr_sw_3_1(.x0(u_3_2_pipe), .x1(u_3_3_pipe), .y0(u_4_2), .y1(u_4_3), .ctrl(rda_ctrl_st_3));
    switch #(logDepth) rdaddr_sw_3_2(.x0(u_3_4_pipe), .x1(u_3_5_pipe), .y0(u_4_4), .y1(u_4_5), .ctrl(rda_ctrl_st_3));
    switch #(logDepth) rdaddr_sw_3_3(.x0(u_3_6_pipe), .x1(u_3_7_pipe), .y0(u_4_6), .y1(u_4_7), .ctrl(rda_ctrl_st_3));
    switch #(logDepth) rdaddr_sw_3_4(.x0(u_3_8_pipe), .x1(u_3_9_pipe), .y0(u_4_8), .y1(u_4_9), .ctrl(rda_ctrl_st_3));
    switch #(logDepth) rdaddr_sw_3_5(.x0(u_3_10_pipe), .x1(u_3_11_pipe), .y0(u_4_10), .y1(u_4_11), .ctrl(rda_ctrl_st_3));
    switch #(logDepth) rdaddr_sw_3_6(.x0(u_3_12_pipe), .x1(u_3_13_pipe), .y0(u_4_12), .y1(u_4_13), .ctrl(rda_ctrl_st_3));
    switch #(logDepth) rdaddr_sw_3_7(.x0(u_3_14_pipe), .x1(u_3_15_pipe), .y0(u_4_14), .y1(u_4_15), .ctrl(rda_ctrl_st_3));
endmodule

module memArray1024_13329(nexti, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                x2, y2,
                inAddr2,
                outAddr2,
                x3, y3,
                inAddr3,
                outAddr3,
                x4, y4,
                inAddr4,
                outAddr4,
                x5, y5,
                inAddr5,
                outAddr5,
                x6, y6,
                inAddr6,
                outAddr6,
                x7, y7,
                inAddr7,
                outAddr7,
                x8, y8,
                inAddr8,
                outAddr8,
                x9, y9,
                inAddr9,
                outAddr9,
                x10, y10,
                inAddr10,
                outAddr10,
                x11, y11,
                inAddr11,
                outAddr11,
                x12, y12,
                inAddr12,
                outAddr12,
                x13, y13,
                inAddr13,
                outAddr13,
                x14, y14,
                inAddr14,
                outAddr14,
                x15, y15,
                inAddr15,
                outAddr15,
                clk, inFlip, outFlip);

   parameter numBanks = 16;
   parameter logBanks = 4;
   parameter depth = 64;
   parameter logDepth = 6;
   parameter width = 20;
         
   input     clk, nexti, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   input [width-1:0]   x2;
   output [width-1:0]  y2;
   input [logDepth-1:0] inAddr2, outAddr2;
   input [width-1:0]   x3;
   output [width-1:0]  y3;
   input [logDepth-1:0] inAddr3, outAddr3;
   input [width-1:0]   x4;
   output [width-1:0]  y4;
   input [logDepth-1:0] inAddr4, outAddr4;
   input [width-1:0]   x5;
   output [width-1:0]  y5;
   input [logDepth-1:0] inAddr5, outAddr5;
   input [width-1:0]   x6;
   output [width-1:0]  y6;
   input [logDepth-1:0] inAddr6, outAddr6;
   input [width-1:0]   x7;
   output [width-1:0]  y7;
   input [logDepth-1:0] inAddr7, outAddr7;
   input [width-1:0]   x8;
   output [width-1:0]  y8;
   input [logDepth-1:0] inAddr8, outAddr8;
   input [width-1:0]   x9;
   output [width-1:0]  y9;
   input [logDepth-1:0] inAddr9, outAddr9;
   input [width-1:0]   x10;
   output [width-1:0]  y10;
   input [logDepth-1:0] inAddr10, outAddr10;
   input [width-1:0]   x11;
   output [width-1:0]  y11;
   input [logDepth-1:0] inAddr11, outAddr11;
   input [width-1:0]   x12;
   output [width-1:0]  y12;
   input [logDepth-1:0] inAddr12, outAddr12;
   input [width-1:0]   x13;
   output [width-1:0]  y13;
   input [logDepth-1:0] inAddr13, outAddr13;
   input [width-1:0]   x14;
   output [width-1:0]  y14;
   input [logDepth-1:0] inAddr14, outAddr14;
   input [width-1:0]   x15;
   output [width-1:0]  y15;
   input [logDepth-1:0] inAddr15, outAddr15;
   nextReg #(64, 6) nextReg_18722(.X(nexti), .Y(next0), .reset(reset), .clk(clk));


   memMod #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod2(.in(x2), .out(y2), .inAddr({inFlip, inAddr2}),
	   .outAddr({outFlip, outAddr2}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod3(.in(x3), .out(y3), .inAddr({inFlip, inAddr3}),
	   .outAddr({outFlip, outAddr3}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod4(.in(x4), .out(y4), .inAddr({inFlip, inAddr4}),
	   .outAddr({outFlip, outAddr4}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod5(.in(x5), .out(y5), .inAddr({inFlip, inAddr5}),
	   .outAddr({outFlip, outAddr5}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod6(.in(x6), .out(y6), .inAddr({inFlip, inAddr6}),
	   .outAddr({outFlip, outAddr6}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod7(.in(x7), .out(y7), .inAddr({inFlip, inAddr7}),
	   .outAddr({outFlip, outAddr7}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod8(.in(x8), .out(y8), .inAddr({inFlip, inAddr8}),
	   .outAddr({outFlip, outAddr8}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod9(.in(x9), .out(y9), .inAddr({inFlip, inAddr9}),
	   .outAddr({outFlip, outAddr9}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod10(.in(x10), .out(y10), .inAddr({inFlip, inAddr10}),
	   .outAddr({outFlip, outAddr10}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod11(.in(x11), .out(y11), .inAddr({inFlip, inAddr11}),
	   .outAddr({outFlip, outAddr11}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod12(.in(x12), .out(y12), .inAddr({inFlip, inAddr12}),
	   .outAddr({outFlip, outAddr12}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod13(.in(x13), .out(y13), .inAddr({inFlip, inAddr13}),
	   .outAddr({outFlip, outAddr13}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod14(.in(x14), .out(y14), .inAddr({inFlip, inAddr14}),
	   .outAddr({outFlip, outAddr14}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod15(.in(x15), .out(y15), .inAddr({inFlip, inAddr15}),
	   .outAddr({outFlip, outAddr15}), .writeSel(1'b1), .clk(clk));   
endmodule

module nextReg(X, Y, reset, clk);
   parameter depth=2, logDepth=1;

   output Y;
   input X;
   input              clk, reset;
   reg [logDepth:0] count;
   reg                active;

   assign Y = (count == depth) ? 1 : 0;

   always @ (posedge clk) begin
      if (reset == 1) begin
         count <= 0;
         active <= 0;
      end
      else if (X == 1) begin
         active <= 1;
         count <= 1;
      end
      else if (count == depth) begin
         count <= 0;
         active <= 0;
      end
      else if (active)
         count <= count+1;
   end
endmodule


module memMod(in, out, inAddr, outAddr, writeSel, clk);
   
   parameter depth=1024, width=16, logDepth=10;
   
   input [width-1:0]    in;
   input [logDepth-1:0] inAddr, outAddr;
   input 	        writeSel, clk;
   output [width-1:0] 	out;
   reg [width-1:0] 	out;
   
   // synthesis attribute ram_style of mem is block

   reg [width-1:0] 	mem[depth-1:0]; 
   
   always @(posedge clk) begin
      out <= mem[outAddr];
      
      if (writeSel)
        mem[inAddr] <= in;
   end
endmodule 



module memMod_dist(in, out, inAddr, outAddr, writeSel, clk);
   
   parameter depth=1024, width=16, logDepth=10;
   
   input [width-1:0]    in;
   input [logDepth-1:0] inAddr, outAddr;
   input 	        writeSel, clk;
   output [width-1:0] 	out;
   reg [width-1:0] 	out;
   
   // synthesis attribute ram_style of mem is distributed

   reg [width-1:0] 	mem[depth-1:0]; 
   
   always @(posedge clk) begin
      out <= mem[outAddr];
      
      if (writeSel)
        mem[inAddr] <= in;
   end
endmodule 

module switch(ctrl, x0, x1, y0, y1);
    parameter width = 16;
    input [width-1:0] x0, x1;
    output [width-1:0] y0, y1;
    input ctrl;
    assign y0 = (ctrl == 0) ? x0 : x1;
    assign y1 = (ctrl == 0) ? x1 : x0;
endmodule

module shiftRegFIFO(X, Y, clk);
   parameter depth=1, width=1;

   output [width-1:0] Y;
   input  [width-1:0] X;
   input              clk;

   reg [width-1:0]    mem [depth-1:0];
   integer            index;

   assign Y = mem[depth-1];

   always @ (posedge clk) begin
      for(index=1;index<depth;index=index+1) begin
         mem[index] <= mem[index-1];
      end
      mem[0]<=X;
   end
endmodule

// Latency: 661
// Gap: 661
module ICompose_16913(clk, reset, nexti, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7,
      X8, Y8,
      X9, Y9,
      X10, Y10,
      X11, Y11,
      X12, Y12,
      X13, Y13,
      X14, Y14,
      X15, Y15,
      X16, Y16,
      X17, Y17,
      X18, Y18,
      X19, Y19,
      X20, Y20,
      X21, Y21,
      X22, Y22,
      X23, Y23,
      X24, Y24,
      X25, Y25,
      X26, Y26,
      X27, Y27,
      X28, Y28,
      X29, Y29,
      X30, Y30,
      X31, Y31);

   output next_out;
   reg next_out;
   input clk, reset, nexti;

   reg [6:0] cycle_count;
   reg [6:0] count;

   input [9:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15,
      X16,
      X17,
      X18,
      X19,
      X20,
      X21,
      X22,
      X23,
      X24,
      X25,
      X26,
      X27,
      X28,
      X29,
      X30,
      X31;

   output [9:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15,
      Y16,
      Y17,
      Y18,
      Y19,
      Y20,
      Y21,
      Y22,
      Y23,
      Y24,
      Y25,
      Y26,
      Y27,
      Y28,
      Y29,
      Y30,
      Y31;

   reg [9:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15,
      Y16,
      Y17,
      Y18,
      Y19,
      Y20,
      Y21,
      Y22,
      Y23,
      Y24,
      Y25,
      Y26,
      Y27,
      Y28,
      Y29,
      Y30,
      Y31;

   reg int_next;
   reg state;
   wire [9:0] t0; 
   reg [9:0] s0;
   wire [9:0] t1; 
   reg [9:0] s1;
   wire [9:0] t2; 
   reg [9:0] s2;
   wire [9:0] t3; 
   reg [9:0] s3;
   wire [9:0] t4; 
   reg [9:0] s4;
   wire [9:0] t5; 
   reg [9:0] s5;
   wire [9:0] t6; 
   reg [9:0] s6;
   wire [9:0] t7; 
   reg [9:0] s7;
   wire [9:0] t8; 
   reg [9:0] s8;
   wire [9:0] t9; 
   reg [9:0] s9;
   wire [9:0] t10; 
   reg [9:0] s10;
   wire [9:0] t11; 
   reg [9:0] s11;
   wire [9:0] t12; 
   reg [9:0] s12;
   wire [9:0] t13; 
   reg [9:0] s13;
   wire [9:0] t14; 
   reg [9:0] s14;
   wire [9:0] t15; 
   reg [9:0] s15;
   wire [9:0] t16; 
   reg [9:0] s16;
   wire [9:0] t17; 
   reg [9:0] s17;
   wire [9:0] t18; 
   reg [9:0] s18;
   wire [9:0] t19; 
   reg [9:0] s19;
   wire [9:0] t20; 
   reg [9:0] s20;
   wire [9:0] t21; 
   reg [9:0] s21;
   wire [9:0] t22; 
   reg [9:0] s22;
   wire [9:0] t23; 
   reg [9:0] s23;
   wire [9:0] t24; 
   reg [9:0] s24;
   wire [9:0] t25; 
   reg [9:0] s25;
   wire [9:0] t26; 
   reg [9:0] s26;
   wire [9:0] t27; 
   reg [9:0] s27;
   wire [9:0] t28; 
   reg [9:0] s28;
   wire [9:0] t29; 
   reg [9:0] s29;
   wire [9:0] t30; 
   reg [9:0] s30;
   wire [9:0] t31; 
   reg [9:0] s31;

   reg [1:0] iri_state;
   wire int_next_out;
   reg [4:0] i1;

   statementList16911 instList18727 (.clk(clk), .reset(reset), .nexti(int_next), .next_out(int_next_out),
      .i1_in(i1),
    .X0(s0), .Y0(t0),
    .X1(s1), .Y1(t1),
    .X2(s2), .Y2(t2),
    .X3(s3), .Y3(t3),
    .X4(s4), .Y4(t4),
    .X5(s5), .Y5(t5),
    .X6(s6), .Y6(t6),
    .X7(s7), .Y7(t7),
    .X8(s8), .Y8(t8),
    .X9(s9), .Y9(t9),
    .X10(s10), .Y10(t10),
    .X11(s11), .Y11(t11),
    .X12(s12), .Y12(t12),
    .X13(s13), .Y13(t13),
    .X14(s14), .Y14(t14),
    .X15(s15), .Y15(t15),
    .X16(s16), .Y16(t16),
    .X17(s17), .Y17(t17),
    .X18(s18), .Y18(t18),
    .X19(s19), .Y19(t19),
    .X20(s20), .Y20(t20),
    .X21(s21), .Y21(t21),
    .X22(s22), .Y22(t22),
    .X23(s23), .Y23(t23),
    .X24(s24), .Y24(t24),
    .X25(s25), .Y25(t25),
    .X26(s26), .Y26(t26),
    .X27(s27), .Y27(t27),
    .X28(s28), .Y28(t28),
    .X29(s29), .Y29(t29),
    .X30(s30), .Y30(t30),
    .X31(s31), .Y31(t31));

   always @(posedge clk) begin
      if (reset == 1) begin
         int_next <= 0;
         i1 <= 9;
         cycle_count <= 0;
         next_out <= 0;
         iri_state <= 0;
         Y0 <= 0;
         Y1 <= 0;
         Y2 <= 0;
         Y3 <= 0;
         Y4 <= 0;
         Y5 <= 0;
         Y6 <= 0;
         Y7 <= 0;
         Y8 <= 0;
         Y9 <= 0;
         Y10 <= 0;
         Y11 <= 0;
         Y12 <= 0;
         Y13 <= 0;
         Y14 <= 0;
         Y15 <= 0;
         Y16 <= 0;
         Y17 <= 0;
         Y18 <= 0;
         Y19 <= 0;
         Y20 <= 0;
         Y21 <= 0;
         Y22 <= 0;
         Y23 <= 0;
         Y24 <= 0;
         Y25 <= 0;
         Y26 <= 0;
         Y27 <= 0;
         Y28 <= 0;
         Y29 <= 0;
         Y30 <= 0;
         Y31 <= 0;
      end
      else begin
         Y0 <= t0;
         Y1 <= t1;
         Y2 <= t2;
         Y3 <= t3;
         Y4 <= t4;
         Y5 <= t5;
         Y6 <= t6;
         Y7 <= t7;
         Y8 <= t8;
         Y9 <= t9;
         Y10 <= t10;
         Y11 <= t11;
         Y12 <= t12;
         Y13 <= t13;
         Y14 <= t14;
         Y15 <= t15;
         Y16 <= t16;
         Y17 <= t17;
         Y18 <= t18;
         Y19 <= t19;
         Y20 <= t20;
         Y21 <= t21;
         Y22 <= t22;
         Y23 <= t23;
         Y24 <= t24;
         Y25 <= t25;
         Y26 <= t26;
         Y27 <= t27;
         Y28 <= t28;
         Y29 <= t29;
         Y30 <= t30;
         Y31 <= t31;
         next_out <= 0;
         case (iri_state)
            0: begin
               i1 <= 9;
               cycle_count <= 0;
               if (nexti == 1) begin
                  int_next <= 1;
                  iri_state <= 1;
                  
               end
               else begin
                  int_next <= 0;
                  iri_state <= 0;
               end
            end
            1: begin
               int_next <= 0;
               cycle_count <= cycle_count + 1;
               i1 <= i1;
               if (cycle_count < 64)
                  iri_state <= 1;
               else
                  iri_state <= 2;
            end
            2: begin
               cycle_count <= 0;
               i1 <= i1 - 1;
               if (i1 > 0) begin
                  iri_state <= 1;
                  int_next <= 1;
               end
               else begin
                  iri_state <= 0;
                  next_out <= 1;
                  int_next <= 0;
               end
            end
         endcase               
      end
   end

   always @(posedge clk) begin
      if (reset == 1) begin
         state <= 0;
         count <= 0;
         s0 <= 0;
         s1 <= 0;
         s2 <= 0;
         s3 <= 0;
         s4 <= 0;
         s5 <= 0;
         s6 <= 0;
         s7 <= 0;
         s8 <= 0;
         s9 <= 0;
         s10 <= 0;
         s11 <= 0;
         s12 <= 0;
         s13 <= 0;
         s14 <= 0;
         s15 <= 0;
         s16 <= 0;
         s17 <= 0;
         s18 <= 0;
         s19 <= 0;
         s20 <= 0;
         s21 <= 0;
         s22 <= 0;
         s23 <= 0;
         s24 <= 0;
         s25 <= 0;
         s26 <= 0;
         s27 <= 0;
         s28 <= 0;
         s29 <= 0;
         s30 <= 0;
         s31 <= 0;
      end      
      else begin
         case (state)
            0: begin
               count <= 0;
               if (nexti == 1) begin
                  state <= 1;
                  count <= 0;
                  s0 <= X0; 
                  s1 <= X1; 
                  s2 <= X2; 
                  s3 <= X3; 
                  s4 <= X4; 
                  s5 <= X5; 
                  s6 <= X6; 
                  s7 <= X7; 
                  s8 <= X8; 
                  s9 <= X9; 
                  s10 <= X10; 
                  s11 <= X11; 
                  s12 <= X12; 
                  s13 <= X13; 
                  s14 <= X14; 
                  s15 <= X15; 
                  s16 <= X16; 
                  s17 <= X17; 
                  s18 <= X18; 
                  s19 <= X19; 
                  s20 <= X20; 
                  s21 <= X21; 
                  s22 <= X22; 
                  s23 <= X23; 
                  s24 <= X24; 
                  s25 <= X25; 
                  s26 <= X26; 
                  s27 <= X27; 
                  s28 <= X28; 
                  s29 <= X29; 
                  s30 <= X30; 
                  s31 <= X31; 
               end
               else begin
                  state <= 0;
                  count <= 0;
                  s0 <= t0; 
                  s1 <= t1; 
                  s2 <= t2; 
                  s3 <= t3; 
                  s4 <= t4; 
                  s5 <= t5; 
                  s6 <= t6; 
                  s7 <= t7; 
                  s8 <= t8; 
                  s9 <= t9; 
                  s10 <= t10; 
                  s11 <= t11; 
                  s12 <= t12; 
                  s13 <= t13; 
                  s14 <= t14; 
                  s15 <= t15; 
                  s16 <= t16; 
                  s17 <= t17; 
                  s18 <= t18; 
                  s19 <= t19; 
                  s20 <= t20; 
                  s21 <= t21; 
                  s22 <= t22; 
                  s23 <= t23; 
                  s24 <= t24; 
                  s25 <= t25; 
                  s26 <= t26; 
                  s27 <= t27; 
                  s28 <= t28; 
                  s29 <= t29; 
                  s30 <= t30; 
                  s31 <= t31; 
               end               
            end
            1: begin
               count <= count + 1;
               if (count < 64) begin
                  s0 <= X0; 
                  s1 <= X1; 
                  s2 <= X2; 
                  s3 <= X3; 
                  s4 <= X4; 
                  s5 <= X5; 
                  s6 <= X6; 
                  s7 <= X7; 
                  s8 <= X8; 
                  s9 <= X9; 
                  s10 <= X10; 
                  s11 <= X11; 
                  s12 <= X12; 
                  s13 <= X13; 
                  s14 <= X14; 
                  s15 <= X15; 
                  s16 <= X16; 
                  s17 <= X17; 
                  s18 <= X18; 
                  s19 <= X19; 
                  s20 <= X20; 
                  s21 <= X21; 
                  s22 <= X22; 
                  s23 <= X23; 
                  s24 <= X24; 
                  s25 <= X25; 
                  s26 <= X26; 
                  s27 <= X27; 
                  s28 <= X28; 
                  s29 <= X29; 
                  s30 <= X30; 
                  s31 <= X31; 
                  state <= 1;                    
               end
               else begin
                  s0 <= t0; 
                  s1 <= t1; 
                  s2 <= t2; 
                  s3 <= t3; 
                  s4 <= t4; 
                  s5 <= t5; 
                  s6 <= t6; 
                  s7 <= t7; 
                  s8 <= t8; 
                  s9 <= t9; 
                  s10 <= t10; 
                  s11 <= t11; 
                  s12 <= t12; 
                  s13 <= t13; 
                  s14 <= t14; 
                  s15 <= t15; 
                  s16 <= t16; 
                  s17 <= t17; 
                  s18 <= t18; 
                  s19 <= t19; 
                  s20 <= t20; 
                  s21 <= t21; 
                  s22 <= t22; 
                  s23 <= t23; 
                  s24 <= t24; 
                  s25 <= t25; 
                  s26 <= t26; 
                  s27 <= t27; 
                  s28 <= t28; 
                  s29 <= t29; 
                  s30 <= t30; 
                  s31 <= t31; 
                  state <= 0;
               end
            end
         endcase               
      end
   end
endmodule

// Latency: 65
// Gap: 64
module statementList16911(clk, reset, nexti, next_out,
   i1_in,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15,
   X16, Y16,
   X17, Y17,
   X18, Y18,
   X19, Y19,
   X20, Y20,
   X21, Y21,
   X22, Y22,
   X23, Y23,
   X24, Y24,
   X25, Y25,
   X26, Y26,
   X27, Y27,
   X28, Y28,
   X29, Y29,
   X30, Y30,
   X31, Y31);

   output next_out;
   input clk, reset, nexti;

   input [4:0] i1_in;
   input [9:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15,
      X16,
      X17,
      X18,
      X19,
      X20,
      X21,
      X22,
      X23,
      X24,
      X25,
      X26,
      X27,
      X28,
      X29,
      X30,
      X31;

   output [9:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15,
      Y16,
      Y17,
      Y18,
      Y19,
      Y20,
      Y21,
      Y22,
      Y23,
      Y24,
      Y25,
      Y26,
      Y27,
      Y28,
      Y29,
      Y30,
      Y31;

   wire [9:0] t0_0;
   wire [9:0] t0_1;
   wire [9:0] t0_2;
   wire [9:0] t0_3;
   wire [9:0] t0_4;
   wire [9:0] t0_5;
   wire [9:0] t0_6;
   wire [9:0] t0_7;
   wire [9:0] t0_8;
   wire [9:0] t0_9;
   wire [9:0] t0_10;
   wire [9:0] t0_11;
   wire [9:0] t0_12;
   wire [9:0] t0_13;
   wire [9:0] t0_14;
   wire [9:0] t0_15;
   wire [9:0] t0_16;
   wire [9:0] t0_17;
   wire [9:0] t0_18;
   wire [9:0] t0_19;
   wire [9:0] t0_20;
   wire [9:0] t0_21;
   wire [9:0] t0_22;
   wire [9:0] t0_23;
   wire [9:0] t0_24;
   wire [9:0] t0_25;
   wire [9:0] t0_26;
   wire [9:0] t0_27;
   wire [9:0] t0_28;
   wire [9:0] t0_29;
   wire [9:0] t0_30;
   wire [9:0] t0_31;
   wire next_0;
   wire [9:0] t1_0;
   wire [9:0] t1_1;
   wire [9:0] t1_2;
   wire [9:0] t1_3;
   wire [9:0] t1_4;
   wire [9:0] t1_5;
   wire [9:0] t1_6;
   wire [9:0] t1_7;
   wire [9:0] t1_8;
   wire [9:0] t1_9;
   wire [9:0] t1_10;
   wire [9:0] t1_11;
   wire [9:0] t1_12;
   wire [9:0] t1_13;
   wire [9:0] t1_14;
   wire [9:0] t1_15;
   wire [9:0] t1_16;
   wire [9:0] t1_17;
   wire [9:0] t1_18;
   wire [9:0] t1_19;
   wire [9:0] t1_20;
   wire [9:0] t1_21;
   wire [9:0] t1_22;
   wire [9:0] t1_23;
   wire [9:0] t1_24;
   wire [9:0] t1_25;
   wire [9:0] t1_26;
   wire [9:0] t1_27;
   wire [9:0] t1_28;
   wire [9:0] t1_29;
   wire [9:0] t1_30;
   wire [9:0] t1_31;
   wire next_1;
   wire [9:0] t2_0;
   wire [9:0] t2_1;
   wire [9:0] t2_2;
   wire [9:0] t2_3;
   wire [9:0] t2_4;
   wire [9:0] t2_5;
   wire [9:0] t2_6;
   wire [9:0] t2_7;
   wire [9:0] t2_8;
   wire [9:0] t2_9;
   wire [9:0] t2_10;
   wire [9:0] t2_11;
   wire [9:0] t2_12;
   wire [9:0] t2_13;
   wire [9:0] t2_14;
   wire [9:0] t2_15;
   wire [9:0] t2_16;
   wire [9:0] t2_17;
   wire [9:0] t2_18;
   wire [9:0] t2_19;
   wire [9:0] t2_20;
   wire [9:0] t2_21;
   wire [9:0] t2_22;
   wire [9:0] t2_23;
   wire [9:0] t2_24;
   wire [9:0] t2_25;
   wire [9:0] t2_26;
   wire [9:0] t2_27;
   wire [9:0] t2_28;
   wire [9:0] t2_29;
   wire [9:0] t2_30;
   wire [9:0] t2_31;
   wire next_2;
   wire [9:0] t3_0;
   wire [9:0] t3_1;
   wire [9:0] t3_2;
   wire [9:0] t3_3;
   wire [9:0] t3_4;
   wire [9:0] t3_5;
   wire [9:0] t3_6;
   wire [9:0] t3_7;
   wire [9:0] t3_8;
   wire [9:0] t3_9;
   wire [9:0] t3_10;
   wire [9:0] t3_11;
   wire [9:0] t3_12;
   wire [9:0] t3_13;
   wire [9:0] t3_14;
   wire [9:0] t3_15;
   wire [9:0] t3_16;
   wire [9:0] t3_17;
   wire [9:0] t3_18;
   wire [9:0] t3_19;
   wire [9:0] t3_20;
   wire [9:0] t3_21;
   wire [9:0] t3_22;
   wire [9:0] t3_23;
   wire [9:0] t3_24;
   wire [9:0] t3_25;
   wire [9:0] t3_26;
   wire [9:0] t3_27;
   wire [9:0] t3_28;
   wire [9:0] t3_29;
   wire [9:0] t3_30;
   wire [9:0] t3_31;
   wire next_3;
   wire [4:0] i1;
   wire [4:0] i1_0;
   assign t0_0 = X0;
   assign Y0 = t3_0;
   assign t0_1 = X1;
   assign Y1 = t3_1;
   assign t0_2 = X2;
   assign Y2 = t3_2;
   assign t0_3 = X3;
   assign Y3 = t3_3;
   assign t0_4 = X4;
   assign Y4 = t3_4;
   assign t0_5 = X5;
   assign Y5 = t3_5;
   assign t0_6 = X6;
   assign Y6 = t3_6;
   assign t0_7 = X7;
   assign Y7 = t3_7;
   assign t0_8 = X8;
   assign Y8 = t3_8;
   assign t0_9 = X9;
   assign Y9 = t3_9;
   assign t0_10 = X10;
   assign Y10 = t3_10;
   assign t0_11 = X11;
   assign Y11 = t3_11;
   assign t0_12 = X12;
   assign Y12 = t3_12;
   assign t0_13 = X13;
   assign Y13 = t3_13;
   assign t0_14 = X14;
   assign Y14 = t3_14;
   assign t0_15 = X15;
   assign Y15 = t3_15;
   assign t0_16 = X16;
   assign Y16 = t3_16;
   assign t0_17 = X17;
   assign Y17 = t3_17;
   assign t0_18 = X18;
   assign Y18 = t3_18;
   assign t0_19 = X19;
   assign Y19 = t3_19;
   assign t0_20 = X20;
   assign Y20 = t3_20;
   assign t0_21 = X21;
   assign Y21 = t3_21;
   assign t0_22 = X22;
   assign Y22 = t3_22;
   assign t0_23 = X23;
   assign Y23 = t3_23;
   assign t0_24 = X24;
   assign Y24 = t3_24;
   assign t0_25 = X25;
   assign Y25 = t3_25;
   assign t0_26 = X26;
   assign Y26 = t3_26;
   assign t0_27 = X27;
   assign Y27 = t3_27;
   assign t0_28 = X28;
   assign Y28 = t3_28;
   assign t0_29 = X29;
   assign Y29 = t3_29;
   assign t0_30 = X30;
   assign Y30 = t3_30;
   assign t0_31 = X31;
   assign Y31 = t3_31;
   assign next_0 = nexti;
   assign next_out = next_3;

   assign i1_0 = i1_in;

// latency=11, gap=64
   DirSum_16310 DirSumInst18730(.nexti(next_0), .clk(clk), .reset(reset), .next_out(next_1),
.i1(i1_0),
       .X0(t0_0), .Y0(t1_0),
       .X1(t0_1), .Y1(t1_1),
       .X2(t0_2), .Y2(t1_2),
       .X3(t0_3), .Y3(t1_3),
       .X4(t0_4), .Y4(t1_4),
       .X5(t0_5), .Y5(t1_5),
       .X6(t0_6), .Y6(t1_6),
       .X7(t0_7), .Y7(t1_7),
       .X8(t0_8), .Y8(t1_8),
       .X9(t0_9), .Y9(t1_9),
       .X10(t0_10), .Y10(t1_10),
       .X11(t0_11), .Y11(t1_11),
       .X12(t0_12), .Y12(t1_12),
       .X13(t0_13), .Y13(t1_13),
       .X14(t0_14), .Y14(t1_14),
       .X15(t0_15), .Y15(t1_15),
       .X16(t0_16), .Y16(t1_16),
       .X17(t0_17), .Y17(t1_17),
       .X18(t0_18), .Y18(t1_18),
       .X19(t0_19), .Y19(t1_19),
       .X20(t0_20), .Y20(t1_20),
       .X21(t0_21), .Y21(t1_21),
       .X22(t0_22), .Y22(t1_22),
       .X23(t0_23), .Y23(t1_23),
       .X24(t0_24), .Y24(t1_24),
       .X25(t0_25), .Y25(t1_25),
       .X26(t0_26), .Y26(t1_26),
       .X27(t0_27), .Y27(t1_27),
       .X28(t0_28), .Y28(t1_28),
       .X29(t0_29), .Y29(t1_29),
       .X30(t0_30), .Y30(t1_30),
       .X31(t0_31), .Y31(t1_31));


// latency=2, gap=64
   codeBlock16312 codeBlockIsnt18731(.clk(clk), .reset(reset), .next_in(next_1), .next_out(next_2),
       .X0_in(t1_0), .Y0(t2_0),
       .X1_in(t1_1), .Y1(t2_1),
       .X2_in(t1_2), .Y2(t2_2),
       .X3_in(t1_3), .Y3(t2_3),
       .X4_in(t1_4), .Y4(t2_4),
       .X5_in(t1_5), .Y5(t2_5),
       .X6_in(t1_6), .Y6(t2_6),
       .X7_in(t1_7), .Y7(t2_7),
       .X8_in(t1_8), .Y8(t2_8),
       .X9_in(t1_9), .Y9(t2_9),
       .X10_in(t1_10), .Y10(t2_10),
       .X11_in(t1_11), .Y11(t2_11),
       .X12_in(t1_12), .Y12(t2_12),
       .X13_in(t1_13), .Y13(t2_13),
       .X14_in(t1_14), .Y14(t2_14),
       .X15_in(t1_15), .Y15(t2_15),
       .X16_in(t1_16), .Y16(t2_16),
       .X17_in(t1_17), .Y17(t2_17),
       .X18_in(t1_18), .Y18(t2_18),
       .X19_in(t1_19), .Y19(t2_19),
       .X20_in(t1_20), .Y20(t2_20),
       .X21_in(t1_21), .Y21(t2_21),
       .X22_in(t1_22), .Y22(t2_22),
       .X23_in(t1_23), .Y23(t2_23),
       .X24_in(t1_24), .Y24(t2_24),
       .X25_in(t1_25), .Y25(t2_25),
       .X26_in(t1_26), .Y26(t2_26),
       .X27_in(t1_27), .Y27(t2_27),
       .X28_in(t1_28), .Y28(t2_28),
       .X29_in(t1_29), .Y29(t2_29),
       .X30_in(t1_30), .Y30(t2_30),
       .X31_in(t1_31), .Y31(t2_31));


// latency=52, gap=64
   rc16909 instrc18732(.clk(clk), .reset(reset), .nexti(next_2), .next_out(next_3),
    .X0(t2_0), .Y0(t3_0),
    .X1(t2_1), .Y1(t3_1),
    .X2(t2_2), .Y2(t3_2),
    .X3(t2_3), .Y3(t3_3),
    .X4(t2_4), .Y4(t3_4),
    .X5(t2_5), .Y5(t3_5),
    .X6(t2_6), .Y6(t3_6),
    .X7(t2_7), .Y7(t3_7),
    .X8(t2_8), .Y8(t3_8),
    .X9(t2_9), .Y9(t3_9),
    .X10(t2_10), .Y10(t3_10),
    .X11(t2_11), .Y11(t3_11),
    .X12(t2_12), .Y12(t3_12),
    .X13(t2_13), .Y13(t3_13),
    .X14(t2_14), .Y14(t3_14),
    .X15(t2_15), .Y15(t3_15),
    .X16(t2_16), .Y16(t3_16),
    .X17(t2_17), .Y17(t3_17),
    .X18(t2_18), .Y18(t3_18),
    .X19(t2_19), .Y19(t3_19),
    .X20(t2_20), .Y20(t3_20),
    .X21(t2_21), .Y21(t3_21),
    .X22(t2_22), .Y22(t3_22),
    .X23(t2_23), .Y23(t3_23),
    .X24(t2_24), .Y24(t3_24),
    .X25(t2_25), .Y25(t3_25),
    .X26(t2_26), .Y26(t3_26),
    .X27(t2_27), .Y27(t3_27),
    .X28(t2_28), .Y28(t3_28),
    .X29(t2_29), .Y29(t3_29),
    .X30(t2_30), .Y30(t3_30),
    .X31(t2_31), .Y31(t3_31));


endmodule

// Latency: 11
// Gap: 64
module DirSum_16310(clk, reset, nexti, next_out,
      i1,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7,
      X8, Y8,
      X9, Y9,
      X10, Y10,
      X11, Y11,
      X12, Y12,
      X13, Y13,
      X14, Y14,
      X15, Y15,
      X16, Y16,
      X17, Y17,
      X18, Y18,
      X19, Y19,
      X20, Y20,
      X21, Y21,
      X22, Y22,
      X23, Y23,
      X24, Y24,
      X25, Y25,
      X26, Y26,
      X27, Y27,
      X28, Y28,
      X29, Y29,
      X30, Y30,
      X31, Y31);

   output next_out;
   input clk, reset, nexti;

   input [4:0] i1;
   reg [5:0] i2;

   input [9:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15,
      X16,
      X17,
      X18,
      X19,
      X20,
      X21,
      X22,
      X23,
      X24,
      X25,
      X26,
      X27,
      X28,
      X29,
      X30,
      X31;

   output [9:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15,
      Y16,
      Y17,
      Y18,
      Y19,
      Y20,
      Y21,
      Y22,
      Y23,
      Y24,
      Y25,
      Y26,
      Y27,
      Y28,
      Y29,
      Y30,
      Y31;

   always @(posedge clk) begin
      if (reset == 1) begin
         i2 <= 0;
      end
      else begin
         if (nexti == 1)
            i2 <= 0;
         else if (i2 == 63)
            i2 <= 0;
         else
            i2 <= i2 + 1;
      end
   end

   codeBlock13333 codeBlockIsnt18733(.clk(clk), .reset(reset), .next_in(nexti), .next_out(next_out),
.i2_in(i2),
.i1_in(i1),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7),
       .X8_in(X8), .Y8(Y8),
       .X9_in(X9), .Y9(Y9),
       .X10_in(X10), .Y10(Y10),
       .X11_in(X11), .Y11(Y11),
       .X12_in(X12), .Y12(Y12),
       .X13_in(X13), .Y13(Y13),
       .X14_in(X14), .Y14(Y14),
       .X15_in(X15), .Y15(Y15),
       .X16_in(X16), .Y16(Y16),
       .X17_in(X17), .Y17(Y17),
       .X18_in(X18), .Y18(Y18),
       .X19_in(X19), .Y19(Y19),
       .X20_in(X20), .Y20(Y20),
       .X21_in(X21), .Y21(Y21),
       .X22_in(X22), .Y22(Y22),
       .X23_in(X23), .Y23(Y23),
       .X24_in(X24), .Y24(Y24),
       .X25_in(X25), .Y25(Y25),
       .X26_in(X26), .Y26(Y26),
       .X27_in(X27), .Y27(Y27),
       .X28_in(X28), .Y28(Y28),
       .X29_in(X29), .Y29(Y29),
       .X30_in(X30), .Y30(Y30),
       .X31_in(X31), .Y31(Y31));

endmodule

module D2_15282(addr, out, clk);
   input clk;
   output [9:0] out;
   reg [9:0] out, out2, out3;
   input [9:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 10'h0;
      1: out3 <= 10'h3fe;
      2: out3 <= 10'h3fd;
      3: out3 <= 10'h3fb;
      4: out3 <= 10'h3fa;
      5: out3 <= 10'h3f8;
      6: out3 <= 10'h3f7;
      7: out3 <= 10'h3f5;
      8: out3 <= 10'h3f3;
      9: out3 <= 10'h3f2;
      10: out3 <= 10'h3f0;
      11: out3 <= 10'h3ef;
      12: out3 <= 10'h3ed;
      13: out3 <= 10'h3ec;
      14: out3 <= 10'h3ea;
      15: out3 <= 10'h3e8;
      16: out3 <= 10'h3e7;
      17: out3 <= 10'h3e5;
      18: out3 <= 10'h3e4;
      19: out3 <= 10'h3e2;
      20: out3 <= 10'h3e1;
      21: out3 <= 10'h3df;
      22: out3 <= 10'h3de;
      23: out3 <= 10'h3dc;
      24: out3 <= 10'h3da;
      25: out3 <= 10'h3d9;
      26: out3 <= 10'h3d7;
      27: out3 <= 10'h3d6;
      28: out3 <= 10'h3d4;
      29: out3 <= 10'h3d3;
      30: out3 <= 10'h3d1;
      31: out3 <= 10'h3d0;
      32: out3 <= 10'h3ce;
      33: out3 <= 10'h3cd;
      34: out3 <= 10'h3cb;
      35: out3 <= 10'h3c9;
      36: out3 <= 10'h3c8;
      37: out3 <= 10'h3c6;
      38: out3 <= 10'h3c5;
      39: out3 <= 10'h3c3;
      40: out3 <= 10'h3c2;
      41: out3 <= 10'h3c0;
      42: out3 <= 10'h3bf;
      43: out3 <= 10'h3bd;
      44: out3 <= 10'h3bc;
      45: out3 <= 10'h3ba;
      46: out3 <= 10'h3b9;
      47: out3 <= 10'h3b7;
      48: out3 <= 10'h3b6;
      49: out3 <= 10'h3b4;
      50: out3 <= 10'h3b3;
      51: out3 <= 10'h3b1;
      52: out3 <= 10'h3b0;
      53: out3 <= 10'h3ae;
      54: out3 <= 10'h3ad;
      55: out3 <= 10'h3ab;
      56: out3 <= 10'h3aa;
      57: out3 <= 10'h3a8;
      58: out3 <= 10'h3a7;
      59: out3 <= 10'h3a5;
      60: out3 <= 10'h3a4;
      61: out3 <= 10'h3a2;
      62: out3 <= 10'h3a1;
      63: out3 <= 10'h39f;
      64: out3 <= 10'h39e;
      65: out3 <= 10'h39d;
      66: out3 <= 10'h39b;
      67: out3 <= 10'h39a;
      68: out3 <= 10'h398;
      69: out3 <= 10'h397;
      70: out3 <= 10'h395;
      71: out3 <= 10'h394;
      72: out3 <= 10'h393;
      73: out3 <= 10'h391;
      74: out3 <= 10'h390;
      75: out3 <= 10'h38e;
      76: out3 <= 10'h38d;
      77: out3 <= 10'h38b;
      78: out3 <= 10'h38a;
      79: out3 <= 10'h389;
      80: out3 <= 10'h387;
      81: out3 <= 10'h386;
      82: out3 <= 10'h385;
      83: out3 <= 10'h383;
      84: out3 <= 10'h382;
      85: out3 <= 10'h380;
      86: out3 <= 10'h37f;
      87: out3 <= 10'h37e;
      88: out3 <= 10'h37c;
      89: out3 <= 10'h37b;
      90: out3 <= 10'h37a;
      91: out3 <= 10'h378;
      92: out3 <= 10'h377;
      93: out3 <= 10'h376;
      94: out3 <= 10'h374;
      95: out3 <= 10'h373;
      96: out3 <= 10'h372;
      97: out3 <= 10'h370;
      98: out3 <= 10'h36f;
      99: out3 <= 10'h36e;
      100: out3 <= 10'h36d;
      101: out3 <= 10'h36b;
      102: out3 <= 10'h36a;
      103: out3 <= 10'h369;
      104: out3 <= 10'h368;
      105: out3 <= 10'h366;
      106: out3 <= 10'h365;
      107: out3 <= 10'h364;
      108: out3 <= 10'h363;
      109: out3 <= 10'h361;
      110: out3 <= 10'h360;
      111: out3 <= 10'h35f;
      112: out3 <= 10'h35e;
      113: out3 <= 10'h35c;
      114: out3 <= 10'h35b;
      115: out3 <= 10'h35a;
      116: out3 <= 10'h359;
      117: out3 <= 10'h358;
      118: out3 <= 10'h356;
      119: out3 <= 10'h355;
      120: out3 <= 10'h354;
      121: out3 <= 10'h353;
      122: out3 <= 10'h352;
      123: out3 <= 10'h351;
      124: out3 <= 10'h34f;
      125: out3 <= 10'h34e;
      126: out3 <= 10'h34d;
      127: out3 <= 10'h34c;
      128: out3 <= 10'h34b;
      129: out3 <= 10'h34a;
      130: out3 <= 10'h349;
      131: out3 <= 10'h348;
      132: out3 <= 10'h347;
      133: out3 <= 10'h346;
      134: out3 <= 10'h344;
      135: out3 <= 10'h343;
      136: out3 <= 10'h342;
      137: out3 <= 10'h341;
      138: out3 <= 10'h340;
      139: out3 <= 10'h33f;
      140: out3 <= 10'h33e;
      141: out3 <= 10'h33d;
      142: out3 <= 10'h33c;
      143: out3 <= 10'h33b;
      144: out3 <= 10'h33a;
      145: out3 <= 10'h339;
      146: out3 <= 10'h338;
      147: out3 <= 10'h337;
      148: out3 <= 10'h336;
      149: out3 <= 10'h335;
      150: out3 <= 10'h334;
      151: out3 <= 10'h333;
      152: out3 <= 10'h332;
      153: out3 <= 10'h331;
      154: out3 <= 10'h331;
      155: out3 <= 10'h330;
      156: out3 <= 10'h32f;
      157: out3 <= 10'h32e;
      158: out3 <= 10'h32d;
      159: out3 <= 10'h32c;
      160: out3 <= 10'h32b;
      161: out3 <= 10'h32a;
      162: out3 <= 10'h329;
      163: out3 <= 10'h329;
      164: out3 <= 10'h328;
      165: out3 <= 10'h327;
      166: out3 <= 10'h326;
      167: out3 <= 10'h325;
      168: out3 <= 10'h324;
      169: out3 <= 10'h324;
      170: out3 <= 10'h323;
      171: out3 <= 10'h322;
      172: out3 <= 10'h321;
      173: out3 <= 10'h320;
      174: out3 <= 10'h320;
      175: out3 <= 10'h31f;
      176: out3 <= 10'h31e;
      177: out3 <= 10'h31d;
      178: out3 <= 10'h31d;
      179: out3 <= 10'h31c;
      180: out3 <= 10'h31b;
      181: out3 <= 10'h31b;
      182: out3 <= 10'h31a;
      183: out3 <= 10'h319;
      184: out3 <= 10'h319;
      185: out3 <= 10'h318;
      186: out3 <= 10'h317;
      187: out3 <= 10'h317;
      188: out3 <= 10'h316;
      189: out3 <= 10'h315;
      190: out3 <= 10'h315;
      191: out3 <= 10'h314;
      192: out3 <= 10'h313;
      193: out3 <= 10'h313;
      194: out3 <= 10'h312;
      195: out3 <= 10'h312;
      196: out3 <= 10'h311;
      197: out3 <= 10'h311;
      198: out3 <= 10'h310;
      199: out3 <= 10'h30f;
      200: out3 <= 10'h30f;
      201: out3 <= 10'h30e;
      202: out3 <= 10'h30e;
      203: out3 <= 10'h30d;
      204: out3 <= 10'h30d;
      205: out3 <= 10'h30c;
      206: out3 <= 10'h30c;
      207: out3 <= 10'h30b;
      208: out3 <= 10'h30b;
      209: out3 <= 10'h30b;
      210: out3 <= 10'h30a;
      211: out3 <= 10'h30a;
      212: out3 <= 10'h309;
      213: out3 <= 10'h309;
      214: out3 <= 10'h308;
      215: out3 <= 10'h308;
      216: out3 <= 10'h308;
      217: out3 <= 10'h307;
      218: out3 <= 10'h307;
      219: out3 <= 10'h307;
      220: out3 <= 10'h306;
      221: out3 <= 10'h306;
      222: out3 <= 10'h306;
      223: out3 <= 10'h305;
      224: out3 <= 10'h305;
      225: out3 <= 10'h305;
      226: out3 <= 10'h304;
      227: out3 <= 10'h304;
      228: out3 <= 10'h304;
      229: out3 <= 10'h304;
      230: out3 <= 10'h303;
      231: out3 <= 10'h303;
      232: out3 <= 10'h303;
      233: out3 <= 10'h303;
      234: out3 <= 10'h302;
      235: out3 <= 10'h302;
      236: out3 <= 10'h302;
      237: out3 <= 10'h302;
      238: out3 <= 10'h302;
      239: out3 <= 10'h301;
      240: out3 <= 10'h301;
      241: out3 <= 10'h301;
      242: out3 <= 10'h301;
      243: out3 <= 10'h301;
      244: out3 <= 10'h301;
      245: out3 <= 10'h301;
      246: out3 <= 10'h300;
      247: out3 <= 10'h300;
      248: out3 <= 10'h300;
      249: out3 <= 10'h300;
      250: out3 <= 10'h300;
      251: out3 <= 10'h300;
      252: out3 <= 10'h300;
      253: out3 <= 10'h300;
      254: out3 <= 10'h300;
      255: out3 <= 10'h300;
      256: out3 <= 10'h300;
      257: out3 <= 10'h300;
      258: out3 <= 10'h300;
      259: out3 <= 10'h300;
      260: out3 <= 10'h300;
      261: out3 <= 10'h300;
      262: out3 <= 10'h300;
      263: out3 <= 10'h300;
      264: out3 <= 10'h300;
      265: out3 <= 10'h300;
      266: out3 <= 10'h300;
      267: out3 <= 10'h301;
      268: out3 <= 10'h301;
      269: out3 <= 10'h301;
      270: out3 <= 10'h301;
      271: out3 <= 10'h301;
      272: out3 <= 10'h301;
      273: out3 <= 10'h301;
      274: out3 <= 10'h302;
      275: out3 <= 10'h302;
      276: out3 <= 10'h302;
      277: out3 <= 10'h302;
      278: out3 <= 10'h302;
      279: out3 <= 10'h303;
      280: out3 <= 10'h303;
      281: out3 <= 10'h303;
      282: out3 <= 10'h303;
      283: out3 <= 10'h304;
      284: out3 <= 10'h304;
      285: out3 <= 10'h304;
      286: out3 <= 10'h304;
      287: out3 <= 10'h305;
      288: out3 <= 10'h305;
      289: out3 <= 10'h305;
      290: out3 <= 10'h306;
      291: out3 <= 10'h306;
      292: out3 <= 10'h306;
      293: out3 <= 10'h307;
      294: out3 <= 10'h307;
      295: out3 <= 10'h307;
      296: out3 <= 10'h308;
      297: out3 <= 10'h308;
      298: out3 <= 10'h308;
      299: out3 <= 10'h309;
      300: out3 <= 10'h309;
      301: out3 <= 10'h30a;
      302: out3 <= 10'h30a;
      303: out3 <= 10'h30b;
      304: out3 <= 10'h30b;
      305: out3 <= 10'h30b;
      306: out3 <= 10'h30c;
      307: out3 <= 10'h30c;
      308: out3 <= 10'h30d;
      309: out3 <= 10'h30d;
      310: out3 <= 10'h30e;
      311: out3 <= 10'h30e;
      312: out3 <= 10'h30f;
      313: out3 <= 10'h30f;
      314: out3 <= 10'h310;
      315: out3 <= 10'h311;
      316: out3 <= 10'h311;
      317: out3 <= 10'h312;
      318: out3 <= 10'h312;
      319: out3 <= 10'h313;
      320: out3 <= 10'h313;
      321: out3 <= 10'h314;
      322: out3 <= 10'h315;
      323: out3 <= 10'h315;
      324: out3 <= 10'h316;
      325: out3 <= 10'h317;
      326: out3 <= 10'h317;
      327: out3 <= 10'h318;
      328: out3 <= 10'h319;
      329: out3 <= 10'h319;
      330: out3 <= 10'h31a;
      331: out3 <= 10'h31b;
      332: out3 <= 10'h31b;
      333: out3 <= 10'h31c;
      334: out3 <= 10'h31d;
      335: out3 <= 10'h31d;
      336: out3 <= 10'h31e;
      337: out3 <= 10'h31f;
      338: out3 <= 10'h320;
      339: out3 <= 10'h320;
      340: out3 <= 10'h321;
      341: out3 <= 10'h322;
      342: out3 <= 10'h323;
      343: out3 <= 10'h324;
      344: out3 <= 10'h324;
      345: out3 <= 10'h325;
      346: out3 <= 10'h326;
      347: out3 <= 10'h327;
      348: out3 <= 10'h328;
      349: out3 <= 10'h329;
      350: out3 <= 10'h329;
      351: out3 <= 10'h32a;
      352: out3 <= 10'h32b;
      353: out3 <= 10'h32c;
      354: out3 <= 10'h32d;
      355: out3 <= 10'h32e;
      356: out3 <= 10'h32f;
      357: out3 <= 10'h330;
      358: out3 <= 10'h331;
      359: out3 <= 10'h331;
      360: out3 <= 10'h332;
      361: out3 <= 10'h333;
      362: out3 <= 10'h334;
      363: out3 <= 10'h335;
      364: out3 <= 10'h336;
      365: out3 <= 10'h337;
      366: out3 <= 10'h338;
      367: out3 <= 10'h339;
      368: out3 <= 10'h33a;
      369: out3 <= 10'h33b;
      370: out3 <= 10'h33c;
      371: out3 <= 10'h33d;
      372: out3 <= 10'h33e;
      373: out3 <= 10'h33f;
      374: out3 <= 10'h340;
      375: out3 <= 10'h341;
      376: out3 <= 10'h342;
      377: out3 <= 10'h343;
      378: out3 <= 10'h344;
      379: out3 <= 10'h346;
      380: out3 <= 10'h347;
      381: out3 <= 10'h348;
      382: out3 <= 10'h349;
      383: out3 <= 10'h34a;
      384: out3 <= 10'h34b;
      385: out3 <= 10'h34c;
      386: out3 <= 10'h34d;
      387: out3 <= 10'h34e;
      388: out3 <= 10'h34f;
      389: out3 <= 10'h351;
      390: out3 <= 10'h352;
      391: out3 <= 10'h353;
      392: out3 <= 10'h354;
      393: out3 <= 10'h355;
      394: out3 <= 10'h356;
      395: out3 <= 10'h358;
      396: out3 <= 10'h359;
      397: out3 <= 10'h35a;
      398: out3 <= 10'h35b;
      399: out3 <= 10'h35c;
      400: out3 <= 10'h35e;
      401: out3 <= 10'h35f;
      402: out3 <= 10'h360;
      403: out3 <= 10'h361;
      404: out3 <= 10'h363;
      405: out3 <= 10'h364;
      406: out3 <= 10'h365;
      407: out3 <= 10'h366;
      408: out3 <= 10'h368;
      409: out3 <= 10'h369;
      410: out3 <= 10'h36a;
      411: out3 <= 10'h36b;
      412: out3 <= 10'h36d;
      413: out3 <= 10'h36e;
      414: out3 <= 10'h36f;
      415: out3 <= 10'h370;
      416: out3 <= 10'h372;
      417: out3 <= 10'h373;
      418: out3 <= 10'h374;
      419: out3 <= 10'h376;
      420: out3 <= 10'h377;
      421: out3 <= 10'h378;
      422: out3 <= 10'h37a;
      423: out3 <= 10'h37b;
      424: out3 <= 10'h37c;
      425: out3 <= 10'h37e;
      426: out3 <= 10'h37f;
      427: out3 <= 10'h380;
      428: out3 <= 10'h382;
      429: out3 <= 10'h383;
      430: out3 <= 10'h385;
      431: out3 <= 10'h386;
      432: out3 <= 10'h387;
      433: out3 <= 10'h389;
      434: out3 <= 10'h38a;
      435: out3 <= 10'h38b;
      436: out3 <= 10'h38d;
      437: out3 <= 10'h38e;
      438: out3 <= 10'h390;
      439: out3 <= 10'h391;
      440: out3 <= 10'h393;
      441: out3 <= 10'h394;
      442: out3 <= 10'h395;
      443: out3 <= 10'h397;
      444: out3 <= 10'h398;
      445: out3 <= 10'h39a;
      446: out3 <= 10'h39b;
      447: out3 <= 10'h39d;
      448: out3 <= 10'h39e;
      449: out3 <= 10'h39f;
      450: out3 <= 10'h3a1;
      451: out3 <= 10'h3a2;
      452: out3 <= 10'h3a4;
      453: out3 <= 10'h3a5;
      454: out3 <= 10'h3a7;
      455: out3 <= 10'h3a8;
      456: out3 <= 10'h3aa;
      457: out3 <= 10'h3ab;
      458: out3 <= 10'h3ad;
      459: out3 <= 10'h3ae;
      460: out3 <= 10'h3b0;
      461: out3 <= 10'h3b1;
      462: out3 <= 10'h3b3;
      463: out3 <= 10'h3b4;
      464: out3 <= 10'h3b6;
      465: out3 <= 10'h3b7;
      466: out3 <= 10'h3b9;
      467: out3 <= 10'h3ba;
      468: out3 <= 10'h3bc;
      469: out3 <= 10'h3bd;
      470: out3 <= 10'h3bf;
      471: out3 <= 10'h3c0;
      472: out3 <= 10'h3c2;
      473: out3 <= 10'h3c3;
      474: out3 <= 10'h3c5;
      475: out3 <= 10'h3c6;
      476: out3 <= 10'h3c8;
      477: out3 <= 10'h3c9;
      478: out3 <= 10'h3cb;
      479: out3 <= 10'h3cd;
      480: out3 <= 10'h3ce;
      481: out3 <= 10'h3d0;
      482: out3 <= 10'h3d1;
      483: out3 <= 10'h3d3;
      484: out3 <= 10'h3d4;
      485: out3 <= 10'h3d6;
      486: out3 <= 10'h3d7;
      487: out3 <= 10'h3d9;
      488: out3 <= 10'h3da;
      489: out3 <= 10'h3dc;
      490: out3 <= 10'h3de;
      491: out3 <= 10'h3df;
      492: out3 <= 10'h3e1;
      493: out3 <= 10'h3e2;
      494: out3 <= 10'h3e4;
      495: out3 <= 10'h3e5;
      496: out3 <= 10'h3e7;
      497: out3 <= 10'h3e8;
      498: out3 <= 10'h3ea;
      499: out3 <= 10'h3ec;
      500: out3 <= 10'h3ed;
      501: out3 <= 10'h3ef;
      502: out3 <= 10'h3f0;
      503: out3 <= 10'h3f2;
      504: out3 <= 10'h3f3;
      505: out3 <= 10'h3f5;
      506: out3 <= 10'h3f7;
      507: out3 <= 10'h3f8;
      508: out3 <= 10'h3fa;
      509: out3 <= 10'h3fb;
      510: out3 <= 10'h3fd;
      511: out3 <= 10'h3fe;
      512: out3 <= 10'h0;
      513: out3 <= 10'h3fd;
      514: out3 <= 10'h3fa;
      515: out3 <= 10'h3f7;
      516: out3 <= 10'h3f3;
      517: out3 <= 10'h3f0;
      518: out3 <= 10'h3ed;
      519: out3 <= 10'h3ea;
      520: out3 <= 10'h3e7;
      521: out3 <= 10'h3e4;
      522: out3 <= 10'h3e1;
      523: out3 <= 10'h3de;
      524: out3 <= 10'h3da;
      525: out3 <= 10'h3d7;
      526: out3 <= 10'h3d4;
      527: out3 <= 10'h3d1;
      528: out3 <= 10'h3ce;
      529: out3 <= 10'h3cb;
      530: out3 <= 10'h3c8;
      531: out3 <= 10'h3c5;
      532: out3 <= 10'h3c2;
      533: out3 <= 10'h3bf;
      534: out3 <= 10'h3bc;
      535: out3 <= 10'h3b9;
      536: out3 <= 10'h3b6;
      537: out3 <= 10'h3b3;
      538: out3 <= 10'h3b0;
      539: out3 <= 10'h3ad;
      540: out3 <= 10'h3aa;
      541: out3 <= 10'h3a7;
      542: out3 <= 10'h3a4;
      543: out3 <= 10'h3a1;
      544: out3 <= 10'h39e;
      545: out3 <= 10'h39b;
      546: out3 <= 10'h398;
      547: out3 <= 10'h395;
      548: out3 <= 10'h393;
      549: out3 <= 10'h390;
      550: out3 <= 10'h38d;
      551: out3 <= 10'h38a;
      552: out3 <= 10'h387;
      553: out3 <= 10'h385;
      554: out3 <= 10'h382;
      555: out3 <= 10'h37f;
      556: out3 <= 10'h37c;
      557: out3 <= 10'h37a;
      558: out3 <= 10'h377;
      559: out3 <= 10'h374;
      560: out3 <= 10'h372;
      561: out3 <= 10'h36f;
      562: out3 <= 10'h36d;
      563: out3 <= 10'h36a;
      564: out3 <= 10'h368;
      565: out3 <= 10'h365;
      566: out3 <= 10'h363;
      567: out3 <= 10'h360;
      568: out3 <= 10'h35e;
      569: out3 <= 10'h35b;
      570: out3 <= 10'h359;
      571: out3 <= 10'h356;
      572: out3 <= 10'h354;
      573: out3 <= 10'h352;
      574: out3 <= 10'h34f;
      575: out3 <= 10'h34d;
      576: out3 <= 10'h34b;
      577: out3 <= 10'h349;
      578: out3 <= 10'h347;
      579: out3 <= 10'h344;
      580: out3 <= 10'h342;
      581: out3 <= 10'h340;
      582: out3 <= 10'h33e;
      583: out3 <= 10'h33c;
      584: out3 <= 10'h33a;
      585: out3 <= 10'h338;
      586: out3 <= 10'h336;
      587: out3 <= 10'h334;
      588: out3 <= 10'h332;
      589: out3 <= 10'h331;
      590: out3 <= 10'h32f;
      591: out3 <= 10'h32d;
      592: out3 <= 10'h32b;
      593: out3 <= 10'h329;
      594: out3 <= 10'h328;
      595: out3 <= 10'h326;
      596: out3 <= 10'h324;
      597: out3 <= 10'h323;
      598: out3 <= 10'h321;
      599: out3 <= 10'h320;
      600: out3 <= 10'h31e;
      601: out3 <= 10'h31d;
      602: out3 <= 10'h31b;
      603: out3 <= 10'h31a;
      604: out3 <= 10'h319;
      605: out3 <= 10'h317;
      606: out3 <= 10'h316;
      607: out3 <= 10'h315;
      608: out3 <= 10'h313;
      609: out3 <= 10'h312;
      610: out3 <= 10'h311;
      611: out3 <= 10'h310;
      612: out3 <= 10'h30f;
      613: out3 <= 10'h30e;
      614: out3 <= 10'h30d;
      615: out3 <= 10'h30c;
      616: out3 <= 10'h30b;
      617: out3 <= 10'h30a;
      618: out3 <= 10'h309;
      619: out3 <= 10'h308;
      620: out3 <= 10'h308;
      621: out3 <= 10'h307;
      622: out3 <= 10'h306;
      623: out3 <= 10'h306;
      624: out3 <= 10'h305;
      625: out3 <= 10'h304;
      626: out3 <= 10'h304;
      627: out3 <= 10'h303;
      628: out3 <= 10'h303;
      629: out3 <= 10'h302;
      630: out3 <= 10'h302;
      631: out3 <= 10'h302;
      632: out3 <= 10'h301;
      633: out3 <= 10'h301;
      634: out3 <= 10'h301;
      635: out3 <= 10'h300;
      636: out3 <= 10'h300;
      637: out3 <= 10'h300;
      638: out3 <= 10'h300;
      639: out3 <= 10'h300;
      640: out3 <= 10'h300;
      641: out3 <= 10'h300;
      642: out3 <= 10'h300;
      643: out3 <= 10'h300;
      644: out3 <= 10'h300;
      645: out3 <= 10'h300;
      646: out3 <= 10'h301;
      647: out3 <= 10'h301;
      648: out3 <= 10'h301;
      649: out3 <= 10'h302;
      650: out3 <= 10'h302;
      651: out3 <= 10'h302;
      652: out3 <= 10'h303;
      653: out3 <= 10'h303;
      654: out3 <= 10'h304;
      655: out3 <= 10'h304;
      656: out3 <= 10'h305;
      657: out3 <= 10'h306;
      658: out3 <= 10'h306;
      659: out3 <= 10'h307;
      660: out3 <= 10'h308;
      661: out3 <= 10'h308;
      662: out3 <= 10'h309;
      663: out3 <= 10'h30a;
      664: out3 <= 10'h30b;
      665: out3 <= 10'h30c;
      666: out3 <= 10'h30d;
      667: out3 <= 10'h30e;
      668: out3 <= 10'h30f;
      669: out3 <= 10'h310;
      670: out3 <= 10'h311;
      671: out3 <= 10'h312;
      672: out3 <= 10'h313;
      673: out3 <= 10'h315;
      674: out3 <= 10'h316;
      675: out3 <= 10'h317;
      676: out3 <= 10'h319;
      677: out3 <= 10'h31a;
      678: out3 <= 10'h31b;
      679: out3 <= 10'h31d;
      680: out3 <= 10'h31e;
      681: out3 <= 10'h320;
      682: out3 <= 10'h321;
      683: out3 <= 10'h323;
      684: out3 <= 10'h324;
      685: out3 <= 10'h326;
      686: out3 <= 10'h328;
      687: out3 <= 10'h329;
      688: out3 <= 10'h32b;
      689: out3 <= 10'h32d;
      690: out3 <= 10'h32f;
      691: out3 <= 10'h331;
      692: out3 <= 10'h332;
      693: out3 <= 10'h334;
      694: out3 <= 10'h336;
      695: out3 <= 10'h338;
      696: out3 <= 10'h33a;
      697: out3 <= 10'h33c;
      698: out3 <= 10'h33e;
      699: out3 <= 10'h340;
      700: out3 <= 10'h342;
      701: out3 <= 10'h344;
      702: out3 <= 10'h347;
      703: out3 <= 10'h349;
      704: out3 <= 10'h34b;
      705: out3 <= 10'h34d;
      706: out3 <= 10'h34f;
      707: out3 <= 10'h352;
      708: out3 <= 10'h354;
      709: out3 <= 10'h356;
      710: out3 <= 10'h359;
      711: out3 <= 10'h35b;
      712: out3 <= 10'h35e;
      713: out3 <= 10'h360;
      714: out3 <= 10'h363;
      715: out3 <= 10'h365;
      716: out3 <= 10'h368;
      717: out3 <= 10'h36a;
      718: out3 <= 10'h36d;
      719: out3 <= 10'h36f;
      720: out3 <= 10'h372;
      721: out3 <= 10'h374;
      722: out3 <= 10'h377;
      723: out3 <= 10'h37a;
      724: out3 <= 10'h37c;
      725: out3 <= 10'h37f;
      726: out3 <= 10'h382;
      727: out3 <= 10'h385;
      728: out3 <= 10'h387;
      729: out3 <= 10'h38a;
      730: out3 <= 10'h38d;
      731: out3 <= 10'h390;
      732: out3 <= 10'h393;
      733: out3 <= 10'h395;
      734: out3 <= 10'h398;
      735: out3 <= 10'h39b;
      736: out3 <= 10'h39e;
      737: out3 <= 10'h3a1;
      738: out3 <= 10'h3a4;
      739: out3 <= 10'h3a7;
      740: out3 <= 10'h3aa;
      741: out3 <= 10'h3ad;
      742: out3 <= 10'h3b0;
      743: out3 <= 10'h3b3;
      744: out3 <= 10'h3b6;
      745: out3 <= 10'h3b9;
      746: out3 <= 10'h3bc;
      747: out3 <= 10'h3bf;
      748: out3 <= 10'h3c2;
      749: out3 <= 10'h3c5;
      750: out3 <= 10'h3c8;
      751: out3 <= 10'h3cb;
      752: out3 <= 10'h3ce;
      753: out3 <= 10'h3d1;
      754: out3 <= 10'h3d4;
      755: out3 <= 10'h3d7;
      756: out3 <= 10'h3da;
      757: out3 <= 10'h3de;
      758: out3 <= 10'h3e1;
      759: out3 <= 10'h3e4;
      760: out3 <= 10'h3e7;
      761: out3 <= 10'h3ea;
      762: out3 <= 10'h3ed;
      763: out3 <= 10'h3f0;
      764: out3 <= 10'h3f3;
      765: out3 <= 10'h3f7;
      766: out3 <= 10'h3fa;
      767: out3 <= 10'h3fd;
      768: out3 <= 10'h0;
      769: out3 <= 10'h3;
      770: out3 <= 10'h6;
      771: out3 <= 10'h9;
      772: out3 <= 10'hd;
      773: out3 <= 10'h10;
      774: out3 <= 10'h13;
      775: out3 <= 10'h16;
      776: out3 <= 10'h19;
      777: out3 <= 10'h1c;
      778: out3 <= 10'h1f;
      779: out3 <= 10'h22;
      780: out3 <= 10'h26;
      781: out3 <= 10'h29;
      782: out3 <= 10'h2c;
      783: out3 <= 10'h2f;
      784: out3 <= 10'h32;
      785: out3 <= 10'h35;
      786: out3 <= 10'h38;
      787: out3 <= 10'h3b;
      788: out3 <= 10'h3e;
      789: out3 <= 10'h41;
      790: out3 <= 10'h44;
      791: out3 <= 10'h47;
      792: out3 <= 10'h4a;
      793: out3 <= 10'h4d;
      794: out3 <= 10'h50;
      795: out3 <= 10'h53;
      796: out3 <= 10'h56;
      797: out3 <= 10'h59;
      798: out3 <= 10'h5c;
      799: out3 <= 10'h5f;
      800: out3 <= 10'h62;
      801: out3 <= 10'h65;
      802: out3 <= 10'h68;
      803: out3 <= 10'h6b;
      804: out3 <= 10'h6d;
      805: out3 <= 10'h70;
      806: out3 <= 10'h73;
      807: out3 <= 10'h76;
      808: out3 <= 10'h79;
      809: out3 <= 10'h7b;
      810: out3 <= 10'h7e;
      811: out3 <= 10'h81;
      812: out3 <= 10'h84;
      813: out3 <= 10'h86;
      814: out3 <= 10'h89;
      815: out3 <= 10'h8c;
      816: out3 <= 10'h8e;
      817: out3 <= 10'h91;
      818: out3 <= 10'h93;
      819: out3 <= 10'h96;
      820: out3 <= 10'h98;
      821: out3 <= 10'h9b;
      822: out3 <= 10'h9d;
      823: out3 <= 10'ha0;
      824: out3 <= 10'ha2;
      825: out3 <= 10'ha5;
      826: out3 <= 10'ha7;
      827: out3 <= 10'haa;
      828: out3 <= 10'hac;
      829: out3 <= 10'hae;
      830: out3 <= 10'hb1;
      831: out3 <= 10'hb3;
      832: out3 <= 10'hb5;
      833: out3 <= 10'hb7;
      834: out3 <= 10'hb9;
      835: out3 <= 10'hbc;
      836: out3 <= 10'hbe;
      837: out3 <= 10'hc0;
      838: out3 <= 10'hc2;
      839: out3 <= 10'hc4;
      840: out3 <= 10'hc6;
      841: out3 <= 10'hc8;
      842: out3 <= 10'hca;
      843: out3 <= 10'hcc;
      844: out3 <= 10'hce;
      845: out3 <= 10'hcf;
      846: out3 <= 10'hd1;
      847: out3 <= 10'hd3;
      848: out3 <= 10'hd5;
      849: out3 <= 10'hd7;
      850: out3 <= 10'hd8;
      851: out3 <= 10'hda;
      852: out3 <= 10'hdc;
      853: out3 <= 10'hdd;
      854: out3 <= 10'hdf;
      855: out3 <= 10'he0;
      856: out3 <= 10'he2;
      857: out3 <= 10'he3;
      858: out3 <= 10'he5;
      859: out3 <= 10'he6;
      860: out3 <= 10'he7;
      861: out3 <= 10'he9;
      862: out3 <= 10'hea;
      863: out3 <= 10'heb;
      864: out3 <= 10'hed;
      865: out3 <= 10'hee;
      866: out3 <= 10'hef;
      867: out3 <= 10'hf0;
      868: out3 <= 10'hf1;
      869: out3 <= 10'hf2;
      870: out3 <= 10'hf3;
      871: out3 <= 10'hf4;
      872: out3 <= 10'hf5;
      873: out3 <= 10'hf6;
      874: out3 <= 10'hf7;
      875: out3 <= 10'hf8;
      876: out3 <= 10'hf8;
      877: out3 <= 10'hf9;
      878: out3 <= 10'hfa;
      879: out3 <= 10'hfa;
      880: out3 <= 10'hfb;
      881: out3 <= 10'hfc;
      882: out3 <= 10'hfc;
      883: out3 <= 10'hfd;
      884: out3 <= 10'hfd;
      885: out3 <= 10'hfe;
      886: out3 <= 10'hfe;
      887: out3 <= 10'hfe;
      888: out3 <= 10'hff;
      889: out3 <= 10'hff;
      890: out3 <= 10'hff;
      891: out3 <= 10'h100;
      892: out3 <= 10'h100;
      893: out3 <= 10'h100;
      894: out3 <= 10'h100;
      895: out3 <= 10'h100;
      896: out3 <= 10'h100;
      897: out3 <= 10'h100;
      898: out3 <= 10'h100;
      899: out3 <= 10'h100;
      900: out3 <= 10'h100;
      901: out3 <= 10'h100;
      902: out3 <= 10'hff;
      903: out3 <= 10'hff;
      904: out3 <= 10'hff;
      905: out3 <= 10'hfe;
      906: out3 <= 10'hfe;
      907: out3 <= 10'hfe;
      908: out3 <= 10'hfd;
      909: out3 <= 10'hfd;
      910: out3 <= 10'hfc;
      911: out3 <= 10'hfc;
      912: out3 <= 10'hfb;
      913: out3 <= 10'hfa;
      914: out3 <= 10'hfa;
      915: out3 <= 10'hf9;
      916: out3 <= 10'hf8;
      917: out3 <= 10'hf8;
      918: out3 <= 10'hf7;
      919: out3 <= 10'hf6;
      920: out3 <= 10'hf5;
      921: out3 <= 10'hf4;
      922: out3 <= 10'hf3;
      923: out3 <= 10'hf2;
      924: out3 <= 10'hf1;
      925: out3 <= 10'hf0;
      926: out3 <= 10'hef;
      927: out3 <= 10'hee;
      928: out3 <= 10'hed;
      929: out3 <= 10'heb;
      930: out3 <= 10'hea;
      931: out3 <= 10'he9;
      932: out3 <= 10'he7;
      933: out3 <= 10'he6;
      934: out3 <= 10'he5;
      935: out3 <= 10'he3;
      936: out3 <= 10'he2;
      937: out3 <= 10'he0;
      938: out3 <= 10'hdf;
      939: out3 <= 10'hdd;
      940: out3 <= 10'hdc;
      941: out3 <= 10'hda;
      942: out3 <= 10'hd8;
      943: out3 <= 10'hd7;
      944: out3 <= 10'hd5;
      945: out3 <= 10'hd3;
      946: out3 <= 10'hd1;
      947: out3 <= 10'hcf;
      948: out3 <= 10'hce;
      949: out3 <= 10'hcc;
      950: out3 <= 10'hca;
      951: out3 <= 10'hc8;
      952: out3 <= 10'hc6;
      953: out3 <= 10'hc4;
      954: out3 <= 10'hc2;
      955: out3 <= 10'hc0;
      956: out3 <= 10'hbe;
      957: out3 <= 10'hbc;
      958: out3 <= 10'hb9;
      959: out3 <= 10'hb7;
      960: out3 <= 10'hb5;
      961: out3 <= 10'hb3;
      962: out3 <= 10'hb1;
      963: out3 <= 10'hae;
      964: out3 <= 10'hac;
      965: out3 <= 10'haa;
      966: out3 <= 10'ha7;
      967: out3 <= 10'ha5;
      968: out3 <= 10'ha2;
      969: out3 <= 10'ha0;
      970: out3 <= 10'h9d;
      971: out3 <= 10'h9b;
      972: out3 <= 10'h98;
      973: out3 <= 10'h96;
      974: out3 <= 10'h93;
      975: out3 <= 10'h91;
      976: out3 <= 10'h8e;
      977: out3 <= 10'h8c;
      978: out3 <= 10'h89;
      979: out3 <= 10'h86;
      980: out3 <= 10'h84;
      981: out3 <= 10'h81;
      982: out3 <= 10'h7e;
      983: out3 <= 10'h7b;
      984: out3 <= 10'h79;
      985: out3 <= 10'h76;
      986: out3 <= 10'h73;
      987: out3 <= 10'h70;
      988: out3 <= 10'h6d;
      989: out3 <= 10'h6b;
      990: out3 <= 10'h68;
      991: out3 <= 10'h65;
      992: out3 <= 10'h62;
      993: out3 <= 10'h5f;
      994: out3 <= 10'h5c;
      995: out3 <= 10'h59;
      996: out3 <= 10'h56;
      997: out3 <= 10'h53;
      998: out3 <= 10'h50;
      999: out3 <= 10'h4d;
      1000: out3 <= 10'h4a;
      1001: out3 <= 10'h47;
      1002: out3 <= 10'h44;
      1003: out3 <= 10'h41;
      1004: out3 <= 10'h3e;
      1005: out3 <= 10'h3b;
      1006: out3 <= 10'h38;
      1007: out3 <= 10'h35;
      1008: out3 <= 10'h32;
      1009: out3 <= 10'h2f;
      1010: out3 <= 10'h2c;
      1011: out3 <= 10'h29;
      1012: out3 <= 10'h26;
      1013: out3 <= 10'h22;
      1014: out3 <= 10'h1f;
      1015: out3 <= 10'h1c;
      1016: out3 <= 10'h19;
      1017: out3 <= 10'h16;
      1018: out3 <= 10'h13;
      1019: out3 <= 10'h10;
      1020: out3 <= 10'hd;
      1021: out3 <= 10'h9;
      1022: out3 <= 10'h6;
      1023: out3 <= 10'h3;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D1_16308(addr, out, clk);
   input clk;
   output [9:0] out;
   reg [9:0] out, out2, out3;
   input [9:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 10'h100;
      1: out3 <= 10'h100;
      2: out3 <= 10'h100;
      3: out3 <= 10'h100;
      4: out3 <= 10'h100;
      5: out3 <= 10'h100;
      6: out3 <= 10'h100;
      7: out3 <= 10'h100;
      8: out3 <= 10'h100;
      9: out3 <= 10'h100;
      10: out3 <= 10'h100;
      11: out3 <= 10'hff;
      12: out3 <= 10'hff;
      13: out3 <= 10'hff;
      14: out3 <= 10'hff;
      15: out3 <= 10'hff;
      16: out3 <= 10'hff;
      17: out3 <= 10'hff;
      18: out3 <= 10'hfe;
      19: out3 <= 10'hfe;
      20: out3 <= 10'hfe;
      21: out3 <= 10'hfe;
      22: out3 <= 10'hfe;
      23: out3 <= 10'hfd;
      24: out3 <= 10'hfd;
      25: out3 <= 10'hfd;
      26: out3 <= 10'hfd;
      27: out3 <= 10'hfc;
      28: out3 <= 10'hfc;
      29: out3 <= 10'hfc;
      30: out3 <= 10'hfc;
      31: out3 <= 10'hfb;
      32: out3 <= 10'hfb;
      33: out3 <= 10'hfb;
      34: out3 <= 10'hfa;
      35: out3 <= 10'hfa;
      36: out3 <= 10'hfa;
      37: out3 <= 10'hf9;
      38: out3 <= 10'hf9;
      39: out3 <= 10'hf9;
      40: out3 <= 10'hf8;
      41: out3 <= 10'hf8;
      42: out3 <= 10'hf8;
      43: out3 <= 10'hf7;
      44: out3 <= 10'hf7;
      45: out3 <= 10'hf6;
      46: out3 <= 10'hf6;
      47: out3 <= 10'hf5;
      48: out3 <= 10'hf5;
      49: out3 <= 10'hf5;
      50: out3 <= 10'hf4;
      51: out3 <= 10'hf4;
      52: out3 <= 10'hf3;
      53: out3 <= 10'hf3;
      54: out3 <= 10'hf2;
      55: out3 <= 10'hf2;
      56: out3 <= 10'hf1;
      57: out3 <= 10'hf1;
      58: out3 <= 10'hf0;
      59: out3 <= 10'hef;
      60: out3 <= 10'hef;
      61: out3 <= 10'hee;
      62: out3 <= 10'hee;
      63: out3 <= 10'hed;
      64: out3 <= 10'hed;
      65: out3 <= 10'hec;
      66: out3 <= 10'heb;
      67: out3 <= 10'heb;
      68: out3 <= 10'hea;
      69: out3 <= 10'he9;
      70: out3 <= 10'he9;
      71: out3 <= 10'he8;
      72: out3 <= 10'he7;
      73: out3 <= 10'he7;
      74: out3 <= 10'he6;
      75: out3 <= 10'he5;
      76: out3 <= 10'he5;
      77: out3 <= 10'he4;
      78: out3 <= 10'he3;
      79: out3 <= 10'he3;
      80: out3 <= 10'he2;
      81: out3 <= 10'he1;
      82: out3 <= 10'he0;
      83: out3 <= 10'he0;
      84: out3 <= 10'hdf;
      85: out3 <= 10'hde;
      86: out3 <= 10'hdd;
      87: out3 <= 10'hdc;
      88: out3 <= 10'hdc;
      89: out3 <= 10'hdb;
      90: out3 <= 10'hda;
      91: out3 <= 10'hd9;
      92: out3 <= 10'hd8;
      93: out3 <= 10'hd7;
      94: out3 <= 10'hd7;
      95: out3 <= 10'hd6;
      96: out3 <= 10'hd5;
      97: out3 <= 10'hd4;
      98: out3 <= 10'hd3;
      99: out3 <= 10'hd2;
      100: out3 <= 10'hd1;
      101: out3 <= 10'hd0;
      102: out3 <= 10'hcf;
      103: out3 <= 10'hcf;
      104: out3 <= 10'hce;
      105: out3 <= 10'hcd;
      106: out3 <= 10'hcc;
      107: out3 <= 10'hcb;
      108: out3 <= 10'hca;
      109: out3 <= 10'hc9;
      110: out3 <= 10'hc8;
      111: out3 <= 10'hc7;
      112: out3 <= 10'hc6;
      113: out3 <= 10'hc5;
      114: out3 <= 10'hc4;
      115: out3 <= 10'hc3;
      116: out3 <= 10'hc2;
      117: out3 <= 10'hc1;
      118: out3 <= 10'hc0;
      119: out3 <= 10'hbf;
      120: out3 <= 10'hbe;
      121: out3 <= 10'hbd;
      122: out3 <= 10'hbc;
      123: out3 <= 10'hba;
      124: out3 <= 10'hb9;
      125: out3 <= 10'hb8;
      126: out3 <= 10'hb7;
      127: out3 <= 10'hb6;
      128: out3 <= 10'hb5;
      129: out3 <= 10'hb4;
      130: out3 <= 10'hb3;
      131: out3 <= 10'hb2;
      132: out3 <= 10'hb1;
      133: out3 <= 10'haf;
      134: out3 <= 10'hae;
      135: out3 <= 10'had;
      136: out3 <= 10'hac;
      137: out3 <= 10'hab;
      138: out3 <= 10'haa;
      139: out3 <= 10'ha8;
      140: out3 <= 10'ha7;
      141: out3 <= 10'ha6;
      142: out3 <= 10'ha5;
      143: out3 <= 10'ha4;
      144: out3 <= 10'ha2;
      145: out3 <= 10'ha1;
      146: out3 <= 10'ha0;
      147: out3 <= 10'h9f;
      148: out3 <= 10'h9d;
      149: out3 <= 10'h9c;
      150: out3 <= 10'h9b;
      151: out3 <= 10'h9a;
      152: out3 <= 10'h98;
      153: out3 <= 10'h97;
      154: out3 <= 10'h96;
      155: out3 <= 10'h95;
      156: out3 <= 10'h93;
      157: out3 <= 10'h92;
      158: out3 <= 10'h91;
      159: out3 <= 10'h90;
      160: out3 <= 10'h8e;
      161: out3 <= 10'h8d;
      162: out3 <= 10'h8c;
      163: out3 <= 10'h8a;
      164: out3 <= 10'h89;
      165: out3 <= 10'h88;
      166: out3 <= 10'h86;
      167: out3 <= 10'h85;
      168: out3 <= 10'h84;
      169: out3 <= 10'h82;
      170: out3 <= 10'h81;
      171: out3 <= 10'h80;
      172: out3 <= 10'h7e;
      173: out3 <= 10'h7d;
      174: out3 <= 10'h7b;
      175: out3 <= 10'h7a;
      176: out3 <= 10'h79;
      177: out3 <= 10'h77;
      178: out3 <= 10'h76;
      179: out3 <= 10'h75;
      180: out3 <= 10'h73;
      181: out3 <= 10'h72;
      182: out3 <= 10'h70;
      183: out3 <= 10'h6f;
      184: out3 <= 10'h6d;
      185: out3 <= 10'h6c;
      186: out3 <= 10'h6b;
      187: out3 <= 10'h69;
      188: out3 <= 10'h68;
      189: out3 <= 10'h66;
      190: out3 <= 10'h65;
      191: out3 <= 10'h63;
      192: out3 <= 10'h62;
      193: out3 <= 10'h61;
      194: out3 <= 10'h5f;
      195: out3 <= 10'h5e;
      196: out3 <= 10'h5c;
      197: out3 <= 10'h5b;
      198: out3 <= 10'h59;
      199: out3 <= 10'h58;
      200: out3 <= 10'h56;
      201: out3 <= 10'h55;
      202: out3 <= 10'h53;
      203: out3 <= 10'h52;
      204: out3 <= 10'h50;
      205: out3 <= 10'h4f;
      206: out3 <= 10'h4d;
      207: out3 <= 10'h4c;
      208: out3 <= 10'h4a;
      209: out3 <= 10'h49;
      210: out3 <= 10'h47;
      211: out3 <= 10'h46;
      212: out3 <= 10'h44;
      213: out3 <= 10'h43;
      214: out3 <= 10'h41;
      215: out3 <= 10'h40;
      216: out3 <= 10'h3e;
      217: out3 <= 10'h3d;
      218: out3 <= 10'h3b;
      219: out3 <= 10'h3a;
      220: out3 <= 10'h38;
      221: out3 <= 10'h37;
      222: out3 <= 10'h35;
      223: out3 <= 10'h33;
      224: out3 <= 10'h32;
      225: out3 <= 10'h30;
      226: out3 <= 10'h2f;
      227: out3 <= 10'h2d;
      228: out3 <= 10'h2c;
      229: out3 <= 10'h2a;
      230: out3 <= 10'h29;
      231: out3 <= 10'h27;
      232: out3 <= 10'h26;
      233: out3 <= 10'h24;
      234: out3 <= 10'h22;
      235: out3 <= 10'h21;
      236: out3 <= 10'h1f;
      237: out3 <= 10'h1e;
      238: out3 <= 10'h1c;
      239: out3 <= 10'h1b;
      240: out3 <= 10'h19;
      241: out3 <= 10'h18;
      242: out3 <= 10'h16;
      243: out3 <= 10'h14;
      244: out3 <= 10'h13;
      245: out3 <= 10'h11;
      246: out3 <= 10'h10;
      247: out3 <= 10'he;
      248: out3 <= 10'hd;
      249: out3 <= 10'hb;
      250: out3 <= 10'h9;
      251: out3 <= 10'h8;
      252: out3 <= 10'h6;
      253: out3 <= 10'h5;
      254: out3 <= 10'h3;
      255: out3 <= 10'h2;
      256: out3 <= 10'h0;
      257: out3 <= 10'h3fe;
      258: out3 <= 10'h3fd;
      259: out3 <= 10'h3fb;
      260: out3 <= 10'h3fa;
      261: out3 <= 10'h3f8;
      262: out3 <= 10'h3f7;
      263: out3 <= 10'h3f5;
      264: out3 <= 10'h3f3;
      265: out3 <= 10'h3f2;
      266: out3 <= 10'h3f0;
      267: out3 <= 10'h3ef;
      268: out3 <= 10'h3ed;
      269: out3 <= 10'h3ec;
      270: out3 <= 10'h3ea;
      271: out3 <= 10'h3e8;
      272: out3 <= 10'h3e7;
      273: out3 <= 10'h3e5;
      274: out3 <= 10'h3e4;
      275: out3 <= 10'h3e2;
      276: out3 <= 10'h3e1;
      277: out3 <= 10'h3df;
      278: out3 <= 10'h3de;
      279: out3 <= 10'h3dc;
      280: out3 <= 10'h3da;
      281: out3 <= 10'h3d9;
      282: out3 <= 10'h3d7;
      283: out3 <= 10'h3d6;
      284: out3 <= 10'h3d4;
      285: out3 <= 10'h3d3;
      286: out3 <= 10'h3d1;
      287: out3 <= 10'h3d0;
      288: out3 <= 10'h3ce;
      289: out3 <= 10'h3cd;
      290: out3 <= 10'h3cb;
      291: out3 <= 10'h3c9;
      292: out3 <= 10'h3c8;
      293: out3 <= 10'h3c6;
      294: out3 <= 10'h3c5;
      295: out3 <= 10'h3c3;
      296: out3 <= 10'h3c2;
      297: out3 <= 10'h3c0;
      298: out3 <= 10'h3bf;
      299: out3 <= 10'h3bd;
      300: out3 <= 10'h3bc;
      301: out3 <= 10'h3ba;
      302: out3 <= 10'h3b9;
      303: out3 <= 10'h3b7;
      304: out3 <= 10'h3b6;
      305: out3 <= 10'h3b4;
      306: out3 <= 10'h3b3;
      307: out3 <= 10'h3b1;
      308: out3 <= 10'h3b0;
      309: out3 <= 10'h3ae;
      310: out3 <= 10'h3ad;
      311: out3 <= 10'h3ab;
      312: out3 <= 10'h3aa;
      313: out3 <= 10'h3a8;
      314: out3 <= 10'h3a7;
      315: out3 <= 10'h3a5;
      316: out3 <= 10'h3a4;
      317: out3 <= 10'h3a2;
      318: out3 <= 10'h3a1;
      319: out3 <= 10'h39f;
      320: out3 <= 10'h39e;
      321: out3 <= 10'h39d;
      322: out3 <= 10'h39b;
      323: out3 <= 10'h39a;
      324: out3 <= 10'h398;
      325: out3 <= 10'h397;
      326: out3 <= 10'h395;
      327: out3 <= 10'h394;
      328: out3 <= 10'h393;
      329: out3 <= 10'h391;
      330: out3 <= 10'h390;
      331: out3 <= 10'h38e;
      332: out3 <= 10'h38d;
      333: out3 <= 10'h38b;
      334: out3 <= 10'h38a;
      335: out3 <= 10'h389;
      336: out3 <= 10'h387;
      337: out3 <= 10'h386;
      338: out3 <= 10'h385;
      339: out3 <= 10'h383;
      340: out3 <= 10'h382;
      341: out3 <= 10'h380;
      342: out3 <= 10'h37f;
      343: out3 <= 10'h37e;
      344: out3 <= 10'h37c;
      345: out3 <= 10'h37b;
      346: out3 <= 10'h37a;
      347: out3 <= 10'h378;
      348: out3 <= 10'h377;
      349: out3 <= 10'h376;
      350: out3 <= 10'h374;
      351: out3 <= 10'h373;
      352: out3 <= 10'h372;
      353: out3 <= 10'h370;
      354: out3 <= 10'h36f;
      355: out3 <= 10'h36e;
      356: out3 <= 10'h36d;
      357: out3 <= 10'h36b;
      358: out3 <= 10'h36a;
      359: out3 <= 10'h369;
      360: out3 <= 10'h368;
      361: out3 <= 10'h366;
      362: out3 <= 10'h365;
      363: out3 <= 10'h364;
      364: out3 <= 10'h363;
      365: out3 <= 10'h361;
      366: out3 <= 10'h360;
      367: out3 <= 10'h35f;
      368: out3 <= 10'h35e;
      369: out3 <= 10'h35c;
      370: out3 <= 10'h35b;
      371: out3 <= 10'h35a;
      372: out3 <= 10'h359;
      373: out3 <= 10'h358;
      374: out3 <= 10'h356;
      375: out3 <= 10'h355;
      376: out3 <= 10'h354;
      377: out3 <= 10'h353;
      378: out3 <= 10'h352;
      379: out3 <= 10'h351;
      380: out3 <= 10'h34f;
      381: out3 <= 10'h34e;
      382: out3 <= 10'h34d;
      383: out3 <= 10'h34c;
      384: out3 <= 10'h34b;
      385: out3 <= 10'h34a;
      386: out3 <= 10'h349;
      387: out3 <= 10'h348;
      388: out3 <= 10'h347;
      389: out3 <= 10'h346;
      390: out3 <= 10'h344;
      391: out3 <= 10'h343;
      392: out3 <= 10'h342;
      393: out3 <= 10'h341;
      394: out3 <= 10'h340;
      395: out3 <= 10'h33f;
      396: out3 <= 10'h33e;
      397: out3 <= 10'h33d;
      398: out3 <= 10'h33c;
      399: out3 <= 10'h33b;
      400: out3 <= 10'h33a;
      401: out3 <= 10'h339;
      402: out3 <= 10'h338;
      403: out3 <= 10'h337;
      404: out3 <= 10'h336;
      405: out3 <= 10'h335;
      406: out3 <= 10'h334;
      407: out3 <= 10'h333;
      408: out3 <= 10'h332;
      409: out3 <= 10'h331;
      410: out3 <= 10'h331;
      411: out3 <= 10'h330;
      412: out3 <= 10'h32f;
      413: out3 <= 10'h32e;
      414: out3 <= 10'h32d;
      415: out3 <= 10'h32c;
      416: out3 <= 10'h32b;
      417: out3 <= 10'h32a;
      418: out3 <= 10'h329;
      419: out3 <= 10'h329;
      420: out3 <= 10'h328;
      421: out3 <= 10'h327;
      422: out3 <= 10'h326;
      423: out3 <= 10'h325;
      424: out3 <= 10'h324;
      425: out3 <= 10'h324;
      426: out3 <= 10'h323;
      427: out3 <= 10'h322;
      428: out3 <= 10'h321;
      429: out3 <= 10'h320;
      430: out3 <= 10'h320;
      431: out3 <= 10'h31f;
      432: out3 <= 10'h31e;
      433: out3 <= 10'h31d;
      434: out3 <= 10'h31d;
      435: out3 <= 10'h31c;
      436: out3 <= 10'h31b;
      437: out3 <= 10'h31b;
      438: out3 <= 10'h31a;
      439: out3 <= 10'h319;
      440: out3 <= 10'h319;
      441: out3 <= 10'h318;
      442: out3 <= 10'h317;
      443: out3 <= 10'h317;
      444: out3 <= 10'h316;
      445: out3 <= 10'h315;
      446: out3 <= 10'h315;
      447: out3 <= 10'h314;
      448: out3 <= 10'h313;
      449: out3 <= 10'h313;
      450: out3 <= 10'h312;
      451: out3 <= 10'h312;
      452: out3 <= 10'h311;
      453: out3 <= 10'h311;
      454: out3 <= 10'h310;
      455: out3 <= 10'h30f;
      456: out3 <= 10'h30f;
      457: out3 <= 10'h30e;
      458: out3 <= 10'h30e;
      459: out3 <= 10'h30d;
      460: out3 <= 10'h30d;
      461: out3 <= 10'h30c;
      462: out3 <= 10'h30c;
      463: out3 <= 10'h30b;
      464: out3 <= 10'h30b;
      465: out3 <= 10'h30b;
      466: out3 <= 10'h30a;
      467: out3 <= 10'h30a;
      468: out3 <= 10'h309;
      469: out3 <= 10'h309;
      470: out3 <= 10'h308;
      471: out3 <= 10'h308;
      472: out3 <= 10'h308;
      473: out3 <= 10'h307;
      474: out3 <= 10'h307;
      475: out3 <= 10'h307;
      476: out3 <= 10'h306;
      477: out3 <= 10'h306;
      478: out3 <= 10'h306;
      479: out3 <= 10'h305;
      480: out3 <= 10'h305;
      481: out3 <= 10'h305;
      482: out3 <= 10'h304;
      483: out3 <= 10'h304;
      484: out3 <= 10'h304;
      485: out3 <= 10'h304;
      486: out3 <= 10'h303;
      487: out3 <= 10'h303;
      488: out3 <= 10'h303;
      489: out3 <= 10'h303;
      490: out3 <= 10'h302;
      491: out3 <= 10'h302;
      492: out3 <= 10'h302;
      493: out3 <= 10'h302;
      494: out3 <= 10'h302;
      495: out3 <= 10'h301;
      496: out3 <= 10'h301;
      497: out3 <= 10'h301;
      498: out3 <= 10'h301;
      499: out3 <= 10'h301;
      500: out3 <= 10'h301;
      501: out3 <= 10'h301;
      502: out3 <= 10'h300;
      503: out3 <= 10'h300;
      504: out3 <= 10'h300;
      505: out3 <= 10'h300;
      506: out3 <= 10'h300;
      507: out3 <= 10'h300;
      508: out3 <= 10'h300;
      509: out3 <= 10'h300;
      510: out3 <= 10'h300;
      511: out3 <= 10'h300;
      512: out3 <= 10'h100;
      513: out3 <= 10'h100;
      514: out3 <= 10'h100;
      515: out3 <= 10'h100;
      516: out3 <= 10'h100;
      517: out3 <= 10'h100;
      518: out3 <= 10'hff;
      519: out3 <= 10'hff;
      520: out3 <= 10'hff;
      521: out3 <= 10'hfe;
      522: out3 <= 10'hfe;
      523: out3 <= 10'hfe;
      524: out3 <= 10'hfd;
      525: out3 <= 10'hfd;
      526: out3 <= 10'hfc;
      527: out3 <= 10'hfc;
      528: out3 <= 10'hfb;
      529: out3 <= 10'hfa;
      530: out3 <= 10'hfa;
      531: out3 <= 10'hf9;
      532: out3 <= 10'hf8;
      533: out3 <= 10'hf8;
      534: out3 <= 10'hf7;
      535: out3 <= 10'hf6;
      536: out3 <= 10'hf5;
      537: out3 <= 10'hf4;
      538: out3 <= 10'hf3;
      539: out3 <= 10'hf2;
      540: out3 <= 10'hf1;
      541: out3 <= 10'hf0;
      542: out3 <= 10'hef;
      543: out3 <= 10'hee;
      544: out3 <= 10'hed;
      545: out3 <= 10'heb;
      546: out3 <= 10'hea;
      547: out3 <= 10'he9;
      548: out3 <= 10'he7;
      549: out3 <= 10'he6;
      550: out3 <= 10'he5;
      551: out3 <= 10'he3;
      552: out3 <= 10'he2;
      553: out3 <= 10'he0;
      554: out3 <= 10'hdf;
      555: out3 <= 10'hdd;
      556: out3 <= 10'hdc;
      557: out3 <= 10'hda;
      558: out3 <= 10'hd8;
      559: out3 <= 10'hd7;
      560: out3 <= 10'hd5;
      561: out3 <= 10'hd3;
      562: out3 <= 10'hd1;
      563: out3 <= 10'hcf;
      564: out3 <= 10'hce;
      565: out3 <= 10'hcc;
      566: out3 <= 10'hca;
      567: out3 <= 10'hc8;
      568: out3 <= 10'hc6;
      569: out3 <= 10'hc4;
      570: out3 <= 10'hc2;
      571: out3 <= 10'hc0;
      572: out3 <= 10'hbe;
      573: out3 <= 10'hbc;
      574: out3 <= 10'hb9;
      575: out3 <= 10'hb7;
      576: out3 <= 10'hb5;
      577: out3 <= 10'hb3;
      578: out3 <= 10'hb1;
      579: out3 <= 10'hae;
      580: out3 <= 10'hac;
      581: out3 <= 10'haa;
      582: out3 <= 10'ha7;
      583: out3 <= 10'ha5;
      584: out3 <= 10'ha2;
      585: out3 <= 10'ha0;
      586: out3 <= 10'h9d;
      587: out3 <= 10'h9b;
      588: out3 <= 10'h98;
      589: out3 <= 10'h96;
      590: out3 <= 10'h93;
      591: out3 <= 10'h91;
      592: out3 <= 10'h8e;
      593: out3 <= 10'h8c;
      594: out3 <= 10'h89;
      595: out3 <= 10'h86;
      596: out3 <= 10'h84;
      597: out3 <= 10'h81;
      598: out3 <= 10'h7e;
      599: out3 <= 10'h7b;
      600: out3 <= 10'h79;
      601: out3 <= 10'h76;
      602: out3 <= 10'h73;
      603: out3 <= 10'h70;
      604: out3 <= 10'h6d;
      605: out3 <= 10'h6b;
      606: out3 <= 10'h68;
      607: out3 <= 10'h65;
      608: out3 <= 10'h62;
      609: out3 <= 10'h5f;
      610: out3 <= 10'h5c;
      611: out3 <= 10'h59;
      612: out3 <= 10'h56;
      613: out3 <= 10'h53;
      614: out3 <= 10'h50;
      615: out3 <= 10'h4d;
      616: out3 <= 10'h4a;
      617: out3 <= 10'h47;
      618: out3 <= 10'h44;
      619: out3 <= 10'h41;
      620: out3 <= 10'h3e;
      621: out3 <= 10'h3b;
      622: out3 <= 10'h38;
      623: out3 <= 10'h35;
      624: out3 <= 10'h32;
      625: out3 <= 10'h2f;
      626: out3 <= 10'h2c;
      627: out3 <= 10'h29;
      628: out3 <= 10'h26;
      629: out3 <= 10'h22;
      630: out3 <= 10'h1f;
      631: out3 <= 10'h1c;
      632: out3 <= 10'h19;
      633: out3 <= 10'h16;
      634: out3 <= 10'h13;
      635: out3 <= 10'h10;
      636: out3 <= 10'hd;
      637: out3 <= 10'h9;
      638: out3 <= 10'h6;
      639: out3 <= 10'h3;
      640: out3 <= 10'h0;
      641: out3 <= 10'h3fd;
      642: out3 <= 10'h3fa;
      643: out3 <= 10'h3f7;
      644: out3 <= 10'h3f3;
      645: out3 <= 10'h3f0;
      646: out3 <= 10'h3ed;
      647: out3 <= 10'h3ea;
      648: out3 <= 10'h3e7;
      649: out3 <= 10'h3e4;
      650: out3 <= 10'h3e1;
      651: out3 <= 10'h3de;
      652: out3 <= 10'h3da;
      653: out3 <= 10'h3d7;
      654: out3 <= 10'h3d4;
      655: out3 <= 10'h3d1;
      656: out3 <= 10'h3ce;
      657: out3 <= 10'h3cb;
      658: out3 <= 10'h3c8;
      659: out3 <= 10'h3c5;
      660: out3 <= 10'h3c2;
      661: out3 <= 10'h3bf;
      662: out3 <= 10'h3bc;
      663: out3 <= 10'h3b9;
      664: out3 <= 10'h3b6;
      665: out3 <= 10'h3b3;
      666: out3 <= 10'h3b0;
      667: out3 <= 10'h3ad;
      668: out3 <= 10'h3aa;
      669: out3 <= 10'h3a7;
      670: out3 <= 10'h3a4;
      671: out3 <= 10'h3a1;
      672: out3 <= 10'h39e;
      673: out3 <= 10'h39b;
      674: out3 <= 10'h398;
      675: out3 <= 10'h395;
      676: out3 <= 10'h393;
      677: out3 <= 10'h390;
      678: out3 <= 10'h38d;
      679: out3 <= 10'h38a;
      680: out3 <= 10'h387;
      681: out3 <= 10'h385;
      682: out3 <= 10'h382;
      683: out3 <= 10'h37f;
      684: out3 <= 10'h37c;
      685: out3 <= 10'h37a;
      686: out3 <= 10'h377;
      687: out3 <= 10'h374;
      688: out3 <= 10'h372;
      689: out3 <= 10'h36f;
      690: out3 <= 10'h36d;
      691: out3 <= 10'h36a;
      692: out3 <= 10'h368;
      693: out3 <= 10'h365;
      694: out3 <= 10'h363;
      695: out3 <= 10'h360;
      696: out3 <= 10'h35e;
      697: out3 <= 10'h35b;
      698: out3 <= 10'h359;
      699: out3 <= 10'h356;
      700: out3 <= 10'h354;
      701: out3 <= 10'h352;
      702: out3 <= 10'h34f;
      703: out3 <= 10'h34d;
      704: out3 <= 10'h34b;
      705: out3 <= 10'h349;
      706: out3 <= 10'h347;
      707: out3 <= 10'h344;
      708: out3 <= 10'h342;
      709: out3 <= 10'h340;
      710: out3 <= 10'h33e;
      711: out3 <= 10'h33c;
      712: out3 <= 10'h33a;
      713: out3 <= 10'h338;
      714: out3 <= 10'h336;
      715: out3 <= 10'h334;
      716: out3 <= 10'h332;
      717: out3 <= 10'h331;
      718: out3 <= 10'h32f;
      719: out3 <= 10'h32d;
      720: out3 <= 10'h32b;
      721: out3 <= 10'h329;
      722: out3 <= 10'h328;
      723: out3 <= 10'h326;
      724: out3 <= 10'h324;
      725: out3 <= 10'h323;
      726: out3 <= 10'h321;
      727: out3 <= 10'h320;
      728: out3 <= 10'h31e;
      729: out3 <= 10'h31d;
      730: out3 <= 10'h31b;
      731: out3 <= 10'h31a;
      732: out3 <= 10'h319;
      733: out3 <= 10'h317;
      734: out3 <= 10'h316;
      735: out3 <= 10'h315;
      736: out3 <= 10'h313;
      737: out3 <= 10'h312;
      738: out3 <= 10'h311;
      739: out3 <= 10'h310;
      740: out3 <= 10'h30f;
      741: out3 <= 10'h30e;
      742: out3 <= 10'h30d;
      743: out3 <= 10'h30c;
      744: out3 <= 10'h30b;
      745: out3 <= 10'h30a;
      746: out3 <= 10'h309;
      747: out3 <= 10'h308;
      748: out3 <= 10'h308;
      749: out3 <= 10'h307;
      750: out3 <= 10'h306;
      751: out3 <= 10'h306;
      752: out3 <= 10'h305;
      753: out3 <= 10'h304;
      754: out3 <= 10'h304;
      755: out3 <= 10'h303;
      756: out3 <= 10'h303;
      757: out3 <= 10'h302;
      758: out3 <= 10'h302;
      759: out3 <= 10'h302;
      760: out3 <= 10'h301;
      761: out3 <= 10'h301;
      762: out3 <= 10'h301;
      763: out3 <= 10'h300;
      764: out3 <= 10'h300;
      765: out3 <= 10'h300;
      766: out3 <= 10'h300;
      767: out3 <= 10'h300;
      768: out3 <= 10'h300;
      769: out3 <= 10'h300;
      770: out3 <= 10'h300;
      771: out3 <= 10'h300;
      772: out3 <= 10'h300;
      773: out3 <= 10'h300;
      774: out3 <= 10'h301;
      775: out3 <= 10'h301;
      776: out3 <= 10'h301;
      777: out3 <= 10'h302;
      778: out3 <= 10'h302;
      779: out3 <= 10'h302;
      780: out3 <= 10'h303;
      781: out3 <= 10'h303;
      782: out3 <= 10'h304;
      783: out3 <= 10'h304;
      784: out3 <= 10'h305;
      785: out3 <= 10'h306;
      786: out3 <= 10'h306;
      787: out3 <= 10'h307;
      788: out3 <= 10'h308;
      789: out3 <= 10'h308;
      790: out3 <= 10'h309;
      791: out3 <= 10'h30a;
      792: out3 <= 10'h30b;
      793: out3 <= 10'h30c;
      794: out3 <= 10'h30d;
      795: out3 <= 10'h30e;
      796: out3 <= 10'h30f;
      797: out3 <= 10'h310;
      798: out3 <= 10'h311;
      799: out3 <= 10'h312;
      800: out3 <= 10'h313;
      801: out3 <= 10'h315;
      802: out3 <= 10'h316;
      803: out3 <= 10'h317;
      804: out3 <= 10'h319;
      805: out3 <= 10'h31a;
      806: out3 <= 10'h31b;
      807: out3 <= 10'h31d;
      808: out3 <= 10'h31e;
      809: out3 <= 10'h320;
      810: out3 <= 10'h321;
      811: out3 <= 10'h323;
      812: out3 <= 10'h324;
      813: out3 <= 10'h326;
      814: out3 <= 10'h328;
      815: out3 <= 10'h329;
      816: out3 <= 10'h32b;
      817: out3 <= 10'h32d;
      818: out3 <= 10'h32f;
      819: out3 <= 10'h331;
      820: out3 <= 10'h332;
      821: out3 <= 10'h334;
      822: out3 <= 10'h336;
      823: out3 <= 10'h338;
      824: out3 <= 10'h33a;
      825: out3 <= 10'h33c;
      826: out3 <= 10'h33e;
      827: out3 <= 10'h340;
      828: out3 <= 10'h342;
      829: out3 <= 10'h344;
      830: out3 <= 10'h347;
      831: out3 <= 10'h349;
      832: out3 <= 10'h34b;
      833: out3 <= 10'h34d;
      834: out3 <= 10'h34f;
      835: out3 <= 10'h352;
      836: out3 <= 10'h354;
      837: out3 <= 10'h356;
      838: out3 <= 10'h359;
      839: out3 <= 10'h35b;
      840: out3 <= 10'h35e;
      841: out3 <= 10'h360;
      842: out3 <= 10'h363;
      843: out3 <= 10'h365;
      844: out3 <= 10'h368;
      845: out3 <= 10'h36a;
      846: out3 <= 10'h36d;
      847: out3 <= 10'h36f;
      848: out3 <= 10'h372;
      849: out3 <= 10'h374;
      850: out3 <= 10'h377;
      851: out3 <= 10'h37a;
      852: out3 <= 10'h37c;
      853: out3 <= 10'h37f;
      854: out3 <= 10'h382;
      855: out3 <= 10'h385;
      856: out3 <= 10'h387;
      857: out3 <= 10'h38a;
      858: out3 <= 10'h38d;
      859: out3 <= 10'h390;
      860: out3 <= 10'h393;
      861: out3 <= 10'h395;
      862: out3 <= 10'h398;
      863: out3 <= 10'h39b;
      864: out3 <= 10'h39e;
      865: out3 <= 10'h3a1;
      866: out3 <= 10'h3a4;
      867: out3 <= 10'h3a7;
      868: out3 <= 10'h3aa;
      869: out3 <= 10'h3ad;
      870: out3 <= 10'h3b0;
      871: out3 <= 10'h3b3;
      872: out3 <= 10'h3b6;
      873: out3 <= 10'h3b9;
      874: out3 <= 10'h3bc;
      875: out3 <= 10'h3bf;
      876: out3 <= 10'h3c2;
      877: out3 <= 10'h3c5;
      878: out3 <= 10'h3c8;
      879: out3 <= 10'h3cb;
      880: out3 <= 10'h3ce;
      881: out3 <= 10'h3d1;
      882: out3 <= 10'h3d4;
      883: out3 <= 10'h3d7;
      884: out3 <= 10'h3da;
      885: out3 <= 10'h3de;
      886: out3 <= 10'h3e1;
      887: out3 <= 10'h3e4;
      888: out3 <= 10'h3e7;
      889: out3 <= 10'h3ea;
      890: out3 <= 10'h3ed;
      891: out3 <= 10'h3f0;
      892: out3 <= 10'h3f3;
      893: out3 <= 10'h3f7;
      894: out3 <= 10'h3fa;
      895: out3 <= 10'h3fd;
      896: out3 <= 10'h0;
      897: out3 <= 10'h3;
      898: out3 <= 10'h6;
      899: out3 <= 10'h9;
      900: out3 <= 10'hd;
      901: out3 <= 10'h10;
      902: out3 <= 10'h13;
      903: out3 <= 10'h16;
      904: out3 <= 10'h19;
      905: out3 <= 10'h1c;
      906: out3 <= 10'h1f;
      907: out3 <= 10'h22;
      908: out3 <= 10'h26;
      909: out3 <= 10'h29;
      910: out3 <= 10'h2c;
      911: out3 <= 10'h2f;
      912: out3 <= 10'h32;
      913: out3 <= 10'h35;
      914: out3 <= 10'h38;
      915: out3 <= 10'h3b;
      916: out3 <= 10'h3e;
      917: out3 <= 10'h41;
      918: out3 <= 10'h44;
      919: out3 <= 10'h47;
      920: out3 <= 10'h4a;
      921: out3 <= 10'h4d;
      922: out3 <= 10'h50;
      923: out3 <= 10'h53;
      924: out3 <= 10'h56;
      925: out3 <= 10'h59;
      926: out3 <= 10'h5c;
      927: out3 <= 10'h5f;
      928: out3 <= 10'h62;
      929: out3 <= 10'h65;
      930: out3 <= 10'h68;
      931: out3 <= 10'h6b;
      932: out3 <= 10'h6d;
      933: out3 <= 10'h70;
      934: out3 <= 10'h73;
      935: out3 <= 10'h76;
      936: out3 <= 10'h79;
      937: out3 <= 10'h7b;
      938: out3 <= 10'h7e;
      939: out3 <= 10'h81;
      940: out3 <= 10'h84;
      941: out3 <= 10'h86;
      942: out3 <= 10'h89;
      943: out3 <= 10'h8c;
      944: out3 <= 10'h8e;
      945: out3 <= 10'h91;
      946: out3 <= 10'h93;
      947: out3 <= 10'h96;
      948: out3 <= 10'h98;
      949: out3 <= 10'h9b;
      950: out3 <= 10'h9d;
      951: out3 <= 10'ha0;
      952: out3 <= 10'ha2;
      953: out3 <= 10'ha5;
      954: out3 <= 10'ha7;
      955: out3 <= 10'haa;
      956: out3 <= 10'hac;
      957: out3 <= 10'hae;
      958: out3 <= 10'hb1;
      959: out3 <= 10'hb3;
      960: out3 <= 10'hb5;
      961: out3 <= 10'hb7;
      962: out3 <= 10'hb9;
      963: out3 <= 10'hbc;
      964: out3 <= 10'hbe;
      965: out3 <= 10'hc0;
      966: out3 <= 10'hc2;
      967: out3 <= 10'hc4;
      968: out3 <= 10'hc6;
      969: out3 <= 10'hc8;
      970: out3 <= 10'hca;
      971: out3 <= 10'hcc;
      972: out3 <= 10'hce;
      973: out3 <= 10'hcf;
      974: out3 <= 10'hd1;
      975: out3 <= 10'hd3;
      976: out3 <= 10'hd5;
      977: out3 <= 10'hd7;
      978: out3 <= 10'hd8;
      979: out3 <= 10'hda;
      980: out3 <= 10'hdc;
      981: out3 <= 10'hdd;
      982: out3 <= 10'hdf;
      983: out3 <= 10'he0;
      984: out3 <= 10'he2;
      985: out3 <= 10'he3;
      986: out3 <= 10'he5;
      987: out3 <= 10'he6;
      988: out3 <= 10'he7;
      989: out3 <= 10'he9;
      990: out3 <= 10'hea;
      991: out3 <= 10'heb;
      992: out3 <= 10'hed;
      993: out3 <= 10'hee;
      994: out3 <= 10'hef;
      995: out3 <= 10'hf0;
      996: out3 <= 10'hf1;
      997: out3 <= 10'hf2;
      998: out3 <= 10'hf3;
      999: out3 <= 10'hf4;
      1000: out3 <= 10'hf5;
      1001: out3 <= 10'hf6;
      1002: out3 <= 10'hf7;
      1003: out3 <= 10'hf8;
      1004: out3 <= 10'hf8;
      1005: out3 <= 10'hf9;
      1006: out3 <= 10'hfa;
      1007: out3 <= 10'hfa;
      1008: out3 <= 10'hfb;
      1009: out3 <= 10'hfc;
      1010: out3 <= 10'hfc;
      1011: out3 <= 10'hfd;
      1012: out3 <= 10'hfd;
      1013: out3 <= 10'hfe;
      1014: out3 <= 10'hfe;
      1015: out3 <= 10'hfe;
      1016: out3 <= 10'hff;
      1017: out3 <= 10'hff;
      1018: out3 <= 10'hff;
      1019: out3 <= 10'h100;
      1020: out3 <= 10'h100;
      1021: out3 <= 10'h100;
      1022: out3 <= 10'h100;
      1023: out3 <= 10'h100;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



// Latency: 11
// Gap: 1
module codeBlock13333(clk, reset, next_in, next_out,
   i2_in,
   i1_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15,
   X16_in, Y16,
   X17_in, Y17,
   X18_in, Y18,
   X19_in, Y19,
   X20_in, Y20,
   X21_in, Y21,
   X22_in, Y22,
   X23_in, Y23,
   X24_in, Y24,
   X25_in, Y25,
   X26_in, Y26,
   X27_in, Y27,
   X28_in, Y28,
   X29_in, Y29,
   X30_in, Y30,
   X31_in, Y31);

   output next_out;
   input clk, reset, next_in;

   reg nexti;
   input [5:0] i2_in;
   reg [5:0] i2;
   input [4:0] i1_in;
   reg [4:0] i1;

   input [9:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in,
      X16_in,
      X17_in,
      X18_in,
      X19_in,
      X20_in,
      X21_in,
      X22_in,
      X23_in,
      X24_in,
      X25_in,
      X26_in,
      X27_in,
      X28_in,
      X29_in,
      X30_in,
      X31_in;

   reg   [9:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15,
      X16,
      X17,
      X18,
      X19,
      X20,
      X21,
      X22,
      X23,
      X24,
      X25,
      X26,
      X27,
      X28,
      X29,
      X30,
      X31;

   output [9:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15,
      Y16,
      Y17,
      Y18,
      Y19,
      Y20,
      Y21,
      Y22,
      Y23,
      Y24,
      Y25,
      Y26,
      Y27,
      Y28,
      Y29,
      Y30,
      Y31;

   shiftRegFIFO #(10, 1) shiftFIFO_18736(.X(nexti), .Y(next_out), .clk(clk));


   wire  [9:0] a450;
   wire  [8:0] a452;
   wire  [9:0] a453;
   wire signed [9:0] a533;
   wire signed [9:0] a534;
   wire signed [9:0] a537;
   wire signed [9:0] a538;
   wire signed [9:0] a541;
   wire signed [9:0] a542;
   wire signed [9:0] a545;
   wire signed [9:0] a546;
   wire signed [9:0] a549;
   wire signed [9:0] a550;
   wire signed [9:0] a553;
   wire signed [9:0] a554;
   wire signed [9:0] a557;
   wire signed [9:0] a558;
   wire signed [9:0] a561;
   wire signed [9:0] a562;
   wire  [10:0] a451;
   wire  [10:0] a463;
   wire  [10:0] a473;
   wire  [10:0] a483;
   wire  [10:0] a493;
   wire  [10:0] a503;
   wire  [10:0] a513;
   wire  [10:0] a523;
   reg  [9:0] tm99;
   reg signed [9:0] tm100;
   reg signed [9:0] tm107;
   reg signed [9:0] tm129;
   reg signed [9:0] tm136;
   reg signed [9:0] tm158;
   reg signed [9:0] tm165;
   reg signed [9:0] tm187;
   reg signed [9:0] tm194;
   reg signed [9:0] tm216;
   reg signed [9:0] tm223;
   reg signed [9:0] tm245;
   reg signed [9:0] tm252;
   reg signed [9:0] tm274;
   reg signed [9:0] tm281;
   reg signed [9:0] tm303;
   reg signed [9:0] tm310;
   reg signed [9:0] tm331;
   reg signed [9:0] tm341;
   reg signed [9:0] tm351;
   reg signed [9:0] tm361;
   reg signed [9:0] tm371;
   reg signed [9:0] tm381;
   reg signed [9:0] tm391;
   reg signed [9:0] tm401;
   reg signed [9:0] tm411;
   reg signed [9:0] tm421;
   reg signed [9:0] tm431;
   reg signed [9:0] tm441;
   reg signed [9:0] tm451;
   reg signed [9:0] tm461;
   reg signed [9:0] tm471;
   reg signed [9:0] tm481;
   reg  [10:0] a454;
   wire  [9:0] a455;
   reg  [10:0] a464;
   wire  [9:0] a465;
   reg  [10:0] a474;
   wire  [9:0] a475;
   reg  [10:0] a484;
   wire  [9:0] a485;
   reg  [10:0] a494;
   wire  [9:0] a495;
   reg  [10:0] a504;
   wire  [9:0] a505;
   reg  [10:0] a514;
   wire  [9:0] a515;
   reg  [10:0] a524;
   wire  [9:0] a525;
   reg signed [9:0] tm101;
   reg signed [9:0] tm108;
   reg signed [9:0] tm130;
   reg signed [9:0] tm137;
   reg signed [9:0] tm159;
   reg signed [9:0] tm166;
   reg signed [9:0] tm188;
   reg signed [9:0] tm195;
   reg signed [9:0] tm217;
   reg signed [9:0] tm224;
   reg signed [9:0] tm246;
   reg signed [9:0] tm253;
   reg signed [9:0] tm275;
   reg signed [9:0] tm282;
   reg signed [9:0] tm304;
   reg signed [9:0] tm311;
   reg signed [9:0] tm332;
   reg signed [9:0] tm342;
   reg signed [9:0] tm352;
   reg signed [9:0] tm362;
   reg signed [9:0] tm372;
   reg signed [9:0] tm382;
   reg signed [9:0] tm392;
   reg signed [9:0] tm402;
   reg signed [9:0] tm412;
   reg signed [9:0] tm422;
   reg signed [9:0] tm432;
   reg signed [9:0] tm442;
   reg signed [9:0] tm452;
   reg signed [9:0] tm462;
   reg signed [9:0] tm472;
   reg signed [9:0] tm482;
   wire  [10:0] a456;
   wire  [10:0] a466;
   wire  [10:0] a476;
   wire  [10:0] a486;
   wire  [10:0] a496;
   wire  [10:0] a506;
   wire  [10:0] a516;
   wire  [10:0] a526;
   reg signed [9:0] tm102;
   reg signed [9:0] tm109;
   reg signed [9:0] tm131;
   reg signed [9:0] tm138;
   reg signed [9:0] tm160;
   reg signed [9:0] tm167;
   reg signed [9:0] tm189;
   reg signed [9:0] tm196;
   reg signed [9:0] tm218;
   reg signed [9:0] tm225;
   reg signed [9:0] tm247;
   reg signed [9:0] tm254;
   reg signed [9:0] tm276;
   reg signed [9:0] tm283;
   reg signed [9:0] tm305;
   reg signed [9:0] tm312;
   reg signed [9:0] tm333;
   reg signed [9:0] tm343;
   reg signed [9:0] tm353;
   reg signed [9:0] tm363;
   reg signed [9:0] tm373;
   reg signed [9:0] tm383;
   reg signed [9:0] tm393;
   reg signed [9:0] tm403;
   reg signed [9:0] tm413;
   reg signed [9:0] tm423;
   reg signed [9:0] tm433;
   reg signed [9:0] tm443;
   reg signed [9:0] tm453;
   reg signed [9:0] tm463;
   reg signed [9:0] tm473;
   reg signed [9:0] tm483;
   reg signed [9:0] tm103;
   reg signed [9:0] tm110;
   reg signed [9:0] tm132;
   reg signed [9:0] tm139;
   reg signed [9:0] tm161;
   reg signed [9:0] tm168;
   reg signed [9:0] tm190;
   reg signed [9:0] tm197;
   reg signed [9:0] tm219;
   reg signed [9:0] tm226;
   reg signed [9:0] tm248;
   reg signed [9:0] tm255;
   reg signed [9:0] tm277;
   reg signed [9:0] tm284;
   reg signed [9:0] tm306;
   reg signed [9:0] tm313;
   reg signed [9:0] tm334;
   reg signed [9:0] tm344;
   reg signed [9:0] tm354;
   reg signed [9:0] tm364;
   reg signed [9:0] tm374;
   reg signed [9:0] tm384;
   reg signed [9:0] tm394;
   reg signed [9:0] tm404;
   reg signed [9:0] tm414;
   reg signed [9:0] tm424;
   reg signed [9:0] tm434;
   reg signed [9:0] tm444;
   reg signed [9:0] tm454;
   reg signed [9:0] tm464;
   reg signed [9:0] tm474;
   reg signed [9:0] tm484;
   reg signed [9:0] tm104;
   reg signed [9:0] tm111;
   reg signed [9:0] tm133;
   reg signed [9:0] tm140;
   reg signed [9:0] tm162;
   reg signed [9:0] tm169;
   reg signed [9:0] tm191;
   reg signed [9:0] tm198;
   reg signed [9:0] tm220;
   reg signed [9:0] tm227;
   reg signed [9:0] tm249;
   reg signed [9:0] tm256;
   reg signed [9:0] tm278;
   reg signed [9:0] tm285;
   reg signed [9:0] tm307;
   reg signed [9:0] tm314;
   reg signed [9:0] tm335;
   reg signed [9:0] tm345;
   reg signed [9:0] tm355;
   reg signed [9:0] tm365;
   reg signed [9:0] tm375;
   reg signed [9:0] tm385;
   reg signed [9:0] tm395;
   reg signed [9:0] tm405;
   reg signed [9:0] tm415;
   reg signed [9:0] tm425;
   reg signed [9:0] tm435;
   reg signed [9:0] tm445;
   reg signed [9:0] tm455;
   reg signed [9:0] tm465;
   reg signed [9:0] tm475;
   reg signed [9:0] tm485;
   wire signed [9:0] tm5;
   wire signed [9:0] a457;
   wire signed [9:0] tm6;
   wire signed [9:0] a459;
   wire signed [9:0] tm9;
   wire signed [9:0] a467;
   wire signed [9:0] tm10;
   wire signed [9:0] a469;
   wire signed [9:0] tm13;
   wire signed [9:0] a477;
   wire signed [9:0] tm14;
   wire signed [9:0] a479;
   wire signed [9:0] tm17;
   wire signed [9:0] a487;
   wire signed [9:0] tm18;
   wire signed [9:0] a489;
   wire signed [9:0] tm21;
   wire signed [9:0] a497;
   wire signed [9:0] tm22;
   wire signed [9:0] a499;
   wire signed [9:0] tm25;
   wire signed [9:0] a507;
   wire signed [9:0] tm26;
   wire signed [9:0] a509;
   wire signed [9:0] tm29;
   wire signed [9:0] a517;
   wire signed [9:0] tm30;
   wire signed [9:0] a519;
   wire signed [9:0] tm33;
   wire signed [9:0] a527;
   wire signed [9:0] tm34;
   wire signed [9:0] a529;
   reg signed [9:0] tm105;
   reg signed [9:0] tm112;
   reg signed [9:0] tm134;
   reg signed [9:0] tm141;
   reg signed [9:0] tm163;
   reg signed [9:0] tm170;
   reg signed [9:0] tm192;
   reg signed [9:0] tm199;
   reg signed [9:0] tm221;
   reg signed [9:0] tm228;
   reg signed [9:0] tm250;
   reg signed [9:0] tm257;
   reg signed [9:0] tm279;
   reg signed [9:0] tm286;
   reg signed [9:0] tm308;
   reg signed [9:0] tm315;
   reg signed [9:0] tm336;
   reg signed [9:0] tm346;
   reg signed [9:0] tm356;
   reg signed [9:0] tm366;
   reg signed [9:0] tm376;
   reg signed [9:0] tm386;
   reg signed [9:0] tm396;
   reg signed [9:0] tm406;
   reg signed [9:0] tm416;
   reg signed [9:0] tm426;
   reg signed [9:0] tm436;
   reg signed [9:0] tm446;
   reg signed [9:0] tm456;
   reg signed [9:0] tm466;
   reg signed [9:0] tm476;
   reg signed [9:0] tm486;
   reg signed [9:0] tm35;
   reg signed [9:0] tm36;
   reg signed [9:0] tm39;
   reg signed [9:0] tm40;
   reg signed [9:0] tm43;
   reg signed [9:0] tm44;
   reg signed [9:0] tm47;
   reg signed [9:0] tm48;
   reg signed [9:0] tm51;
   reg signed [9:0] tm52;
   reg signed [9:0] tm55;
   reg signed [9:0] tm56;
   reg signed [9:0] tm59;
   reg signed [9:0] tm60;
   reg signed [9:0] tm63;
   reg signed [9:0] tm64;
   reg signed [9:0] tm106;
   reg signed [9:0] tm113;
   reg signed [9:0] tm135;
   reg signed [9:0] tm142;
   reg signed [9:0] tm164;
   reg signed [9:0] tm171;
   reg signed [9:0] tm193;
   reg signed [9:0] tm200;
   reg signed [9:0] tm222;
   reg signed [9:0] tm229;
   reg signed [9:0] tm251;
   reg signed [9:0] tm258;
   reg signed [9:0] tm280;
   reg signed [9:0] tm287;
   reg signed [9:0] tm309;
   reg signed [9:0] tm316;
   reg signed [9:0] tm337;
   reg signed [9:0] tm347;
   reg signed [9:0] tm357;
   reg signed [9:0] tm367;
   reg signed [9:0] tm377;
   reg signed [9:0] tm387;
   reg signed [9:0] tm397;
   reg signed [9:0] tm407;
   reg signed [9:0] tm417;
   reg signed [9:0] tm427;
   reg signed [9:0] tm437;
   reg signed [9:0] tm447;
   reg signed [9:0] tm457;
   reg signed [9:0] tm467;
   reg signed [9:0] tm477;
   reg signed [9:0] tm487;
   reg signed [9:0] tm338;
   reg signed [9:0] tm348;
   reg signed [9:0] tm358;
   reg signed [9:0] tm368;
   reg signed [9:0] tm378;
   reg signed [9:0] tm388;
   reg signed [9:0] tm398;
   reg signed [9:0] tm408;
   reg signed [9:0] tm418;
   reg signed [9:0] tm428;
   reg signed [9:0] tm438;
   reg signed [9:0] tm448;
   reg signed [9:0] tm458;
   reg signed [9:0] tm468;
   reg signed [9:0] tm478;
   reg signed [9:0] tm488;
   wire signed [9:0] a458;
   wire signed [9:0] a460;
   wire signed [9:0] a461;
   wire signed [9:0] a462;
   wire signed [9:0] a468;
   wire signed [9:0] a470;
   wire signed [9:0] a471;
   wire signed [9:0] a472;
   wire signed [9:0] a478;
   wire signed [9:0] a480;
   wire signed [9:0] a481;
   wire signed [9:0] a482;
   wire signed [9:0] a488;
   wire signed [9:0] a490;
   wire signed [9:0] a491;
   wire signed [9:0] a492;
   wire signed [9:0] a498;
   wire signed [9:0] a500;
   wire signed [9:0] a501;
   wire signed [9:0] a502;
   wire signed [9:0] a508;
   wire signed [9:0] a510;
   wire signed [9:0] a511;
   wire signed [9:0] a512;
   wire signed [9:0] a518;
   wire signed [9:0] a520;
   wire signed [9:0] a521;
   wire signed [9:0] a522;
   wire signed [9:0] a528;
   wire signed [9:0] a530;
   wire signed [9:0] a531;
   wire signed [9:0] a532;
   reg signed [9:0] tm339;
   reg signed [9:0] tm349;
   reg signed [9:0] tm359;
   reg signed [9:0] tm369;
   reg signed [9:0] tm379;
   reg signed [9:0] tm389;
   reg signed [9:0] tm399;
   reg signed [9:0] tm409;
   reg signed [9:0] tm419;
   reg signed [9:0] tm429;
   reg signed [9:0] tm439;
   reg signed [9:0] tm449;
   reg signed [9:0] tm459;
   reg signed [9:0] tm469;
   reg signed [9:0] tm479;
   reg signed [9:0] tm489;
   wire signed [9:0] Y0;
   wire signed [9:0] Y1;
   wire signed [9:0] Y2;
   wire signed [9:0] Y3;
   wire signed [9:0] Y4;
   wire signed [9:0] Y5;
   wire signed [9:0] Y6;
   wire signed [9:0] Y7;
   wire signed [9:0] Y8;
   wire signed [9:0] Y9;
   wire signed [9:0] Y10;
   wire signed [9:0] Y11;
   wire signed [9:0] Y12;
   wire signed [9:0] Y13;
   wire signed [9:0] Y14;
   wire signed [9:0] Y15;
   wire signed [9:0] Y16;
   wire signed [9:0] Y17;
   wire signed [9:0] Y18;
   wire signed [9:0] Y19;
   wire signed [9:0] Y20;
   wire signed [9:0] Y21;
   wire signed [9:0] Y22;
   wire signed [9:0] Y23;
   wire signed [9:0] Y24;
   wire signed [9:0] Y25;
   wire signed [9:0] Y26;
   wire signed [9:0] Y27;
   wire signed [9:0] Y28;
   wire signed [9:0] Y29;
   wire signed [9:0] Y30;
   wire signed [9:0] Y31;
   reg signed [9:0] tm340;
   reg signed [9:0] tm350;
   reg signed [9:0] tm360;
   reg signed [9:0] tm370;
   reg signed [9:0] tm380;
   reg signed [9:0] tm390;
   reg signed [9:0] tm400;
   reg signed [9:0] tm410;
   reg signed [9:0] tm420;
   reg signed [9:0] tm430;
   reg signed [9:0] tm440;
   reg signed [9:0] tm450;
   reg signed [9:0] tm460;
   reg signed [9:0] tm470;
   reg signed [9:0] tm480;
   reg signed [9:0] tm490;

   wire [0:0] tm1;
   assign tm1 = 1'h1;
   wire [8:0] tm2;
   assign tm2 = 9'h1ff;
   wire [9:0] tm4;
   assign tm4 = 10'h200;
   wire [1:0] tm7;
   assign tm7 = 2'h3;
   wire [2:0] tm11;
   assign tm11 = 3'h5;
   wire [2:0] tm15;
   assign tm15 = 3'h7;
   wire [3:0] tm19;
   assign tm19 = 4'h9;
   wire [3:0] tm23;
   assign tm23 = 4'hb;
   wire [3:0] tm27;
   assign tm27 = 4'hd;
   wire [3:0] tm31;
   assign tm31 = 4'hf;

   assign a450 = i2 << 4;
   assign a452 = tm2 << i1;
   assign a453 = {a452, tm1[0:0]};
   assign a533 = X2;
   assign a534 = X3;
   assign a537 = X6;
   assign a538 = X7;
   assign a541 = X10;
   assign a542 = X11;
   assign a545 = X14;
   assign a546 = X15;
   assign a549 = X18;
   assign a550 = X19;
   assign a553 = X22;
   assign a554 = X23;
   assign a557 = X26;
   assign a558 = X27;
   assign a561 = X30;
   assign a562 = X31;
   assign a455 = {a454[0:0], a454[9:1]};
   assign a465 = {a464[0:0], a464[9:1]};
   assign a475 = {a474[0:0], a474[9:1]};
   assign a485 = {a484[0:0], a484[9:1]};
   assign a495 = {a494[0:0], a494[9:1]};
   assign a505 = {a504[0:0], a504[9:1]};
   assign a515 = {a514[0:0], a514[9:1]};
   assign a525 = {a524[0:0], a524[9:1]};
   assign a457 = tm5;
   assign a459 = tm6;
   assign a467 = tm9;
   assign a469 = tm10;
   assign a477 = tm13;
   assign a479 = tm14;
   assign a487 = tm17;
   assign a489 = tm18;
   assign a497 = tm21;
   assign a499 = tm22;
   assign a507 = tm25;
   assign a509 = tm26;
   assign a517 = tm29;
   assign a519 = tm30;
   assign a527 = tm33;
   assign a529 = tm34;
   assign Y0 = tm340;
   assign Y1 = tm350;
   assign Y4 = tm360;
   assign Y5 = tm370;
   assign Y8 = tm380;
   assign Y9 = tm390;
   assign Y12 = tm400;
   assign Y13 = tm410;
   assign Y16 = tm420;
   assign Y17 = tm430;
   assign Y20 = tm440;
   assign Y21 = tm450;
   assign Y24 = tm460;
   assign Y25 = tm470;
   assign Y28 = tm480;
   assign Y29 = tm490;

   D2_15282 instD2inst0_15282(.addr(a456[9:0]), .out(tm6), .clk(clk));

   D2_15282 instD2inst1_15282(.addr(a466[9:0]), .out(tm10), .clk(clk));

   D2_15282 instD2inst2_15282(.addr(a476[9:0]), .out(tm14), .clk(clk));

   D2_15282 instD2inst3_15282(.addr(a486[9:0]), .out(tm18), .clk(clk));

   D2_15282 instD2inst4_15282(.addr(a496[9:0]), .out(tm22), .clk(clk));

   D2_15282 instD2inst5_15282(.addr(a506[9:0]), .out(tm26), .clk(clk));

   D2_15282 instD2inst6_15282(.addr(a516[9:0]), .out(tm30), .clk(clk));

   D2_15282 instD2inst7_15282(.addr(a526[9:0]), .out(tm34), .clk(clk));

   D1_16308 instD1inst0_16308(.addr(a456[9:0]), .out(tm5), .clk(clk));

   D1_16308 instD1inst1_16308(.addr(a466[9:0]), .out(tm9), .clk(clk));

   D1_16308 instD1inst2_16308(.addr(a476[9:0]), .out(tm13), .clk(clk));

   D1_16308 instD1inst3_16308(.addr(a486[9:0]), .out(tm17), .clk(clk));

   D1_16308 instD1inst4_16308(.addr(a496[9:0]), .out(tm21), .clk(clk));

   D1_16308 instD1inst5_16308(.addr(a506[9:0]), .out(tm25), .clk(clk));

   D1_16308 instD1inst6_16308(.addr(a516[9:0]), .out(tm29), .clk(clk));

   D1_16308 instD1inst7_16308(.addr(a526[9:0]), .out(tm33), .clk(clk));

    addfxp #(11, 1) add13352(.a({1'b0, a450}), .b({10'b0, tm1}), .clk(clk), .q(a451));    // 0
    addfxp #(11, 1) add13477(.a({1'b0, a450}), .b({9'b0, tm7}), .clk(clk), .q(a463));    // 0
    addfxp #(11, 1) add13590(.a({1'b0, a450}), .b({8'b0, tm11}), .clk(clk), .q(a473));    // 0
    addfxp #(11, 1) add13703(.a({1'b0, a450}), .b({8'b0, tm15}), .clk(clk), .q(a483));    // 0
    addfxp #(11, 1) add13816(.a({1'b0, a450}), .b({7'b0, tm19}), .clk(clk), .q(a493));    // 0
    addfxp #(11, 1) add13929(.a({1'b0, a450}), .b({7'b0, tm23}), .clk(clk), .q(a503));    // 0
    addfxp #(11, 1) add14042(.a({1'b0, a450}), .b({7'b0, tm27}), .clk(clk), .q(a513));    // 0
    addfxp #(11, 1) add14155(.a({1'b0, a450}), .b({7'b0, tm31}), .clk(clk), .q(a523));    // 0
    subfxp #(11, 1) sub13383(.a({1'b0, a455}), .b({1'b0, tm4}), .clk(clk), .q(a456));    // 2
    subfxp #(11, 1) sub13496(.a({1'b0, a465}), .b({1'b0, tm4}), .clk(clk), .q(a466));    // 2
    subfxp #(11, 1) sub13609(.a({1'b0, a475}), .b({1'b0, tm4}), .clk(clk), .q(a476));    // 2
    subfxp #(11, 1) sub13722(.a({1'b0, a485}), .b({1'b0, tm4}), .clk(clk), .q(a486));    // 2
    subfxp #(11, 1) sub13835(.a({1'b0, a495}), .b({1'b0, tm4}), .clk(clk), .q(a496));    // 2
    subfxp #(11, 1) sub13948(.a({1'b0, a505}), .b({1'b0, tm4}), .clk(clk), .q(a506));    // 2
    subfxp #(11, 1) sub14061(.a({1'b0, a515}), .b({1'b0, tm4}), .clk(clk), .q(a516));    // 2
    subfxp #(11, 1) sub14174(.a({1'b0, a525}), .b({1'b0, tm4}), .clk(clk), .q(a526));    // 2
    multfix #(10, 2) m13405(.a(tm35), .b(tm106), .clk(clk), .q_sc(a458), .q_unsc(), .rst(reset));
    multfix #(10, 2) m13427(.a(tm36), .b(tm113), .clk(clk), .q_sc(a460), .q_unsc(), .rst(reset));
    multfix #(10, 2) m13444(.a(tm36), .b(tm106), .clk(clk), .q_sc(a461), .q_unsc(), .rst(reset));
    multfix #(10, 2) m13455(.a(tm35), .b(tm113), .clk(clk), .q_sc(a462), .q_unsc(), .rst(reset));
    multfix #(10, 2) m13518(.a(tm39), .b(tm135), .clk(clk), .q_sc(a468), .q_unsc(), .rst(reset));
    multfix #(10, 2) m13540(.a(tm40), .b(tm142), .clk(clk), .q_sc(a470), .q_unsc(), .rst(reset));
    multfix #(10, 2) m13557(.a(tm40), .b(tm135), .clk(clk), .q_sc(a471), .q_unsc(), .rst(reset));
    multfix #(10, 2) m13568(.a(tm39), .b(tm142), .clk(clk), .q_sc(a472), .q_unsc(), .rst(reset));
    multfix #(10, 2) m13631(.a(tm43), .b(tm164), .clk(clk), .q_sc(a478), .q_unsc(), .rst(reset));
    multfix #(10, 2) m13653(.a(tm44), .b(tm171), .clk(clk), .q_sc(a480), .q_unsc(), .rst(reset));
    multfix #(10, 2) m13670(.a(tm44), .b(tm164), .clk(clk), .q_sc(a481), .q_unsc(), .rst(reset));
    multfix #(10, 2) m13681(.a(tm43), .b(tm171), .clk(clk), .q_sc(a482), .q_unsc(), .rst(reset));
    multfix #(10, 2) m13744(.a(tm47), .b(tm193), .clk(clk), .q_sc(a488), .q_unsc(), .rst(reset));
    multfix #(10, 2) m13766(.a(tm48), .b(tm200), .clk(clk), .q_sc(a490), .q_unsc(), .rst(reset));
    multfix #(10, 2) m13783(.a(tm48), .b(tm193), .clk(clk), .q_sc(a491), .q_unsc(), .rst(reset));
    multfix #(10, 2) m13794(.a(tm47), .b(tm200), .clk(clk), .q_sc(a492), .q_unsc(), .rst(reset));
    multfix #(10, 2) m13857(.a(tm51), .b(tm222), .clk(clk), .q_sc(a498), .q_unsc(), .rst(reset));
    multfix #(10, 2) m13879(.a(tm52), .b(tm229), .clk(clk), .q_sc(a500), .q_unsc(), .rst(reset));
    multfix #(10, 2) m13896(.a(tm52), .b(tm222), .clk(clk), .q_sc(a501), .q_unsc(), .rst(reset));
    multfix #(10, 2) m13907(.a(tm51), .b(tm229), .clk(clk), .q_sc(a502), .q_unsc(), .rst(reset));
    multfix #(10, 2) m13970(.a(tm55), .b(tm251), .clk(clk), .q_sc(a508), .q_unsc(), .rst(reset));
    multfix #(10, 2) m13992(.a(tm56), .b(tm258), .clk(clk), .q_sc(a510), .q_unsc(), .rst(reset));
    multfix #(10, 2) m14009(.a(tm56), .b(tm251), .clk(clk), .q_sc(a511), .q_unsc(), .rst(reset));
    multfix #(10, 2) m14020(.a(tm55), .b(tm258), .clk(clk), .q_sc(a512), .q_unsc(), .rst(reset));
    multfix #(10, 2) m14083(.a(tm59), .b(tm280), .clk(clk), .q_sc(a518), .q_unsc(), .rst(reset));
    multfix #(10, 2) m14105(.a(tm60), .b(tm287), .clk(clk), .q_sc(a520), .q_unsc(), .rst(reset));
    multfix #(10, 2) m14122(.a(tm60), .b(tm280), .clk(clk), .q_sc(a521), .q_unsc(), .rst(reset));
    multfix #(10, 2) m14133(.a(tm59), .b(tm287), .clk(clk), .q_sc(a522), .q_unsc(), .rst(reset));
    multfix #(10, 2) m14196(.a(tm63), .b(tm309), .clk(clk), .q_sc(a528), .q_unsc(), .rst(reset));
    multfix #(10, 2) m14218(.a(tm64), .b(tm316), .clk(clk), .q_sc(a530), .q_unsc(), .rst(reset));
    multfix #(10, 2) m14235(.a(tm64), .b(tm309), .clk(clk), .q_sc(a531), .q_unsc(), .rst(reset));
    multfix #(10, 2) m14246(.a(tm63), .b(tm316), .clk(clk), .q_sc(a532), .q_unsc(), .rst(reset));
    subfxp #(10, 1) sub13433(.a(a458), .b(a460), .clk(clk), .q(Y2));    // 9
    addfxp #(10, 1) add13462(.a(a461), .b(a462), .clk(clk), .q(Y3));    // 9
    subfxp #(10, 1) sub13546(.a(a468), .b(a470), .clk(clk), .q(Y6));    // 9
    addfxp #(10, 1) add13575(.a(a471), .b(a472), .clk(clk), .q(Y7));    // 9
    subfxp #(10, 1) sub13659(.a(a478), .b(a480), .clk(clk), .q(Y10));    // 9
    addfxp #(10, 1) add13688(.a(a481), .b(a482), .clk(clk), .q(Y11));    // 9
    subfxp #(10, 1) sub13772(.a(a488), .b(a490), .clk(clk), .q(Y14));    // 9
    addfxp #(10, 1) add13801(.a(a491), .b(a492), .clk(clk), .q(Y15));    // 9
    subfxp #(10, 1) sub13885(.a(a498), .b(a500), .clk(clk), .q(Y18));    // 9
    addfxp #(10, 1) add13914(.a(a501), .b(a502), .clk(clk), .q(Y19));    // 9
    subfxp #(10, 1) sub13998(.a(a508), .b(a510), .clk(clk), .q(Y22));    // 9
    addfxp #(10, 1) add14027(.a(a511), .b(a512), .clk(clk), .q(Y23));    // 9
    subfxp #(10, 1) sub14111(.a(a518), .b(a520), .clk(clk), .q(Y26));    // 9
    addfxp #(10, 1) add14140(.a(a521), .b(a522), .clk(clk), .q(Y27));    // 9
    subfxp #(10, 1) sub14224(.a(a528), .b(a530), .clk(clk), .q(Y30));    // 9
    addfxp #(10, 1) add14253(.a(a531), .b(a532), .clk(clk), .q(Y31));    // 9


   always @(posedge clk) begin
      if (reset == 1) begin
         tm35 <= 0;
         tm106 <= 0;
         tm36 <= 0;
         tm113 <= 0;
         tm36 <= 0;
         tm106 <= 0;
         tm35 <= 0;
         tm113 <= 0;
         tm39 <= 0;
         tm135 <= 0;
         tm40 <= 0;
         tm142 <= 0;
         tm40 <= 0;
         tm135 <= 0;
         tm39 <= 0;
         tm142 <= 0;
         tm43 <= 0;
         tm164 <= 0;
         tm44 <= 0;
         tm171 <= 0;
         tm44 <= 0;
         tm164 <= 0;
         tm43 <= 0;
         tm171 <= 0;
         tm47 <= 0;
         tm193 <= 0;
         tm48 <= 0;
         tm200 <= 0;
         tm48 <= 0;
         tm193 <= 0;
         tm47 <= 0;
         tm200 <= 0;
         tm51 <= 0;
         tm222 <= 0;
         tm52 <= 0;
         tm229 <= 0;
         tm52 <= 0;
         tm222 <= 0;
         tm51 <= 0;
         tm229 <= 0;
         tm55 <= 0;
         tm251 <= 0;
         tm56 <= 0;
         tm258 <= 0;
         tm56 <= 0;
         tm251 <= 0;
         tm55 <= 0;
         tm258 <= 0;
         tm59 <= 0;
         tm280 <= 0;
         tm60 <= 0;
         tm287 <= 0;
         tm60 <= 0;
         tm280 <= 0;
         tm59 <= 0;
         tm287 <= 0;
         tm63 <= 0;
         tm309 <= 0;
         tm64 <= 0;
         tm316 <= 0;
         tm64 <= 0;
         tm309 <= 0;
         tm63 <= 0;
         tm316 <= 0;
      end
      else begin
         i2 <= i2_in;
         i1 <= i1_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         X16 <= X16_in;
         X17 <= X17_in;
         X18 <= X18_in;
         X19 <= X19_in;
         X20 <= X20_in;
         X21 <= X21_in;
         X22 <= X22_in;
         X23 <= X23_in;
         X24 <= X24_in;
         X25 <= X25_in;
         X26 <= X26_in;
         X27 <= X27_in;
         X28 <= X28_in;
         X29 <= X29_in;
         X30 <= X30_in;
         X31 <= X31_in;
         nexti <= next_in;
         tm99 <= a453;
         tm100 <= a533;
         tm107 <= a534;
         tm129 <= a537;
         tm136 <= a538;
         tm158 <= a541;
         tm165 <= a542;
         tm187 <= a545;
         tm194 <= a546;
         tm216 <= a549;
         tm223 <= a550;
         tm245 <= a553;
         tm252 <= a554;
         tm274 <= a557;
         tm281 <= a558;
         tm303 <= a561;
         tm310 <= a562;
         tm331 <= X0;
         tm341 <= X1;
         tm351 <= X4;
         tm361 <= X5;
         tm371 <= X8;
         tm381 <= X9;
         tm391 <= X12;
         tm401 <= X13;
         tm411 <= X16;
         tm421 <= X17;
         tm431 <= X20;
         tm441 <= X21;
         tm451 <= X24;
         tm461 <= X25;
         tm471 <= X28;
         tm481 <= X29;
         a454 <= (a451 & tm99);
         a464 <= (a463 & tm99);
         a474 <= (a473 & tm99);
         a484 <= (a483 & tm99);
         a494 <= (a493 & tm99);
         a504 <= (a503 & tm99);
         a514 <= (a513 & tm99);
         a524 <= (a523 & tm99);
         tm101 <= tm100;
         tm108 <= tm107;
         tm130 <= tm129;
         tm137 <= tm136;
         tm159 <= tm158;
         tm166 <= tm165;
         tm188 <= tm187;
         tm195 <= tm194;
         tm217 <= tm216;
         tm224 <= tm223;
         tm246 <= tm245;
         tm253 <= tm252;
         tm275 <= tm274;
         tm282 <= tm281;
         tm304 <= tm303;
         tm311 <= tm310;
         tm332 <= tm331;
         tm342 <= tm341;
         tm352 <= tm351;
         tm362 <= tm361;
         tm372 <= tm371;
         tm382 <= tm381;
         tm392 <= tm391;
         tm402 <= tm401;
         tm412 <= tm411;
         tm422 <= tm421;
         tm432 <= tm431;
         tm442 <= tm441;
         tm452 <= tm451;
         tm462 <= tm461;
         tm472 <= tm471;
         tm482 <= tm481;
         tm102 <= tm101;
         tm109 <= tm108;
         tm131 <= tm130;
         tm138 <= tm137;
         tm160 <= tm159;
         tm167 <= tm166;
         tm189 <= tm188;
         tm196 <= tm195;
         tm218 <= tm217;
         tm225 <= tm224;
         tm247 <= tm246;
         tm254 <= tm253;
         tm276 <= tm275;
         tm283 <= tm282;
         tm305 <= tm304;
         tm312 <= tm311;
         tm333 <= tm332;
         tm343 <= tm342;
         tm353 <= tm352;
         tm363 <= tm362;
         tm373 <= tm372;
         tm383 <= tm382;
         tm393 <= tm392;
         tm403 <= tm402;
         tm413 <= tm412;
         tm423 <= tm422;
         tm433 <= tm432;
         tm443 <= tm442;
         tm453 <= tm452;
         tm463 <= tm462;
         tm473 <= tm472;
         tm483 <= tm482;
         tm103 <= tm102;
         tm110 <= tm109;
         tm132 <= tm131;
         tm139 <= tm138;
         tm161 <= tm160;
         tm168 <= tm167;
         tm190 <= tm189;
         tm197 <= tm196;
         tm219 <= tm218;
         tm226 <= tm225;
         tm248 <= tm247;
         tm255 <= tm254;
         tm277 <= tm276;
         tm284 <= tm283;
         tm306 <= tm305;
         tm313 <= tm312;
         tm334 <= tm333;
         tm344 <= tm343;
         tm354 <= tm353;
         tm364 <= tm363;
         tm374 <= tm373;
         tm384 <= tm383;
         tm394 <= tm393;
         tm404 <= tm403;
         tm414 <= tm413;
         tm424 <= tm423;
         tm434 <= tm433;
         tm444 <= tm443;
         tm454 <= tm453;
         tm464 <= tm463;
         tm474 <= tm473;
         tm484 <= tm483;
         tm104 <= tm103;
         tm111 <= tm110;
         tm133 <= tm132;
         tm140 <= tm139;
         tm162 <= tm161;
         tm169 <= tm168;
         tm191 <= tm190;
         tm198 <= tm197;
         tm220 <= tm219;
         tm227 <= tm226;
         tm249 <= tm248;
         tm256 <= tm255;
         tm278 <= tm277;
         tm285 <= tm284;
         tm307 <= tm306;
         tm314 <= tm313;
         tm335 <= tm334;
         tm345 <= tm344;
         tm355 <= tm354;
         tm365 <= tm364;
         tm375 <= tm374;
         tm385 <= tm384;
         tm395 <= tm394;
         tm405 <= tm404;
         tm415 <= tm414;
         tm425 <= tm424;
         tm435 <= tm434;
         tm445 <= tm444;
         tm455 <= tm454;
         tm465 <= tm464;
         tm475 <= tm474;
         tm485 <= tm484;
         tm105 <= tm104;
         tm112 <= tm111;
         tm134 <= tm133;
         tm141 <= tm140;
         tm163 <= tm162;
         tm170 <= tm169;
         tm192 <= tm191;
         tm199 <= tm198;
         tm221 <= tm220;
         tm228 <= tm227;
         tm250 <= tm249;
         tm257 <= tm256;
         tm279 <= tm278;
         tm286 <= tm285;
         tm308 <= tm307;
         tm315 <= tm314;
         tm336 <= tm335;
         tm346 <= tm345;
         tm356 <= tm355;
         tm366 <= tm365;
         tm376 <= tm375;
         tm386 <= tm385;
         tm396 <= tm395;
         tm406 <= tm405;
         tm416 <= tm415;
         tm426 <= tm425;
         tm436 <= tm435;
         tm446 <= tm445;
         tm456 <= tm455;
         tm466 <= tm465;
         tm476 <= tm475;
         tm486 <= tm485;
         tm35 <= a457;
         tm36 <= a459;
         tm39 <= a467;
         tm40 <= a469;
         tm43 <= a477;
         tm44 <= a479;
         tm47 <= a487;
         tm48 <= a489;
         tm51 <= a497;
         tm52 <= a499;
         tm55 <= a507;
         tm56 <= a509;
         tm59 <= a517;
         tm60 <= a519;
         tm63 <= a527;
         tm64 <= a529;
         tm106 <= tm105;
         tm113 <= tm112;
         tm135 <= tm134;
         tm142 <= tm141;
         tm164 <= tm163;
         tm171 <= tm170;
         tm193 <= tm192;
         tm200 <= tm199;
         tm222 <= tm221;
         tm229 <= tm228;
         tm251 <= tm250;
         tm258 <= tm257;
         tm280 <= tm279;
         tm287 <= tm286;
         tm309 <= tm308;
         tm316 <= tm315;
         tm337 <= tm336;
         tm347 <= tm346;
         tm357 <= tm356;
         tm367 <= tm366;
         tm377 <= tm376;
         tm387 <= tm386;
         tm397 <= tm396;
         tm407 <= tm406;
         tm417 <= tm416;
         tm427 <= tm426;
         tm437 <= tm436;
         tm447 <= tm446;
         tm457 <= tm456;
         tm467 <= tm466;
         tm477 <= tm476;
         tm487 <= tm486;
         tm338 <= tm337;
         tm348 <= tm347;
         tm358 <= tm357;
         tm368 <= tm367;
         tm378 <= tm377;
         tm388 <= tm387;
         tm398 <= tm397;
         tm408 <= tm407;
         tm418 <= tm417;
         tm428 <= tm427;
         tm438 <= tm437;
         tm448 <= tm447;
         tm458 <= tm457;
         tm468 <= tm467;
         tm478 <= tm477;
         tm488 <= tm487;
         tm339 <= tm338;
         tm349 <= tm348;
         tm359 <= tm358;
         tm369 <= tm368;
         tm379 <= tm378;
         tm389 <= tm388;
         tm399 <= tm398;
         tm409 <= tm408;
         tm419 <= tm418;
         tm429 <= tm428;
         tm439 <= tm438;
         tm449 <= tm448;
         tm459 <= tm458;
         tm469 <= tm468;
         tm479 <= tm478;
         tm489 <= tm488;
         tm340 <= tm339;
         tm350 <= tm349;
         tm360 <= tm359;
         tm370 <= tm369;
         tm380 <= tm379;
         tm390 <= tm389;
         tm400 <= tm399;
         tm410 <= tm409;
         tm420 <= tm419;
         tm430 <= tm429;
         tm440 <= tm439;
         tm450 <= tm449;
         tm460 <= tm459;
         tm470 <= tm469;
         tm480 <= tm479;
         tm490 <= tm489;
      end
   end
endmodule

// Latency: 2
// Gap: 1
module codeBlock16312(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15,
   X16_in, Y16,
   X17_in, Y17,
   X18_in, Y18,
   X19_in, Y19,
   X20_in, Y20,
   X21_in, Y21,
   X22_in, Y22,
   X23_in, Y23,
   X24_in, Y24,
   X25_in, Y25,
   X26_in, Y26,
   X27_in, Y27,
   X28_in, Y28,
   X29_in, Y29,
   X30_in, Y30,
   X31_in, Y31);

   output next_out;
   input clk, reset, next_in;

   reg nexti;

   input [9:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in,
      X16_in,
      X17_in,
      X18_in,
      X19_in,
      X20_in,
      X21_in,
      X22_in,
      X23_in,
      X24_in,
      X25_in,
      X26_in,
      X27_in,
      X28_in,
      X29_in,
      X30_in,
      X31_in;

   reg   [9:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15,
      X16,
      X17,
      X18,
      X19,
      X20,
      X21,
      X22,
      X23,
      X24,
      X25,
      X26,
      X27,
      X28,
      X29,
      X30,
      X31;

   output [9:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15,
      Y16,
      Y17,
      Y18,
      Y19,
      Y20,
      Y21,
      Y22,
      Y23,
      Y24,
      Y25,
      Y26,
      Y27,
      Y28,
      Y29,
      Y30,
      Y31;

   shiftRegFIFO #(1, 1) shiftFIFO_18739(.X(nexti), .Y(next_out), .clk(clk));


   wire signed [9:0] a65;
   wire signed [9:0] a66;
   wire signed [9:0] a67;
   wire signed [9:0] a68;
   wire signed [9:0] a73;
   wire signed [9:0] a74;
   wire signed [9:0] a75;
   wire signed [9:0] a76;
   wire signed [9:0] a81;
   wire signed [9:0] a82;
   wire signed [9:0] a83;
   wire signed [9:0] a84;
   wire signed [9:0] a89;
   wire signed [9:0] a90;
   wire signed [9:0] a91;
   wire signed [9:0] a92;
   wire signed [9:0] a97;
   wire signed [9:0] a98;
   wire signed [9:0] a99;
   wire signed [9:0] a100;
   wire signed [9:0] a105;
   wire signed [9:0] a106;
   wire signed [9:0] a107;
   wire signed [9:0] a108;
   wire signed [9:0] a113;
   wire signed [9:0] a114;
   wire signed [9:0] a115;
   wire signed [9:0] a116;
   wire signed [9:0] a121;
   wire signed [9:0] a122;
   wire signed [9:0] a123;
   wire signed [9:0] a124;
   wire signed [10:0] tm67;
   wire signed [10:0] tm68;
   wire signed [10:0] tm69;
   wire signed [10:0] tm70;
   wire signed [9:0] Y0;
   wire signed [9:0] Y1;
   wire signed [9:0] Y2;
   wire signed [9:0] Y3;
   wire signed [10:0] tm71;
   wire signed [10:0] tm72;
   wire signed [10:0] tm73;
   wire signed [10:0] tm74;
   wire signed [9:0] Y4;
   wire signed [9:0] Y5;
   wire signed [9:0] Y6;
   wire signed [9:0] Y7;
   wire signed [10:0] tm75;
   wire signed [10:0] tm76;
   wire signed [10:0] tm77;
   wire signed [10:0] tm78;
   wire signed [9:0] Y8;
   wire signed [9:0] Y9;
   wire signed [9:0] Y10;
   wire signed [9:0] Y11;
   wire signed [10:0] tm79;
   wire signed [10:0] tm80;
   wire signed [10:0] tm81;
   wire signed [10:0] tm82;
   wire signed [9:0] Y12;
   wire signed [9:0] Y13;
   wire signed [9:0] Y14;
   wire signed [9:0] Y15;
   wire signed [10:0] tm83;
   wire signed [10:0] tm84;
   wire signed [10:0] tm85;
   wire signed [10:0] tm86;
   wire signed [9:0] Y16;
   wire signed [9:0] Y17;
   wire signed [9:0] Y18;
   wire signed [9:0] Y19;
   wire signed [10:0] tm87;
   wire signed [10:0] tm88;
   wire signed [10:0] tm89;
   wire signed [10:0] tm90;
   wire signed [9:0] Y20;
   wire signed [9:0] Y21;
   wire signed [9:0] Y22;
   wire signed [9:0] Y23;
   wire signed [10:0] tm91;
   wire signed [10:0] tm92;
   wire signed [10:0] tm93;
   wire signed [10:0] tm94;
   wire signed [9:0] Y24;
   wire signed [9:0] Y25;
   wire signed [9:0] Y26;
   wire signed [9:0] Y27;
   wire signed [10:0] tm95;
   wire signed [10:0] tm96;
   wire signed [10:0] tm97;
   wire signed [10:0] tm98;
   wire signed [9:0] Y28;
   wire signed [9:0] Y29;
   wire signed [9:0] Y30;
   wire signed [9:0] Y31;
   wire signed [9:0] t169;
   wire signed [9:0] t170;
   wire signed [9:0] t171;
   wire signed [9:0] t172;
   wire signed [9:0] t173;
   wire signed [9:0] t174;
   wire signed [9:0] t175;
   wire signed [9:0] t176;
   wire signed [9:0] t177;
   wire signed [9:0] t178;
   wire signed [9:0] t179;
   wire signed [9:0] t180;
   wire signed [9:0] t181;
   wire signed [9:0] t182;
   wire signed [9:0] t183;
   wire signed [9:0] t184;
   wire signed [9:0] t185;
   wire signed [9:0] t186;
   wire signed [9:0] t187;
   wire signed [9:0] t188;
   wire signed [9:0] t189;
   wire signed [9:0] t190;
   wire signed [9:0] t191;
   wire signed [9:0] t192;
   wire signed [9:0] t193;
   wire signed [9:0] t194;
   wire signed [9:0] t195;
   wire signed [9:0] t196;
   wire signed [9:0] t197;
   wire signed [9:0] t198;
   wire signed [9:0] t199;
   wire signed [9:0] t200;


   assign a65 = X0;
   assign a66 = X2;
   assign a67 = X1;
   assign a68 = X3;
   assign a73 = X4;
   assign a74 = X6;
   assign a75 = X5;
   assign a76 = X7;
   assign a81 = X8;
   assign a82 = X10;
   assign a83 = X9;
   assign a84 = X11;
   assign a89 = X12;
   assign a90 = X14;
   assign a91 = X13;
   assign a92 = X15;
   assign a97 = X16;
   assign a98 = X18;
   assign a99 = X17;
   assign a100 = X19;
   assign a105 = X20;
   assign a106 = X22;
   assign a107 = X21;
   assign a108 = X23;
   assign a113 = X24;
   assign a114 = X26;
   assign a115 = X25;
   assign a116 = X27;
   assign a121 = X28;
   assign a122 = X30;
   assign a123 = X29;
   assign a124 = X31;
   assign Y0 = t169;
   assign Y1 = t170;
   assign Y2 = t171;
   assign Y3 = t172;
   assign Y4 = t173;
   assign Y5 = t174;
   assign Y6 = t175;
   assign Y7 = t176;
   assign Y8 = t177;
   assign Y9 = t178;
   assign Y10 = t179;
   assign Y11 = t180;
   assign Y12 = t181;
   assign Y13 = t182;
   assign Y14 = t183;
   assign Y15 = t184;
   assign Y16 = t185;
   assign Y17 = t186;
   assign Y18 = t187;
   assign Y19 = t188;
   assign Y20 = t189;
   assign Y21 = t190;
   assign Y22 = t191;
   assign Y23 = t192;
   assign Y24 = t193;
   assign Y25 = t194;
   assign Y26 = t195;
   assign Y27 = t196;
   assign Y28 = t197;
   assign Y29 = t198;
   assign Y30 = t199;
   assign Y31 = t200;
   assign t169 = tm67[10:1];
   assign t170 = tm68[10:1];
   assign t171 = tm69[10:1];
   assign t172 = tm70[10:1];
   assign t173 = tm71[10:1];
   assign t174 = tm72[10:1];
   assign t175 = tm73[10:1];
   assign t176 = tm74[10:1];
   assign t177 = tm75[10:1];
   assign t178 = tm76[10:1];
   assign t179 = tm77[10:1];
   assign t180 = tm78[10:1];
   assign t181 = tm79[10:1];
   assign t182 = tm80[10:1];
   assign t183 = tm81[10:1];
   assign t184 = tm82[10:1];
   assign t185 = tm83[10:1];
   assign t186 = tm84[10:1];
   assign t187 = tm85[10:1];
   assign t188 = tm86[10:1];
   assign t189 = tm87[10:1];
   assign t190 = tm88[10:1];
   assign t191 = tm89[10:1];
   assign t192 = tm90[10:1];
   assign t193 = tm91[10:1];
   assign t194 = tm92[10:1];
   assign t195 = tm93[10:1];
   assign t196 = tm94[10:1];
   assign t197 = tm95[10:1];
   assign t198 = tm96[10:1];
   assign t199 = tm97[10:1];
   assign t200 = tm98[10:1];

    addfxp #(11, 1) add16324(.a({{1{a65[9]}}, a65}), .b({{1{a66[9]}}, a66}), .clk(clk), .q(tm67));    // 0
    addfxp #(11, 1) add16339(.a({{1{a67[9]}}, a67}), .b({{1{a68[9]}}, a68}), .clk(clk), .q(tm68));    // 0
    subfxp #(11, 1) sub16353(.a({{1{a65[9]}}, a65}), .b({{1{a66[9]}}, a66}), .clk(clk), .q(tm69));    // 0
    subfxp #(11, 1) sub16367(.a({{1{a67[9]}}, a67}), .b({{1{a68[9]}}, a68}), .clk(clk), .q(tm70));    // 0
    addfxp #(11, 1) add16398(.a({{1{a73[9]}}, a73}), .b({{1{a74[9]}}, a74}), .clk(clk), .q(tm71));    // 0
    addfxp #(11, 1) add16413(.a({{1{a75[9]}}, a75}), .b({{1{a76[9]}}, a76}), .clk(clk), .q(tm72));    // 0
    subfxp #(11, 1) sub16427(.a({{1{a73[9]}}, a73}), .b({{1{a74[9]}}, a74}), .clk(clk), .q(tm73));    // 0
    subfxp #(11, 1) sub16441(.a({{1{a75[9]}}, a75}), .b({{1{a76[9]}}, a76}), .clk(clk), .q(tm74));    // 0
    addfxp #(11, 1) add16472(.a({{1{a81[9]}}, a81}), .b({{1{a82[9]}}, a82}), .clk(clk), .q(tm75));    // 0
    addfxp #(11, 1) add16487(.a({{1{a83[9]}}, a83}), .b({{1{a84[9]}}, a84}), .clk(clk), .q(tm76));    // 0
    subfxp #(11, 1) sub16501(.a({{1{a81[9]}}, a81}), .b({{1{a82[9]}}, a82}), .clk(clk), .q(tm77));    // 0
    subfxp #(11, 1) sub16515(.a({{1{a83[9]}}, a83}), .b({{1{a84[9]}}, a84}), .clk(clk), .q(tm78));    // 0
    addfxp #(11, 1) add16546(.a({{1{a89[9]}}, a89}), .b({{1{a90[9]}}, a90}), .clk(clk), .q(tm79));    // 0
    addfxp #(11, 1) add16561(.a({{1{a91[9]}}, a91}), .b({{1{a92[9]}}, a92}), .clk(clk), .q(tm80));    // 0
    subfxp #(11, 1) sub16575(.a({{1{a89[9]}}, a89}), .b({{1{a90[9]}}, a90}), .clk(clk), .q(tm81));    // 0
    subfxp #(11, 1) sub16589(.a({{1{a91[9]}}, a91}), .b({{1{a92[9]}}, a92}), .clk(clk), .q(tm82));    // 0
    addfxp #(11, 1) add16620(.a({{1{a97[9]}}, a97}), .b({{1{a98[9]}}, a98}), .clk(clk), .q(tm83));    // 0
    addfxp #(11, 1) add16635(.a({{1{a99[9]}}, a99}), .b({{1{a100[9]}}, a100}), .clk(clk), .q(tm84));    // 0
    subfxp #(11, 1) sub16649(.a({{1{a97[9]}}, a97}), .b({{1{a98[9]}}, a98}), .clk(clk), .q(tm85));    // 0
    subfxp #(11, 1) sub16663(.a({{1{a99[9]}}, a99}), .b({{1{a100[9]}}, a100}), .clk(clk), .q(tm86));    // 0
    addfxp #(11, 1) add16694(.a({{1{a105[9]}}, a105}), .b({{1{a106[9]}}, a106}), .clk(clk), .q(tm87));    // 0
    addfxp #(11, 1) add16709(.a({{1{a107[9]}}, a107}), .b({{1{a108[9]}}, a108}), .clk(clk), .q(tm88));    // 0
    subfxp #(11, 1) sub16723(.a({{1{a105[9]}}, a105}), .b({{1{a106[9]}}, a106}), .clk(clk), .q(tm89));    // 0
    subfxp #(11, 1) sub16737(.a({{1{a107[9]}}, a107}), .b({{1{a108[9]}}, a108}), .clk(clk), .q(tm90));    // 0
    addfxp #(11, 1) add16768(.a({{1{a113[9]}}, a113}), .b({{1{a114[9]}}, a114}), .clk(clk), .q(tm91));    // 0
    addfxp #(11, 1) add16783(.a({{1{a115[9]}}, a115}), .b({{1{a116[9]}}, a116}), .clk(clk), .q(tm92));    // 0
    subfxp #(11, 1) sub16797(.a({{1{a113[9]}}, a113}), .b({{1{a114[9]}}, a114}), .clk(clk), .q(tm93));    // 0
    subfxp #(11, 1) sub16811(.a({{1{a115[9]}}, a115}), .b({{1{a116[9]}}, a116}), .clk(clk), .q(tm94));    // 0
    addfxp #(11, 1) add16842(.a({{1{a121[9]}}, a121}), .b({{1{a122[9]}}, a122}), .clk(clk), .q(tm95));    // 0
    addfxp #(11, 1) add16857(.a({{1{a123[9]}}, a123}), .b({{1{a124[9]}}, a124}), .clk(clk), .q(tm96));    // 0
    subfxp #(11, 1) sub16871(.a({{1{a121[9]}}, a121}), .b({{1{a122[9]}}, a122}), .clk(clk), .q(tm97));    // 0
    subfxp #(11, 1) sub16885(.a({{1{a123[9]}}, a123}), .b({{1{a124[9]}}, a124}), .clk(clk), .q(tm98));    // 0


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         X16 <= X16_in;
         X17 <= X17_in;
         X18 <= X18_in;
         X19 <= X19_in;
         X20 <= X20_in;
         X21 <= X21_in;
         X22 <= X22_in;
         X23 <= X23_in;
         X24 <= X24_in;
         X25 <= X25_in;
         X26 <= X26_in;
         X27 <= X27_in;
         X28 <= X28_in;
         X29 <= X29_in;
         X30 <= X30_in;
         X31 <= X31_in;
         nexti <= next_in;
      end
   end
endmodule

// Latency: 52
// Gap: 64
module rc16909(clk, reset, nexti, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15,
   X16, Y16,
   X17, Y17,
   X18, Y18,
   X19, Y19,
   X20, Y20,
   X21, Y21,
   X22, Y22,
   X23, Y23,
   X24, Y24,
   X25, Y25,
   X26, Y26,
   X27, Y27,
   X28, Y28,
   X29, Y29,
   X30, Y30,
   X31, Y31);

   output next_out;
   input clk, reset, nexti;

   input [9:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15,
      X16,
      X17,
      X18,
      X19,
      X20,
      X21,
      X22,
      X23,
      X24,
      X25,
      X26,
      X27,
      X28,
      X29,
      X30,
      X31;

   output [9:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15,
      Y16,
      Y17,
      Y18,
      Y19,
      Y20,
      Y21,
      Y22,
      Y23,
      Y24,
      Y25,
      Y26,
      Y27,
      Y28,
      Y29,
      Y30,
      Y31;

   wire [19:0] t0;
   wire [19:0] s0;
   assign t0 = {X0, X1};
   wire [19:0] t1;
   wire [19:0] s1;
   assign t1 = {X2, X3};
   wire [19:0] t2;
   wire [19:0] s2;
   assign t2 = {X4, X5};
   wire [19:0] t3;
   wire [19:0] s3;
   assign t3 = {X6, X7};
   wire [19:0] t4;
   wire [19:0] s4;
   assign t4 = {X8, X9};
   wire [19:0] t5;
   wire [19:0] s5;
   assign t5 = {X10, X11};
   wire [19:0] t6;
   wire [19:0] s6;
   assign t6 = {X12, X13};
   wire [19:0] t7;
   wire [19:0] s7;
   assign t7 = {X14, X15};
   wire [19:0] t8;
   wire [19:0] s8;
   assign t8 = {X16, X17};
   wire [19:0] t9;
   wire [19:0] s9;
   assign t9 = {X18, X19};
   wire [19:0] t10;
   wire [19:0] s10;
   assign t10 = {X20, X21};
   wire [19:0] t11;
   wire [19:0] s11;
   assign t11 = {X22, X23};
   wire [19:0] t12;
   wire [19:0] s12;
   assign t12 = {X24, X25};
   wire [19:0] t13;
   wire [19:0] s13;
   assign t13 = {X26, X27};
   wire [19:0] t14;
   wire [19:0] s14;
   assign t14 = {X28, X29};
   wire [19:0] t15;
   wire [19:0] s15;
   assign t15 = {X30, X31};
   assign Y0 = s0[19:10];
   assign Y1 = s0[9:0];
   assign Y2 = s1[19:10];
   assign Y3 = s1[9:0];
   assign Y4 = s2[19:10];
   assign Y5 = s2[9:0];
   assign Y6 = s3[19:10];
   assign Y7 = s3[9:0];
   assign Y8 = s4[19:10];
   assign Y9 = s4[9:0];
   assign Y10 = s5[19:10];
   assign Y11 = s5[9:0];
   assign Y12 = s6[19:10];
   assign Y13 = s6[9:0];
   assign Y14 = s7[19:10];
   assign Y15 = s7[9:0];
   assign Y16 = s8[19:10];
   assign Y17 = s8[9:0];
   assign Y18 = s9[19:10];
   assign Y19 = s9[9:0];
   assign Y20 = s10[19:10];
   assign Y21 = s10[9:0];
   assign Y22 = s11[19:10];
   assign Y23 = s11[9:0];
   assign Y24 = s12[19:10];
   assign Y25 = s12[9:0];
   assign Y26 = s13[19:10];
   assign Y27 = s13[9:0];
   assign Y28 = s14[19:10];
   assign Y29 = s14[9:0];
   assign Y30 = s15[19:10];
   assign Y31 = s15[9:0];

   perm16907 instPerm18740(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
    .x8(t8), .y8(s8),
    .x9(t9), .y9(s9),
    .x10(t10), .y10(s10),
    .x11(t11), .y11(s11),
    .x12(t12), .y12(s12),
    .x13(t13), .y13(s13),
    .x14(t14), .y14(s14),
    .x15(t15), .y15(s15),
   .clk(clk), .nexti(nexti), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 52
// Gap: 64
module perm16907(clk, nexti, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7,
   x8, y8,
   x9, y9,
   x10, y10,
   x11, y11,
   x12, y12,
   x13, y13,
   x14, y14,
   x15, y15);
   parameter numBanks = 16;
   parameter logBanks = 4;
   parameter depth = 64;
   parameter logDepth = 6;
   parameter width = 20;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  ybuff2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  ybuff3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  ybuff4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  ybuff5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  ybuff6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  ybuff7;
   input [width-1:0]  x8;
   output [width-1:0]  y8;
   wire [width-1:0]  ybuff8;
   input [width-1:0]  x9;
   output [width-1:0]  y9;
   wire [width-1:0]  ybuff9;
   input [width-1:0]  x10;
   output [width-1:0]  y10;
   wire [width-1:0]  ybuff10;
   input [width-1:0]  x11;
   output [width-1:0]  y11;
   wire [width-1:0]  ybuff11;
   input [width-1:0]  x12;
   output [width-1:0]  y12;
   wire [width-1:0]  ybuff12;
   input [width-1:0]  x13;
   output [width-1:0]  y13;
   wire [width-1:0]  ybuff13;
   input [width-1:0]  x14;
   output [width-1:0]  y14;
   wire [width-1:0]  ybuff14;
   input [width-1:0]  x15;
   output [width-1:0]  y15;
   wire [width-1:0]  ybuff15;
   input 	      clk, nexti, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;
   wire [logBanks-1:0] inBank2, outBank2;
   wire [logDepth-1:0] inAddr2, outAddr2;
   wire [logBanks-1:0] outBank_a2;
   wire [logDepth-1:0] outAddr_a2;
   wire [logDepth+logBanks-1:0] addr2, addr2b, addr2c;
   wire [logBanks-1:0] inBank3, outBank3;
   wire [logDepth-1:0] inAddr3, outAddr3;
   wire [logBanks-1:0] outBank_a3;
   wire [logDepth-1:0] outAddr_a3;
   wire [logDepth+logBanks-1:0] addr3, addr3b, addr3c;
   wire [logBanks-1:0] inBank4, outBank4;
   wire [logDepth-1:0] inAddr4, outAddr4;
   wire [logBanks-1:0] outBank_a4;
   wire [logDepth-1:0] outAddr_a4;
   wire [logDepth+logBanks-1:0] addr4, addr4b, addr4c;
   wire [logBanks-1:0] inBank5, outBank5;
   wire [logDepth-1:0] inAddr5, outAddr5;
   wire [logBanks-1:0] outBank_a5;
   wire [logDepth-1:0] outAddr_a5;
   wire [logDepth+logBanks-1:0] addr5, addr5b, addr5c;
   wire [logBanks-1:0] inBank6, outBank6;
   wire [logDepth-1:0] inAddr6, outAddr6;
   wire [logBanks-1:0] outBank_a6;
   wire [logDepth-1:0] outAddr_a6;
   wire [logDepth+logBanks-1:0] addr6, addr6b, addr6c;
   wire [logBanks-1:0] inBank7, outBank7;
   wire [logDepth-1:0] inAddr7, outAddr7;
   wire [logBanks-1:0] outBank_a7;
   wire [logDepth-1:0] outAddr_a7;
   wire [logDepth+logBanks-1:0] addr7, addr7b, addr7c;
   wire [logBanks-1:0] inBank8, outBank8;
   wire [logDepth-1:0] inAddr8, outAddr8;
   wire [logBanks-1:0] outBank_a8;
   wire [logDepth-1:0] outAddr_a8;
   wire [logDepth+logBanks-1:0] addr8, addr8b, addr8c;
   wire [logBanks-1:0] inBank9, outBank9;
   wire [logDepth-1:0] inAddr9, outAddr9;
   wire [logBanks-1:0] outBank_a9;
   wire [logDepth-1:0] outAddr_a9;
   wire [logDepth+logBanks-1:0] addr9, addr9b, addr9c;
   wire [logBanks-1:0] inBank10, outBank10;
   wire [logDepth-1:0] inAddr10, outAddr10;
   wire [logBanks-1:0] outBank_a10;
   wire [logDepth-1:0] outAddr_a10;
   wire [logDepth+logBanks-1:0] addr10, addr10b, addr10c;
   wire [logBanks-1:0] inBank11, outBank11;
   wire [logDepth-1:0] inAddr11, outAddr11;
   wire [logBanks-1:0] outBank_a11;
   wire [logDepth-1:0] outAddr_a11;
   wire [logDepth+logBanks-1:0] addr11, addr11b, addr11c;
   wire [logBanks-1:0] inBank12, outBank12;
   wire [logDepth-1:0] inAddr12, outAddr12;
   wire [logBanks-1:0] outBank_a12;
   wire [logDepth-1:0] outAddr_a12;
   wire [logDepth+logBanks-1:0] addr12, addr12b, addr12c;
   wire [logBanks-1:0] inBank13, outBank13;
   wire [logDepth-1:0] inAddr13, outAddr13;
   wire [logBanks-1:0] outBank_a13;
   wire [logDepth-1:0] outAddr_a13;
   wire [logDepth+logBanks-1:0] addr13, addr13b, addr13c;
   wire [logBanks-1:0] inBank14, outBank14;
   wire [logDepth-1:0] inAddr14, outAddr14;
   wire [logBanks-1:0] outBank_a14;
   wire [logDepth-1:0] outAddr_a14;
   wire [logDepth+logBanks-1:0] addr14, addr14b, addr14c;
   wire [logBanks-1:0] inBank15, outBank15;
   wire [logDepth-1:0] inAddr15, outAddr15;
   wire [logBanks-1:0] outBank_a15;
   wire [logDepth-1:0] outAddr_a15;
   wire [logDepth+logBanks-1:0] addr15, addr15b, addr15c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 4'd0};
   assign    addr0b = {outCount, 4'd0};
   assign    addr0c = {outCount_for_rd_addr, 4'd0};
   assign    addr1 = {inCount, 4'd1};
   assign    addr1b = {outCount, 4'd1};
   assign    addr1c = {outCount_for_rd_addr, 4'd1};
   assign    addr2 = {inCount, 4'd2};
   assign    addr2b = {outCount, 4'd2};
   assign    addr2c = {outCount_for_rd_addr, 4'd2};
   assign    addr3 = {inCount, 4'd3};
   assign    addr3b = {outCount, 4'd3};
   assign    addr3c = {outCount_for_rd_addr, 4'd3};
   assign    addr4 = {inCount, 4'd4};
   assign    addr4b = {outCount, 4'd4};
   assign    addr4c = {outCount_for_rd_addr, 4'd4};
   assign    addr5 = {inCount, 4'd5};
   assign    addr5b = {outCount, 4'd5};
   assign    addr5c = {outCount_for_rd_addr, 4'd5};
   assign    addr6 = {inCount, 4'd6};
   assign    addr6b = {outCount, 4'd6};
   assign    addr6c = {outCount_for_rd_addr, 4'd6};
   assign    addr7 = {inCount, 4'd7};
   assign    addr7b = {outCount, 4'd7};
   assign    addr7c = {outCount_for_rd_addr, 4'd7};
   assign    addr8 = {inCount, 4'd8};
   assign    addr8b = {outCount, 4'd8};
   assign    addr8c = {outCount_for_rd_addr, 4'd8};
   assign    addr9 = {inCount, 4'd9};
   assign    addr9b = {outCount, 4'd9};
   assign    addr9c = {outCount_for_rd_addr, 4'd9};
   assign    addr10 = {inCount, 4'd10};
   assign    addr10b = {outCount, 4'd10};
   assign    addr10c = {outCount_for_rd_addr, 4'd10};
   assign    addr11 = {inCount, 4'd11};
   assign    addr11b = {outCount, 4'd11};
   assign    addr11c = {outCount_for_rd_addr, 4'd11};
   assign    addr12 = {inCount, 4'd12};
   assign    addr12b = {outCount, 4'd12};
   assign    addr12c = {outCount_for_rd_addr, 4'd12};
   assign    addr13 = {inCount, 4'd13};
   assign    addr13b = {outCount, 4'd13};
   assign    addr13c = {outCount_for_rd_addr, 4'd13};
   assign    addr14 = {inCount, 4'd14};
   assign    addr14b = {outCount, 4'd14};
   assign    addr14c = {outCount_for_rd_addr, 4'd14};
   assign    addr15 = {inCount, 4'd15};
   assign    addr15b = {outCount, 4'd15};
   assign    addr15c = {outCount_for_rd_addr, 4'd15};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_0_2, w_0_3, w_0_4, w_0_5, w_0_6, w_0_7, w_0_8, w_0_9, w_0_10, w_0_11, w_0_12, w_0_13, w_0_14, w_0_15, w_1_0, w_1_1, w_1_2, w_1_3, w_1_4, w_1_5, w_1_6, w_1_7, w_1_8, w_1_9, w_1_10, w_1_11, w_1_12, w_1_13, w_1_14, w_1_15;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    reg [width-1:0] z_0_2;
    reg [width-1:0] z_0_3;
    reg [width-1:0] z_0_4;
    reg [width-1:0] z_0_5;
    reg [width-1:0] z_0_6;
    reg [width-1:0] z_0_7;
    reg [width-1:0] z_0_8;
    reg [width-1:0] z_0_9;
    reg [width-1:0] z_0_10;
    reg [width-1:0] z_0_11;
    reg [width-1:0] z_0_12;
    reg [width-1:0] z_0_13;
    reg [width-1:0] z_0_14;
    reg [width-1:0] z_0_15;
    wire [width-1:0] z_1_0, z_1_1, z_1_2, z_1_3, z_1_4, z_1_5, z_1_6, z_1_7, z_1_8, z_1_9, z_1_10, z_1_11, z_1_12, z_1_13, z_1_14, z_1_15;

    wire [logDepth-1:0] u_0_0, u_0_1, u_0_2, u_0_3, u_0_4, u_0_5, u_0_6, u_0_7, u_0_8, u_0_9, u_0_10, u_0_11, u_0_12, u_0_13, u_0_14, u_0_15, u_1_0, u_1_1, u_1_2, u_1_3, u_1_4, u_1_5, u_1_6, u_1_7, u_1_8, u_1_9, u_1_10, u_1_11, u_1_12, u_1_13, u_1_14, u_1_15;

    always @(posedge clk) begin
    end

   assign inBank0[0] = addr0[1];
   assign inBank0[1] = addr0[2];
   assign inBank0[2] = addr0[3];
   assign inBank0[3] = addr0[4] ^ addr0[0];
   assign inAddr0[0] = addr0[5];
   assign inAddr0[1] = addr0[6];
   assign inAddr0[2] = addr0[7];
   assign inAddr0[3] = addr0[8];
   assign inAddr0[4] = addr0[9];
   assign inAddr0[5] = addr0[0];
   assign outBank0[0] = addr0b[0];
   assign outBank0[1] = addr0b[1];
   assign outBank0[2] = addr0b[2];
   assign outBank0[3] = addr0b[9] ^ addr0b[3];
   assign outAddr0[0] = addr0b[4];
   assign outAddr0[1] = addr0b[5];
   assign outAddr0[2] = addr0b[6];
   assign outAddr0[3] = addr0b[7];
   assign outAddr0[4] = addr0b[8];
   assign outAddr0[5] = addr0b[9];
   assign outBank_a0[0] = addr0c[0];
   assign outBank_a0[1] = addr0c[1];
   assign outBank_a0[2] = addr0c[2];
   assign outBank_a0[3] = addr0c[9] ^ addr0c[3];
   assign outAddr_a0[0] = addr0c[4];
   assign outAddr_a0[1] = addr0c[5];
   assign outAddr_a0[2] = addr0c[6];
   assign outAddr_a0[3] = addr0c[7];
   assign outAddr_a0[4] = addr0c[8];
   assign outAddr_a0[5] = addr0c[9];

   assign inBank1[0] = addr1[1];
   assign inBank1[1] = addr1[2];
   assign inBank1[2] = addr1[3];
   assign inBank1[3] = addr1[4] ^ addr1[0];
   assign inAddr1[0] = addr1[5];
   assign inAddr1[1] = addr1[6];
   assign inAddr1[2] = addr1[7];
   assign inAddr1[3] = addr1[8];
   assign inAddr1[4] = addr1[9];
   assign inAddr1[5] = addr1[0];
   assign outBank1[0] = addr1b[0];
   assign outBank1[1] = addr1b[1];
   assign outBank1[2] = addr1b[2];
   assign outBank1[3] = addr1b[9] ^ addr1b[3];
   assign outAddr1[0] = addr1b[4];
   assign outAddr1[1] = addr1b[5];
   assign outAddr1[2] = addr1b[6];
   assign outAddr1[3] = addr1b[7];
   assign outAddr1[4] = addr1b[8];
   assign outAddr1[5] = addr1b[9];
   assign outBank_a1[0] = addr1c[0];
   assign outBank_a1[1] = addr1c[1];
   assign outBank_a1[2] = addr1c[2];
   assign outBank_a1[3] = addr1c[9] ^ addr1c[3];
   assign outAddr_a1[0] = addr1c[4];
   assign outAddr_a1[1] = addr1c[5];
   assign outAddr_a1[2] = addr1c[6];
   assign outAddr_a1[3] = addr1c[7];
   assign outAddr_a1[4] = addr1c[8];
   assign outAddr_a1[5] = addr1c[9];

   assign inBank2[0] = addr2[1];
   assign inBank2[1] = addr2[2];
   assign inBank2[2] = addr2[3];
   assign inBank2[3] = addr2[4] ^ addr2[0];
   assign inAddr2[0] = addr2[5];
   assign inAddr2[1] = addr2[6];
   assign inAddr2[2] = addr2[7];
   assign inAddr2[3] = addr2[8];
   assign inAddr2[4] = addr2[9];
   assign inAddr2[5] = addr2[0];
   assign outBank2[0] = addr2b[0];
   assign outBank2[1] = addr2b[1];
   assign outBank2[2] = addr2b[2];
   assign outBank2[3] = addr2b[9] ^ addr2b[3];
   assign outAddr2[0] = addr2b[4];
   assign outAddr2[1] = addr2b[5];
   assign outAddr2[2] = addr2b[6];
   assign outAddr2[3] = addr2b[7];
   assign outAddr2[4] = addr2b[8];
   assign outAddr2[5] = addr2b[9];
   assign outBank_a2[0] = addr2c[0];
   assign outBank_a2[1] = addr2c[1];
   assign outBank_a2[2] = addr2c[2];
   assign outBank_a2[3] = addr2c[9] ^ addr2c[3];
   assign outAddr_a2[0] = addr2c[4];
   assign outAddr_a2[1] = addr2c[5];
   assign outAddr_a2[2] = addr2c[6];
   assign outAddr_a2[3] = addr2c[7];
   assign outAddr_a2[4] = addr2c[8];
   assign outAddr_a2[5] = addr2c[9];

   assign inBank3[0] = addr3[1];
   assign inBank3[1] = addr3[2];
   assign inBank3[2] = addr3[3];
   assign inBank3[3] = addr3[4] ^ addr3[0];
   assign inAddr3[0] = addr3[5];
   assign inAddr3[1] = addr3[6];
   assign inAddr3[2] = addr3[7];
   assign inAddr3[3] = addr3[8];
   assign inAddr3[4] = addr3[9];
   assign inAddr3[5] = addr3[0];
   assign outBank3[0] = addr3b[0];
   assign outBank3[1] = addr3b[1];
   assign outBank3[2] = addr3b[2];
   assign outBank3[3] = addr3b[9] ^ addr3b[3];
   assign outAddr3[0] = addr3b[4];
   assign outAddr3[1] = addr3b[5];
   assign outAddr3[2] = addr3b[6];
   assign outAddr3[3] = addr3b[7];
   assign outAddr3[4] = addr3b[8];
   assign outAddr3[5] = addr3b[9];
   assign outBank_a3[0] = addr3c[0];
   assign outBank_a3[1] = addr3c[1];
   assign outBank_a3[2] = addr3c[2];
   assign outBank_a3[3] = addr3c[9] ^ addr3c[3];
   assign outAddr_a3[0] = addr3c[4];
   assign outAddr_a3[1] = addr3c[5];
   assign outAddr_a3[2] = addr3c[6];
   assign outAddr_a3[3] = addr3c[7];
   assign outAddr_a3[4] = addr3c[8];
   assign outAddr_a3[5] = addr3c[9];

   assign inBank4[0] = addr4[1];
   assign inBank4[1] = addr4[2];
   assign inBank4[2] = addr4[3];
   assign inBank4[3] = addr4[4] ^ addr4[0];
   assign inAddr4[0] = addr4[5];
   assign inAddr4[1] = addr4[6];
   assign inAddr4[2] = addr4[7];
   assign inAddr4[3] = addr4[8];
   assign inAddr4[4] = addr4[9];
   assign inAddr4[5] = addr4[0];
   assign outBank4[0] = addr4b[0];
   assign outBank4[1] = addr4b[1];
   assign outBank4[2] = addr4b[2];
   assign outBank4[3] = addr4b[9] ^ addr4b[3];
   assign outAddr4[0] = addr4b[4];
   assign outAddr4[1] = addr4b[5];
   assign outAddr4[2] = addr4b[6];
   assign outAddr4[3] = addr4b[7];
   assign outAddr4[4] = addr4b[8];
   assign outAddr4[5] = addr4b[9];
   assign outBank_a4[0] = addr4c[0];
   assign outBank_a4[1] = addr4c[1];
   assign outBank_a4[2] = addr4c[2];
   assign outBank_a4[3] = addr4c[9] ^ addr4c[3];
   assign outAddr_a4[0] = addr4c[4];
   assign outAddr_a4[1] = addr4c[5];
   assign outAddr_a4[2] = addr4c[6];
   assign outAddr_a4[3] = addr4c[7];
   assign outAddr_a4[4] = addr4c[8];
   assign outAddr_a4[5] = addr4c[9];

   assign inBank5[0] = addr5[1];
   assign inBank5[1] = addr5[2];
   assign inBank5[2] = addr5[3];
   assign inBank5[3] = addr5[4] ^ addr5[0];
   assign inAddr5[0] = addr5[5];
   assign inAddr5[1] = addr5[6];
   assign inAddr5[2] = addr5[7];
   assign inAddr5[3] = addr5[8];
   assign inAddr5[4] = addr5[9];
   assign inAddr5[5] = addr5[0];
   assign outBank5[0] = addr5b[0];
   assign outBank5[1] = addr5b[1];
   assign outBank5[2] = addr5b[2];
   assign outBank5[3] = addr5b[9] ^ addr5b[3];
   assign outAddr5[0] = addr5b[4];
   assign outAddr5[1] = addr5b[5];
   assign outAddr5[2] = addr5b[6];
   assign outAddr5[3] = addr5b[7];
   assign outAddr5[4] = addr5b[8];
   assign outAddr5[5] = addr5b[9];
   assign outBank_a5[0] = addr5c[0];
   assign outBank_a5[1] = addr5c[1];
   assign outBank_a5[2] = addr5c[2];
   assign outBank_a5[3] = addr5c[9] ^ addr5c[3];
   assign outAddr_a5[0] = addr5c[4];
   assign outAddr_a5[1] = addr5c[5];
   assign outAddr_a5[2] = addr5c[6];
   assign outAddr_a5[3] = addr5c[7];
   assign outAddr_a5[4] = addr5c[8];
   assign outAddr_a5[5] = addr5c[9];

   assign inBank6[0] = addr6[1];
   assign inBank6[1] = addr6[2];
   assign inBank6[2] = addr6[3];
   assign inBank6[3] = addr6[4] ^ addr6[0];
   assign inAddr6[0] = addr6[5];
   assign inAddr6[1] = addr6[6];
   assign inAddr6[2] = addr6[7];
   assign inAddr6[3] = addr6[8];
   assign inAddr6[4] = addr6[9];
   assign inAddr6[5] = addr6[0];
   assign outBank6[0] = addr6b[0];
   assign outBank6[1] = addr6b[1];
   assign outBank6[2] = addr6b[2];
   assign outBank6[3] = addr6b[9] ^ addr6b[3];
   assign outAddr6[0] = addr6b[4];
   assign outAddr6[1] = addr6b[5];
   assign outAddr6[2] = addr6b[6];
   assign outAddr6[3] = addr6b[7];
   assign outAddr6[4] = addr6b[8];
   assign outAddr6[5] = addr6b[9];
   assign outBank_a6[0] = addr6c[0];
   assign outBank_a6[1] = addr6c[1];
   assign outBank_a6[2] = addr6c[2];
   assign outBank_a6[3] = addr6c[9] ^ addr6c[3];
   assign outAddr_a6[0] = addr6c[4];
   assign outAddr_a6[1] = addr6c[5];
   assign outAddr_a6[2] = addr6c[6];
   assign outAddr_a6[3] = addr6c[7];
   assign outAddr_a6[4] = addr6c[8];
   assign outAddr_a6[5] = addr6c[9];

   assign inBank7[0] = addr7[1];
   assign inBank7[1] = addr7[2];
   assign inBank7[2] = addr7[3];
   assign inBank7[3] = addr7[4] ^ addr7[0];
   assign inAddr7[0] = addr7[5];
   assign inAddr7[1] = addr7[6];
   assign inAddr7[2] = addr7[7];
   assign inAddr7[3] = addr7[8];
   assign inAddr7[4] = addr7[9];
   assign inAddr7[5] = addr7[0];
   assign outBank7[0] = addr7b[0];
   assign outBank7[1] = addr7b[1];
   assign outBank7[2] = addr7b[2];
   assign outBank7[3] = addr7b[9] ^ addr7b[3];
   assign outAddr7[0] = addr7b[4];
   assign outAddr7[1] = addr7b[5];
   assign outAddr7[2] = addr7b[6];
   assign outAddr7[3] = addr7b[7];
   assign outAddr7[4] = addr7b[8];
   assign outAddr7[5] = addr7b[9];
   assign outBank_a7[0] = addr7c[0];
   assign outBank_a7[1] = addr7c[1];
   assign outBank_a7[2] = addr7c[2];
   assign outBank_a7[3] = addr7c[9] ^ addr7c[3];
   assign outAddr_a7[0] = addr7c[4];
   assign outAddr_a7[1] = addr7c[5];
   assign outAddr_a7[2] = addr7c[6];
   assign outAddr_a7[3] = addr7c[7];
   assign outAddr_a7[4] = addr7c[8];
   assign outAddr_a7[5] = addr7c[9];

   assign inBank8[0] = addr8[1];
   assign inBank8[1] = addr8[2];
   assign inBank8[2] = addr8[3];
   assign inBank8[3] = addr8[4] ^ addr8[0];
   assign inAddr8[0] = addr8[5];
   assign inAddr8[1] = addr8[6];
   assign inAddr8[2] = addr8[7];
   assign inAddr8[3] = addr8[8];
   assign inAddr8[4] = addr8[9];
   assign inAddr8[5] = addr8[0];
   assign outBank8[0] = addr8b[0];
   assign outBank8[1] = addr8b[1];
   assign outBank8[2] = addr8b[2];
   assign outBank8[3] = addr8b[9] ^ addr8b[3];
   assign outAddr8[0] = addr8b[4];
   assign outAddr8[1] = addr8b[5];
   assign outAddr8[2] = addr8b[6];
   assign outAddr8[3] = addr8b[7];
   assign outAddr8[4] = addr8b[8];
   assign outAddr8[5] = addr8b[9];
   assign outBank_a8[0] = addr8c[0];
   assign outBank_a8[1] = addr8c[1];
   assign outBank_a8[2] = addr8c[2];
   assign outBank_a8[3] = addr8c[9] ^ addr8c[3];
   assign outAddr_a8[0] = addr8c[4];
   assign outAddr_a8[1] = addr8c[5];
   assign outAddr_a8[2] = addr8c[6];
   assign outAddr_a8[3] = addr8c[7];
   assign outAddr_a8[4] = addr8c[8];
   assign outAddr_a8[5] = addr8c[9];

   assign inBank9[0] = addr9[1];
   assign inBank9[1] = addr9[2];
   assign inBank9[2] = addr9[3];
   assign inBank9[3] = addr9[4] ^ addr9[0];
   assign inAddr9[0] = addr9[5];
   assign inAddr9[1] = addr9[6];
   assign inAddr9[2] = addr9[7];
   assign inAddr9[3] = addr9[8];
   assign inAddr9[4] = addr9[9];
   assign inAddr9[5] = addr9[0];
   assign outBank9[0] = addr9b[0];
   assign outBank9[1] = addr9b[1];
   assign outBank9[2] = addr9b[2];
   assign outBank9[3] = addr9b[9] ^ addr9b[3];
   assign outAddr9[0] = addr9b[4];
   assign outAddr9[1] = addr9b[5];
   assign outAddr9[2] = addr9b[6];
   assign outAddr9[3] = addr9b[7];
   assign outAddr9[4] = addr9b[8];
   assign outAddr9[5] = addr9b[9];
   assign outBank_a9[0] = addr9c[0];
   assign outBank_a9[1] = addr9c[1];
   assign outBank_a9[2] = addr9c[2];
   assign outBank_a9[3] = addr9c[9] ^ addr9c[3];
   assign outAddr_a9[0] = addr9c[4];
   assign outAddr_a9[1] = addr9c[5];
   assign outAddr_a9[2] = addr9c[6];
   assign outAddr_a9[3] = addr9c[7];
   assign outAddr_a9[4] = addr9c[8];
   assign outAddr_a9[5] = addr9c[9];

   assign inBank10[0] = addr10[1];
   assign inBank10[1] = addr10[2];
   assign inBank10[2] = addr10[3];
   assign inBank10[3] = addr10[4] ^ addr10[0];
   assign inAddr10[0] = addr10[5];
   assign inAddr10[1] = addr10[6];
   assign inAddr10[2] = addr10[7];
   assign inAddr10[3] = addr10[8];
   assign inAddr10[4] = addr10[9];
   assign inAddr10[5] = addr10[0];
   assign outBank10[0] = addr10b[0];
   assign outBank10[1] = addr10b[1];
   assign outBank10[2] = addr10b[2];
   assign outBank10[3] = addr10b[9] ^ addr10b[3];
   assign outAddr10[0] = addr10b[4];
   assign outAddr10[1] = addr10b[5];
   assign outAddr10[2] = addr10b[6];
   assign outAddr10[3] = addr10b[7];
   assign outAddr10[4] = addr10b[8];
   assign outAddr10[5] = addr10b[9];
   assign outBank_a10[0] = addr10c[0];
   assign outBank_a10[1] = addr10c[1];
   assign outBank_a10[2] = addr10c[2];
   assign outBank_a10[3] = addr10c[9] ^ addr10c[3];
   assign outAddr_a10[0] = addr10c[4];
   assign outAddr_a10[1] = addr10c[5];
   assign outAddr_a10[2] = addr10c[6];
   assign outAddr_a10[3] = addr10c[7];
   assign outAddr_a10[4] = addr10c[8];
   assign outAddr_a10[5] = addr10c[9];

   assign inBank11[0] = addr11[1];
   assign inBank11[1] = addr11[2];
   assign inBank11[2] = addr11[3];
   assign inBank11[3] = addr11[4] ^ addr11[0];
   assign inAddr11[0] = addr11[5];
   assign inAddr11[1] = addr11[6];
   assign inAddr11[2] = addr11[7];
   assign inAddr11[3] = addr11[8];
   assign inAddr11[4] = addr11[9];
   assign inAddr11[5] = addr11[0];
   assign outBank11[0] = addr11b[0];
   assign outBank11[1] = addr11b[1];
   assign outBank11[2] = addr11b[2];
   assign outBank11[3] = addr11b[9] ^ addr11b[3];
   assign outAddr11[0] = addr11b[4];
   assign outAddr11[1] = addr11b[5];
   assign outAddr11[2] = addr11b[6];
   assign outAddr11[3] = addr11b[7];
   assign outAddr11[4] = addr11b[8];
   assign outAddr11[5] = addr11b[9];
   assign outBank_a11[0] = addr11c[0];
   assign outBank_a11[1] = addr11c[1];
   assign outBank_a11[2] = addr11c[2];
   assign outBank_a11[3] = addr11c[9] ^ addr11c[3];
   assign outAddr_a11[0] = addr11c[4];
   assign outAddr_a11[1] = addr11c[5];
   assign outAddr_a11[2] = addr11c[6];
   assign outAddr_a11[3] = addr11c[7];
   assign outAddr_a11[4] = addr11c[8];
   assign outAddr_a11[5] = addr11c[9];

   assign inBank12[0] = addr12[1];
   assign inBank12[1] = addr12[2];
   assign inBank12[2] = addr12[3];
   assign inBank12[3] = addr12[4] ^ addr12[0];
   assign inAddr12[0] = addr12[5];
   assign inAddr12[1] = addr12[6];
   assign inAddr12[2] = addr12[7];
   assign inAddr12[3] = addr12[8];
   assign inAddr12[4] = addr12[9];
   assign inAddr12[5] = addr12[0];
   assign outBank12[0] = addr12b[0];
   assign outBank12[1] = addr12b[1];
   assign outBank12[2] = addr12b[2];
   assign outBank12[3] = addr12b[9] ^ addr12b[3];
   assign outAddr12[0] = addr12b[4];
   assign outAddr12[1] = addr12b[5];
   assign outAddr12[2] = addr12b[6];
   assign outAddr12[3] = addr12b[7];
   assign outAddr12[4] = addr12b[8];
   assign outAddr12[5] = addr12b[9];
   assign outBank_a12[0] = addr12c[0];
   assign outBank_a12[1] = addr12c[1];
   assign outBank_a12[2] = addr12c[2];
   assign outBank_a12[3] = addr12c[9] ^ addr12c[3];
   assign outAddr_a12[0] = addr12c[4];
   assign outAddr_a12[1] = addr12c[5];
   assign outAddr_a12[2] = addr12c[6];
   assign outAddr_a12[3] = addr12c[7];
   assign outAddr_a12[4] = addr12c[8];
   assign outAddr_a12[5] = addr12c[9];

   assign inBank13[0] = addr13[1];
   assign inBank13[1] = addr13[2];
   assign inBank13[2] = addr13[3];
   assign inBank13[3] = addr13[4] ^ addr13[0];
   assign inAddr13[0] = addr13[5];
   assign inAddr13[1] = addr13[6];
   assign inAddr13[2] = addr13[7];
   assign inAddr13[3] = addr13[8];
   assign inAddr13[4] = addr13[9];
   assign inAddr13[5] = addr13[0];
   assign outBank13[0] = addr13b[0];
   assign outBank13[1] = addr13b[1];
   assign outBank13[2] = addr13b[2];
   assign outBank13[3] = addr13b[9] ^ addr13b[3];
   assign outAddr13[0] = addr13b[4];
   assign outAddr13[1] = addr13b[5];
   assign outAddr13[2] = addr13b[6];
   assign outAddr13[3] = addr13b[7];
   assign outAddr13[4] = addr13b[8];
   assign outAddr13[5] = addr13b[9];
   assign outBank_a13[0] = addr13c[0];
   assign outBank_a13[1] = addr13c[1];
   assign outBank_a13[2] = addr13c[2];
   assign outBank_a13[3] = addr13c[9] ^ addr13c[3];
   assign outAddr_a13[0] = addr13c[4];
   assign outAddr_a13[1] = addr13c[5];
   assign outAddr_a13[2] = addr13c[6];
   assign outAddr_a13[3] = addr13c[7];
   assign outAddr_a13[4] = addr13c[8];
   assign outAddr_a13[5] = addr13c[9];

   assign inBank14[0] = addr14[1];
   assign inBank14[1] = addr14[2];
   assign inBank14[2] = addr14[3];
   assign inBank14[3] = addr14[4] ^ addr14[0];
   assign inAddr14[0] = addr14[5];
   assign inAddr14[1] = addr14[6];
   assign inAddr14[2] = addr14[7];
   assign inAddr14[3] = addr14[8];
   assign inAddr14[4] = addr14[9];
   assign inAddr14[5] = addr14[0];
   assign outBank14[0] = addr14b[0];
   assign outBank14[1] = addr14b[1];
   assign outBank14[2] = addr14b[2];
   assign outBank14[3] = addr14b[9] ^ addr14b[3];
   assign outAddr14[0] = addr14b[4];
   assign outAddr14[1] = addr14b[5];
   assign outAddr14[2] = addr14b[6];
   assign outAddr14[3] = addr14b[7];
   assign outAddr14[4] = addr14b[8];
   assign outAddr14[5] = addr14b[9];
   assign outBank_a14[0] = addr14c[0];
   assign outBank_a14[1] = addr14c[1];
   assign outBank_a14[2] = addr14c[2];
   assign outBank_a14[3] = addr14c[9] ^ addr14c[3];
   assign outAddr_a14[0] = addr14c[4];
   assign outAddr_a14[1] = addr14c[5];
   assign outAddr_a14[2] = addr14c[6];
   assign outAddr_a14[3] = addr14c[7];
   assign outAddr_a14[4] = addr14c[8];
   assign outAddr_a14[5] = addr14c[9];

   assign inBank15[0] = addr15[1];
   assign inBank15[1] = addr15[2];
   assign inBank15[2] = addr15[3];
   assign inBank15[3] = addr15[4] ^ addr15[0];
   assign inAddr15[0] = addr15[5];
   assign inAddr15[1] = addr15[6];
   assign inAddr15[2] = addr15[7];
   assign inAddr15[3] = addr15[8];
   assign inAddr15[4] = addr15[9];
   assign inAddr15[5] = addr15[0];
   assign outBank15[0] = addr15b[0];
   assign outBank15[1] = addr15b[1];
   assign outBank15[2] = addr15b[2];
   assign outBank15[3] = addr15b[9] ^ addr15b[3];
   assign outAddr15[0] = addr15b[4];
   assign outAddr15[1] = addr15b[5];
   assign outAddr15[2] = addr15b[6];
   assign outAddr15[3] = addr15b[7];
   assign outAddr15[4] = addr15b[8];
   assign outAddr15[5] = addr15b[9];
   assign outBank_a15[0] = addr15c[0];
   assign outBank_a15[1] = addr15c[1];
   assign outBank_a15[2] = addr15c[2];
   assign outBank_a15[3] = addr15c[9] ^ addr15c[3];
   assign outAddr_a15[0] = addr15c[4];
   assign outAddr_a15[1] = addr15c[5];
   assign outAddr_a15[2] = addr15c[6];
   assign outAddr_a15[3] = addr15c[7];
   assign outAddr_a15[4] = addr15c[8];
   assign outAddr_a15[5] = addr15c[9];

   nextReg #(50, 6) nextReg_18745(.X(nexti), .Y(next0), .reset(reset), .clk(clk));


   shiftRegFIFO #(2, 1) shiftFIFO_18748(.X(next0), .Y(next_out), .clk(clk));


   memArray1024_16907 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip0), .outFlip(outFlip0), .nexti(nexti), .reset(reset),
        .x0(w_1_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_1_0[logDepth-1:0]),
        .outAddr0(u_1_0), 
        .x1(w_1_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_1_1[logDepth-1:0]),
        .outAddr1(u_1_1), 
        .x2(w_1_2[width+logDepth-1:logDepth]), .y2(ybuff2),
        .inAddr2(w_1_2[logDepth-1:0]),
        .outAddr2(u_1_2), 
        .x3(w_1_3[width+logDepth-1:logDepth]), .y3(ybuff3),
        .inAddr3(w_1_3[logDepth-1:0]),
        .outAddr3(u_1_3), 
        .x4(w_1_4[width+logDepth-1:logDepth]), .y4(ybuff4),
        .inAddr4(w_1_4[logDepth-1:0]),
        .outAddr4(u_1_4), 
        .x5(w_1_5[width+logDepth-1:logDepth]), .y5(ybuff5),
        .inAddr5(w_1_5[logDepth-1:0]),
        .outAddr5(u_1_5), 
        .x6(w_1_6[width+logDepth-1:logDepth]), .y6(ybuff6),
        .inAddr6(w_1_6[logDepth-1:0]),
        .outAddr6(u_1_6), 
        .x7(w_1_7[width+logDepth-1:logDepth]), .y7(ybuff7),
        .inAddr7(w_1_7[logDepth-1:0]),
        .outAddr7(u_1_7), 
        .x8(w_1_8[width+logDepth-1:logDepth]), .y8(ybuff8),
        .inAddr8(w_1_8[logDepth-1:0]),
        .outAddr8(u_1_8), 
        .x9(w_1_9[width+logDepth-1:logDepth]), .y9(ybuff9),
        .inAddr9(w_1_9[logDepth-1:0]),
        .outAddr9(u_1_9), 
        .x10(w_1_10[width+logDepth-1:logDepth]), .y10(ybuff10),
        .inAddr10(w_1_10[logDepth-1:0]),
        .outAddr10(u_1_10), 
        .x11(w_1_11[width+logDepth-1:logDepth]), .y11(ybuff11),
        .inAddr11(w_1_11[logDepth-1:0]),
        .outAddr11(u_1_11), 
        .x12(w_1_12[width+logDepth-1:logDepth]), .y12(ybuff12),
        .inAddr12(w_1_12[logDepth-1:0]),
        .outAddr12(u_1_12), 
        .x13(w_1_13[width+logDepth-1:logDepth]), .y13(ybuff13),
        .inAddr13(w_1_13[logDepth-1:0]),
        .outAddr13(u_1_13), 
        .x14(w_1_14[width+logDepth-1:logDepth]), .y14(ybuff14),
        .inAddr14(w_1_14[logDepth-1:0]),
        .outAddr14(u_1_14), 
        .x15(w_1_15[width+logDepth-1:logDepth]), .y15(ybuff15),
        .inAddr15(w_1_15[logDepth-1:0]),
        .outAddr15(u_1_15), 
        .clk(clk));

   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
      z_0_2 <= 0;
      z_0_3 <= 0;
      z_0_4 <= 0;
      z_0_5 <= 0;
      z_0_6 <= 0;
      z_0_7 <= 0;
      z_0_8 <= 0;
      z_0_9 <= 0;
      z_0_10 <= 0;
      z_0_11 <= 0;
      z_0_12 <= 0;
      z_0_13 <= 0;
      z_0_14 <= 0;
      z_0_15 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
        outCount_for_rd_data <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 49)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
         if (inCount == 51)
            outCount_for_rd_data <= 0;
         else
            outCount_for_rd_data <= outCount_for_rd_data+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
      z_0_2 <= ybuff2;
      z_0_3 <= ybuff3;
      z_0_4 <= ybuff4;
      z_0_5 <= ybuff5;
      z_0_6 <= ybuff6;
      z_0_7 <= ybuff7;
      z_0_8 <= ybuff8;
      z_0_9 <= ybuff9;
      z_0_10 <= ybuff10;
      z_0_11 <= ybuff11;
      z_0_12 <= ybuff12;
      z_0_13 <= ybuff13;
      z_0_14 <= ybuff14;
      z_0_15 <= ybuff15;
         if (inCount == 49) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 63) begin
            inFlip0 <= ~inFlip0;
         end
         if (nexti == 1) begin
            if (inCount >= 49)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_8 = {x1, inAddr1};
    assign w_0_1 = {x2, inAddr2};
    assign w_0_9 = {x3, inAddr3};
    assign w_0_2 = {x4, inAddr4};
    assign w_0_10 = {x5, inAddr5};
    assign w_0_3 = {x6, inAddr6};
    assign w_0_11 = {x7, inAddr7};
    assign w_0_4 = {x8, inAddr8};
    assign w_0_12 = {x9, inAddr9};
    assign w_0_5 = {x10, inAddr10};
    assign w_0_13 = {x11, inAddr11};
    assign w_0_6 = {x12, inAddr12};
    assign w_0_14 = {x13, inAddr13};
    assign w_0_7 = {x14, inAddr14};
    assign w_0_15 = {x15, inAddr15};
    assign y0 = z_1_0;
    assign y1 = z_1_1;
    assign y2 = z_1_2;
    assign y3 = z_1_3;
    assign y4 = z_1_4;
    assign y5 = z_1_5;
    assign y6 = z_1_6;
    assign y7 = z_1_7;
    assign y8 = z_1_8;
    assign y9 = z_1_9;
    assign y10 = z_1_10;
    assign y11 = z_1_11;
    assign y12 = z_1_12;
    assign y13 = z_1_13;
    assign y14 = z_1_14;
    assign y15 = z_1_15;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    assign u_0_2 = outAddr_a2;
    assign u_0_3 = outAddr_a3;
    assign u_0_4 = outAddr_a4;
    assign u_0_5 = outAddr_a5;
    assign u_0_6 = outAddr_a6;
    assign u_0_7 = outAddr_a7;
    assign u_0_8 = outAddr_a8;
    assign u_0_9 = outAddr_a9;
    assign u_0_10 = outAddr_a10;
    assign u_0_11 = outAddr_a11;
    assign u_0_12 = outAddr_a12;
    assign u_0_13 = outAddr_a13;
    assign u_0_14 = outAddr_a14;
    assign u_0_15 = outAddr_a15;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[0];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_8), .y0(w_1_0), .y1(w_1_8), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_1(.x0(w_0_1), .x1(w_0_9), .y0(w_1_1), .y1(w_1_9), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_2(.x0(w_0_2), .x1(w_0_10), .y0(w_1_2), .y1(w_1_10), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_3(.x0(w_0_3), .x1(w_0_11), .y0(w_1_3), .y1(w_1_11), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_4(.x0(w_0_4), .x1(w_0_12), .y0(w_1_4), .y1(w_1_12), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_5(.x0(w_0_5), .x1(w_0_13), .y0(w_1_5), .y1(w_1_13), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_6(.x0(w_0_6), .x1(w_0_14), .y0(w_1_6), .y1(w_1_14), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_7(.x0(w_0_7), .x1(w_0_15), .y0(w_1_7), .y1(w_1_15), .ctrl(wr_ctrl_st_0));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[5];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_8), .y0(z_1_0), .y1(z_1_8), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_1(.x0(z_0_1), .x1(z_0_9), .y0(z_1_1), .y1(z_1_9), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_2(.x0(z_0_2), .x1(z_0_10), .y0(z_1_2), .y1(z_1_10), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_3(.x0(z_0_3), .x1(z_0_11), .y0(z_1_3), .y1(z_1_11), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_4(.x0(z_0_4), .x1(z_0_12), .y0(z_1_4), .y1(z_1_12), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_5(.x0(z_0_5), .x1(z_0_13), .y0(z_1_5), .y1(z_1_13), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_6(.x0(z_0_6), .x1(z_0_14), .y0(z_1_6), .y1(z_1_14), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_7(.x0(z_0_7), .x1(z_0_15), .y0(z_1_7), .y1(z_1_15), .ctrl(rdd_ctrl_st_0));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[5];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_8), .y0(u_1_0), .y1(u_1_8), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_1(.x0(u_0_1), .x1(u_0_9), .y0(u_1_1), .y1(u_1_9), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_2(.x0(u_0_2), .x1(u_0_10), .y0(u_1_2), .y1(u_1_10), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_3(.x0(u_0_3), .x1(u_0_11), .y0(u_1_3), .y1(u_1_11), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_4(.x0(u_0_4), .x1(u_0_12), .y0(u_1_4), .y1(u_1_12), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_5(.x0(u_0_5), .x1(u_0_13), .y0(u_1_5), .y1(u_1_13), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_6(.x0(u_0_6), .x1(u_0_14), .y0(u_1_6), .y1(u_1_14), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_7(.x0(u_0_7), .x1(u_0_15), .y0(u_1_7), .y1(u_1_15), .ctrl(rda_ctrl_st_0));
endmodule

module memArray1024_16907(nexti, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                x2, y2,
                inAddr2,
                outAddr2,
                x3, y3,
                inAddr3,
                outAddr3,
                x4, y4,
                inAddr4,
                outAddr4,
                x5, y5,
                inAddr5,
                outAddr5,
                x6, y6,
                inAddr6,
                outAddr6,
                x7, y7,
                inAddr7,
                outAddr7,
                x8, y8,
                inAddr8,
                outAddr8,
                x9, y9,
                inAddr9,
                outAddr9,
                x10, y10,
                inAddr10,
                outAddr10,
                x11, y11,
                inAddr11,
                outAddr11,
                x12, y12,
                inAddr12,
                outAddr12,
                x13, y13,
                inAddr13,
                outAddr13,
                x14, y14,
                inAddr14,
                outAddr14,
                x15, y15,
                inAddr15,
                outAddr15,
                clk, inFlip, outFlip);

   parameter numBanks = 16;
   parameter logBanks = 4;
   parameter depth = 64;
   parameter logDepth = 6;
   parameter width = 20;
         
   input     clk, nexti, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   input [width-1:0]   x2;
   output [width-1:0]  y2;
   input [logDepth-1:0] inAddr2, outAddr2;
   input [width-1:0]   x3;
   output [width-1:0]  y3;
   input [logDepth-1:0] inAddr3, outAddr3;
   input [width-1:0]   x4;
   output [width-1:0]  y4;
   input [logDepth-1:0] inAddr4, outAddr4;
   input [width-1:0]   x5;
   output [width-1:0]  y5;
   input [logDepth-1:0] inAddr5, outAddr5;
   input [width-1:0]   x6;
   output [width-1:0]  y6;
   input [logDepth-1:0] inAddr6, outAddr6;
   input [width-1:0]   x7;
   output [width-1:0]  y7;
   input [logDepth-1:0] inAddr7, outAddr7;
   input [width-1:0]   x8;
   output [width-1:0]  y8;
   input [logDepth-1:0] inAddr8, outAddr8;
   input [width-1:0]   x9;
   output [width-1:0]  y9;
   input [logDepth-1:0] inAddr9, outAddr9;
   input [width-1:0]   x10;
   output [width-1:0]  y10;
   input [logDepth-1:0] inAddr10, outAddr10;
   input [width-1:0]   x11;
   output [width-1:0]  y11;
   input [logDepth-1:0] inAddr11, outAddr11;
   input [width-1:0]   x12;
   output [width-1:0]  y12;
   input [logDepth-1:0] inAddr12, outAddr12;
   input [width-1:0]   x13;
   output [width-1:0]  y13;
   input [logDepth-1:0] inAddr13, outAddr13;
   input [width-1:0]   x14;
   output [width-1:0]  y14;
   input [logDepth-1:0] inAddr14, outAddr14;
   input [width-1:0]   x15;
   output [width-1:0]  y15;
   input [logDepth-1:0] inAddr15, outAddr15;
   nextReg #(64, 6) nextReg_18753(.X(nexti), .Y(next0), .reset(reset), .clk(clk));


   memMod #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod2(.in(x2), .out(y2), .inAddr({inFlip, inAddr2}),
	   .outAddr({outFlip, outAddr2}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod3(.in(x3), .out(y3), .inAddr({inFlip, inAddr3}),
	   .outAddr({outFlip, outAddr3}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod4(.in(x4), .out(y4), .inAddr({inFlip, inAddr4}),
	   .outAddr({outFlip, outAddr4}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod5(.in(x5), .out(y5), .inAddr({inFlip, inAddr5}),
	   .outAddr({outFlip, outAddr5}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod6(.in(x6), .out(y6), .inAddr({inFlip, inAddr6}),
	   .outAddr({outFlip, outAddr6}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod7(.in(x7), .out(y7), .inAddr({inFlip, inAddr7}),
	   .outAddr({outFlip, outAddr7}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod8(.in(x8), .out(y8), .inAddr({inFlip, inAddr8}),
	   .outAddr({outFlip, outAddr8}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod9(.in(x9), .out(y9), .inAddr({inFlip, inAddr9}),
	   .outAddr({outFlip, outAddr9}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod10(.in(x10), .out(y10), .inAddr({inFlip, inAddr10}),
	   .outAddr({outFlip, outAddr10}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod11(.in(x11), .out(y11), .inAddr({inFlip, inAddr11}),
	   .outAddr({outFlip, outAddr11}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod12(.in(x12), .out(y12), .inAddr({inFlip, inAddr12}),
	   .outAddr({outFlip, outAddr12}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod13(.in(x13), .out(y13), .inAddr({inFlip, inAddr13}),
	   .outAddr({outFlip, outAddr13}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod14(.in(x14), .out(y14), .inAddr({inFlip, inAddr14}),
	   .outAddr({outFlip, outAddr14}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod15(.in(x15), .out(y15), .inAddr({inFlip, inAddr15}),
	   .outAddr({outFlip, outAddr15}), .writeSel(1'b1), .clk(clk));   
endmodule



						module multfix(clk, rst, a, b, q_sc, q_unsc);
						   parameter WIDTH=35, CYCLES=6;

						   input signed [WIDTH-1:0]    a,b;
						   output [WIDTH-1:0]          q_sc;
						   output [WIDTH-1:0]              q_unsc;

						   input                       clk, rst;
						   
						   reg signed [2*WIDTH-1:0]    q[CYCLES-1:0];
						   wire signed [2*WIDTH-1:0]   res;   
						   integer                     i;

						   assign                      res = q[CYCLES-1];   
						   
						   assign                      q_unsc = res[WIDTH-1:0];
						   assign                      q_sc = {res[2*WIDTH-1], res[2*WIDTH-4:WIDTH-2]};
						      
						   always @(posedge clk) begin
						      q[0] <= a * b;
						      for (i = 1; i < CYCLES; i=i+1) begin
						         q[i] <= q[i-1];
						      end
						   end
						                  
						endmodule 
module addfxp(a, b, q, clk);

   parameter width = 16, cycles=1;
   
   input signed [width-1:0]  a, b;
   input                     clk;   
   output signed [width-1:0] q;
   reg signed [width-1:0]    res[cycles-1:0];

   assign                    q = res[cycles-1];
   
   integer                   i;   
   
   always @(posedge clk) begin
     res[0] <= a+b;
      for (i=1; i < cycles; i = i+1)
        res[i] <= res[i-1];
      
   end
   
endmodule

module subfxp(a, b, q, clk);

   parameter width = 16, cycles=1;
   
   input signed [width-1:0]  a, b;
   input                     clk;   
   output signed [width-1:0] q;
   reg signed [width-1:0]    res[cycles-1:0];

   assign                    q = res[cycles-1];
   
   integer                   i;   
   
   always @(posedge clk) begin
     res[0] <= a-b;
      for (i=1; i < cycles; i = i+1)
        res[i] <= res[i-1];
      
   end
  
endmodule
